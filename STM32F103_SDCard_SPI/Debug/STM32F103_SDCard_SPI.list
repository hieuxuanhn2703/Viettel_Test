
STM32F103_SDCard_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080084f4  080084f4  000094f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084fc  080084fc  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084fc  080084fc  000094fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008504  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000074  08008578  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08008578  0000a4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c922  00000000  00000000  0000a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002416  00000000  00000000  000169bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00018dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000095b  00000000  00000000  000199e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b7b  00000000  00000000  0001a343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c51  00000000  00000000  00032ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086fe6  00000000  00000000  00043b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000caaf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036e0  00000000  00000000  000cab38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ce218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08007dbc 	.word	0x08007dbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08007dbc 	.word	0x08007dbc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <Flash_Unlock>:
 *      Author: P.HIEU
 */

#include "flash.h"

void Flash_Unlock(void){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	if (FLASH_CR & FLASH_CR_LOCKa){
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <Flash_Unlock+0x34>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00c      	beq.n	8000792 <Flash_Unlock+0x2a>
		FLASH_KEYR = FLASH_KEY1a;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <Flash_Unlock+0x38>)
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <Flash_Unlock+0x3c>)
 800077c:	601a      	str	r2, [r3, #0]
		FLASH_KEYR = FLASH_KEY2a;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <Flash_Unlock+0x38>)
 8000780:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <Flash_Unlock+0x40>)
 8000782:	601a      	str	r2, [r3, #0]
		while(FLASH_CR & FLASH_CR_LOCKa);
 8000784:	bf00      	nop
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Flash_Unlock+0x34>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <Flash_Unlock+0x1e>
	}
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40022010 	.word	0x40022010
 80007a0:	40022004 	.word	0x40022004
 80007a4:	45670123 	.word	0x45670123
 80007a8:	cdef89ab 	.word	0xcdef89ab

080007ac <Flash_Lock>:

void Flash_Lock(void){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	FLASH_CR |= FLASH_CR_LOCKa;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <Flash_Lock+0x18>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a03      	ldr	r2, [pc, #12]	@ (80007c4 <Flash_Lock+0x18>)
 80007b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40022010 	.word	0x40022010

080007c8 <Flash_ErasePage>:

void Flash_ErasePage(uint32_t page){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	while(FLASH_CR & FLASH_CR_LOCKa);
 80007d0:	bf00      	nop
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <Flash_ErasePage+0x58>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f9      	bne.n	80007d2 <Flash_ErasePage+0xa>
	FLASH_CR |= FLASH_CR_PERa;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <Flash_ErasePage+0x58>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <Flash_ErasePage+0x58>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6013      	str	r3, [r2, #0]
	FLASH_AR = page;
 80007ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000824 <Flash_ErasePage+0x5c>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6013      	str	r3, [r2, #0]
	FLASH_CR |= FLASH_CR_STRTa;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <Flash_ErasePage+0x58>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <Flash_ErasePage+0x58>)
 80007f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fa:	6013      	str	r3, [r2, #0]
	while(FLASH_SR & FLASH_SR_BSYa);
 80007fc:	bf00      	nop
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <Flash_ErasePage+0x60>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f9      	bne.n	80007fe <Flash_ErasePage+0x36>
	FLASH_CR &= ~FLASH_CR_PERa;
 800080a:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <Flash_ErasePage+0x58>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <Flash_ErasePage+0x58>)
 8000810:	f023 0302 	bic.w	r3, r3, #2
 8000814:	6013      	str	r3, [r2, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40022010 	.word	0x40022010
 8000824:	40022014 	.word	0x40022014
 8000828:	4002200c 	.word	0x4002200c

0800082c <Flash_Write>:

void Flash_Write(uint32_t address, uint16_t data){
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
	while(FLASH_CR & FLASH_CR_LOCKa);
 8000838:	bf00      	nop
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <Flash_Write+0x50>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f9      	bne.n	800083a <Flash_Write+0xe>
	FLASH_CR |= FLASH_CR_PGa;
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <Flash_Write+0x50>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <Flash_Write+0x50>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]
	*(volatile uint16_t *)address = data;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	887a      	ldrh	r2, [r7, #2]
 8000856:	801a      	strh	r2, [r3, #0]
	while(FLASH_SR & FLASH_SR_BSYa);
 8000858:	bf00      	nop
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <Flash_Write+0x54>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f9      	bne.n	800085a <Flash_Write+0x2e>
	FLASH_CR &= ~FLASH_CR_PGa;
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <Flash_Write+0x50>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a04      	ldr	r2, [pc, #16]	@ (800087c <Flash_Write+0x50>)
 800086c:	f023 0301 	bic.w	r3, r3, #1
 8000870:	6013      	str	r3, [r2, #0]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40022010 	.word	0x40022010
 8000880:	4002200c 	.word	0x4002200c

08000884 <Flash_WriteString>:

void Flash_WriteString(uint32_t address, const char* str) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	FLASH_ACR &= ~FLASH_ACR_LATENCYa;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <Flash_WriteString+0x7c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <Flash_WriteString+0x7c>)
 8000894:	f023 0307 	bic.w	r3, r3, #7
 8000898:	6013      	str	r3, [r2, #0]
    uint16_t data;
    uint32_t i;
    uint32_t len = strlen(str) + 1;
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f7ff fc56 	bl	800014c <strlen>
 80008a0:	4603      	mov	r3, r0
 80008a2:	3301      	adds	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]

    Flash_Unlock();
 80008a6:	f7ff ff5f 	bl	8000768 <Flash_Unlock>
    Flash_ErasePage(address);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff8c 	bl	80007c8 <Flash_ErasePage>

    for (i = 0; i < len; i += 2) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e01a      	b.n	80008ec <Flash_WriteString+0x68>
        data = str[i] | (str[i + 1] << 8);
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	4413      	add	r3, r2
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b21a      	sxth	r2, r3
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	6839      	ldr	r1, [r7, #0]
 80008c6:	440b      	add	r3, r1
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	81fb      	strh	r3, [r7, #14]
        Flash_Write(address + i, data);
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	89fa      	ldrh	r2, [r7, #14]
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ffa3 	bl	800082c <Flash_Write>
    for (i = 0; i < len; i += 2) {
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3302      	adds	r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3e0      	bcc.n	80008b6 <Flash_WriteString+0x32>
    }

    Flash_Lock();
 80008f4:	f7ff ff5a 	bl	80007ac <Flash_Lock>
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40022000 	.word	0x40022000

08000904 <Flash_ReadString>:

void Flash_ReadString(uint32_t location, char *buffer, size_t max_length) {
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	@ 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
    uint32_t address = location;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	61fb      	str	r3, [r7, #28]
    size_t i = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]

    while (i < max_length - 1) {
 8000918:	e024      	b.n	8000964 <Flash_ReadString+0x60>
        uint16_t data = *(uint16_t *)address;
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	82fb      	strh	r3, [r7, #22]
        buffer[i] = data & 0xFF;
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	4413      	add	r3, r2
 8000926:	8afa      	ldrh	r2, [r7, #22]
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	701a      	strb	r2, [r3, #0]
        buffer[i + 1] = (data >> 8) & 0xFF;
 800092c:	8afb      	ldrh	r3, [r7, #22]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	b299      	uxth	r1, r3
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3301      	adds	r3, #1
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]

        if (buffer[i] == '\0' || buffer[i + 1] == '\0') break;
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d011      	beq.n	800096e <Flash_ReadString+0x6a>
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	3301      	adds	r3, #1
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00a      	beq.n	800096e <Flash_ReadString+0x6a>
        address += 2;
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	3302      	adds	r3, #2
 800095c:	61fb      	str	r3, [r7, #28]
        i += 2;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	3302      	adds	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
    while (i < max_length - 1) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	429a      	cmp	r2, r3
 800096c:	d3d5      	bcc.n	800091a <Flash_ReadString+0x16>
    }

    buffer[max_length - 1] = '\0';
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3b01      	subs	r3, #1
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	4413      	add	r3, r2
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3724      	adds	r7, #36	@ 0x24
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <main>:
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);

int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 800098a:	af00      	add	r7, sp, #0
  HAL_Init();
 800098c:	f000 fbc4 	bl	8001118 <HAL_Init>
  SystemClock_Config();
 8000990:	f000 f964 	bl	8000c5c <SystemClock_Config>
  MX_GPIO_Init();
 8000994:	f000 f9fe 	bl	8000d94 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000998:	f000 f99c 	bl	8000cd4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800099c:	f000 f9d0 	bl	8000d40 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80009a0:	f001 ffa8 	bl	80028f4 <MX_FATFS_Init>
  FIL Fil;
  FRESULT FR_Status;
  FATFS *FS_Ptr;
  DWORD FreeClusters;
  uint32_t FreeSpace;
  DWORD pos = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 80009aa:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80009ae:	6013      	str	r3, [r2, #0]
  int data = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 80009b6:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80009ba:	6013      	str	r3, [r2, #0]
  if (file_number_location == 0xFF){
 80009bc:	4ba0      	ldr	r3, [pc, #640]	@ (8000c40 <main+0x2bc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2bff      	cmp	r3, #255	@ 0xff
 80009c2:	d10f      	bne.n	80009e4 <main+0x60>
	  char buffer[5];
	  sprintf(buffer, "%d", file_number);
 80009c4:	4b9f      	ldr	r3, [pc, #636]	@ (8000c44 <main+0x2c0>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009cc:	3b04      	subs	r3, #4
 80009ce:	499e      	ldr	r1, [pc, #632]	@ (8000c48 <main+0x2c4>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f006 fd43 	bl	800745c <siprintf>
	  Flash_WriteString(0x0800EC00, buffer);
 80009d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009da:	3b04      	subs	r3, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4898      	ldr	r0, [pc, #608]	@ (8000c40 <main+0x2bc>)
 80009e0:	f7ff ff50 	bl	8000884 <Flash_WriteString>
  }
  char buffer[5];
  Flash_ReadString(0x0800EC00, buffer, sizeof(buffer));
 80009e4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80009e8:	3b3c      	subs	r3, #60	@ 0x3c
 80009ea:	2205      	movs	r2, #5
 80009ec:	4619      	mov	r1, r3
 80009ee:	4894      	ldr	r0, [pc, #592]	@ (8000c40 <main+0x2bc>)
 80009f0:	f7ff ff88 	bl	8000904 <Flash_ReadString>
  file_number = atoi(buffer) + 1;
 80009f4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80009f8:	3b3c      	subs	r3, #60	@ 0x3c
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 fca6 	bl	800734c <atoi>
 8000a00:	4603      	mov	r3, r0
 8000a02:	3301      	adds	r3, #1
 8000a04:	4a8f      	ldr	r2, [pc, #572]	@ (8000c44 <main+0x2c0>)
 8000a06:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "%d", file_number);
 8000a08:	4b8e      	ldr	r3, [pc, #568]	@ (8000c44 <main+0x2c0>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a10:	3b3c      	subs	r3, #60	@ 0x3c
 8000a12:	498d      	ldr	r1, [pc, #564]	@ (8000c48 <main+0x2c4>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f006 fd21 	bl	800745c <siprintf>
  Flash_WriteString(0x0800EC00, buffer);
 8000a1a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a1e:	3b3c      	subs	r3, #60	@ 0x3c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4887      	ldr	r0, [pc, #540]	@ (8000c40 <main+0x2bc>)
 8000a24:	f7ff ff2e 	bl	8000884 <Flash_WriteString>
  FR_Status = f_mount(&FatFs, "", 1);
 8000a28:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4987      	ldr	r1, [pc, #540]	@ (8000c4c <main+0x2c8>)
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 f8f7 	bl	8005c24 <f_mount>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000a3c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000a40:	7013      	strb	r3, [r2, #0]
  while(1)
  {
		if (FR_Status != FR_OK)
 8000a42:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000a46:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f040 80eb 	bne.w	8000c28 <main+0x2a4>
		{
			break;
		}
		f_getfree("", &FreeClusters, &FS_Ptr);
 8000a52:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000a56:	3a30      	subs	r2, #48	@ 0x30
 8000a58:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a5c:	3b34      	subs	r3, #52	@ 0x34
 8000a5e:	4619      	mov	r1, r3
 8000a60:	487a      	ldr	r0, [pc, #488]	@ (8000c4c <main+0x2c8>)
 8000a62:	f006 fa60 	bl	8006f26 <f_getfree>
		FreeSpace = (uint32_t)(FreeClusters * FS_Ptr->csize * 0.5);
 8000a66:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a6a:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8000a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a72:	789b      	ldrb	r3, [r3, #2]
 8000a74:	461a      	mov	r2, r3
 8000a76:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a7a:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8000a7e:	fb02 f303 	mul.w	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fdd6 	bl	8000634 <__aeabi_ui2d>
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	4b70      	ldr	r3, [pc, #448]	@ (8000c50 <main+0x2cc>)
 8000a8e:	f7ff fb65 	bl	800015c <__aeabi_dmul>
 8000a92:	4602      	mov	r2, r0
 8000a94:	460b      	mov	r3, r1
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff fe45 	bl	8000728 <__aeabi_d2uiz>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000aa4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000aa8:	6013      	str	r3, [r2, #0]
		char buffer_data[30];
		data ++;
 8000aaa:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000aae:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000aba:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000abe:	6013      	str	r3, [r2, #0]
		sprintf(buffer_data, "new data is: %d \r\n", data);
 8000ac0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ac4:	3b24      	subs	r3, #36	@ 0x24
 8000ac6:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000aca:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000ace:	6812      	ldr	r2, [r2, #0]
 8000ad0:	4960      	ldr	r1, [pc, #384]	@ (8000c54 <main+0x2d0>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f006 fcc2 	bl	800745c <siprintf>
		char filename[20];
		if (FreeSpace > 0){
 8000ad8:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000adc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d03c      	beq.n	8000b60 <main+0x1dc>
			sprintf(filename, "data_%d.txt", file_number);
 8000ae6:	4b57      	ldr	r3, [pc, #348]	@ (8000c44 <main+0x2c0>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aee:	3b38      	subs	r3, #56	@ 0x38
 8000af0:	4959      	ldr	r1, [pc, #356]	@ (8000c58 <main+0x2d4>)
 8000af2:	4618      	mov	r0, r3
 8000af4:	f006 fcb2 	bl	800745c <siprintf>
			FR_Status = f_open(&Fil,filename, FA_WRITE | FA_READ | FA_OPEN_ALWAYS);
 8000af8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000afc:	3938      	subs	r1, #56	@ 0x38
 8000afe:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b02:	3b2c      	subs	r3, #44	@ 0x2c
 8000b04:	2213      	movs	r2, #19
 8000b06:	4618      	mov	r0, r3
 8000b08:	f005 f8d6 	bl	8005cb8 <f_open>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000b12:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000b16:	7013      	strb	r3, [r2, #0]
			if(FR_Status != FR_OK)
 8000b18:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000b1c:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8082 	bne.w	8000c2c <main+0x2a8>
			{
			  break;
			}
			//Write Data To The Text File
			f_lseek(&Fil, Fil.fsize);
 8000b28:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000b2c:	f8d3 2fa0 	ldr.w	r2, [r3, #4000]	@ 0xfa0
 8000b30:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b34:	3b2c      	subs	r3, #44	@ 0x2c
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 ff03 	bl	8006944 <f_lseek>
			f_puts(buffer_data, &Fil);
 8000b3e:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000b42:	3a2c      	subs	r2, #44	@ 0x2c
 8000b44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b48:	3b24      	subs	r3, #36	@ 0x24
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 fb02 	bl	8007156 <f_puts>
			// Close The File
			f_close(&Fil);
 8000b52:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b56:	3b2c      	subs	r3, #44	@ 0x2c
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f005 fec8 	bl	80068ee <f_close>
 8000b5e:	e052      	b.n	8000c06 <main+0x282>

		}
		else {
			file_number = 1;
 8000b60:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <main+0x2c0>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
			char buffer[5];
			sprintf(buffer, "%d", file_number);
 8000b66:	4b37      	ldr	r3, [pc, #220]	@ (8000c44 <main+0x2c0>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4936      	ldr	r1, [pc, #216]	@ (8000c48 <main+0x2c4>)
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f006 fc74 	bl	800745c <siprintf>
			Flash_WriteString(0x0800EC00, buffer);
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4831      	ldr	r0, [pc, #196]	@ (8000c40 <main+0x2bc>)
 8000b7a:	f7ff fe83 	bl	8000884 <Flash_WriteString>
			sprintf(filename, "data_%d.txt", file_number);
 8000b7e:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <main+0x2c0>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b86:	3b38      	subs	r3, #56	@ 0x38
 8000b88:	4933      	ldr	r1, [pc, #204]	@ (8000c58 <main+0x2d4>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f006 fc66 	bl	800745c <siprintf>
			FR_Status = f_open(&Fil,filename, FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8000b90:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000b94:	3938      	subs	r1, #56	@ 0x38
 8000b96:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b9a:	3b2c      	subs	r3, #44	@ 0x2c
 8000b9c:	220b      	movs	r2, #11
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f005 f88a 	bl	8005cb8 <f_open>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000baa:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8000bae:	7013      	strb	r3, [r2, #0]
			if(FR_Status != FR_OK)
 8000bb0:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000bb4:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d138      	bne.n	8000c30 <main+0x2ac>
			{
			  break;
			}
			f_lseek(&Fil, pos);
 8000bbe:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000bc2:	3b2c      	subs	r3, #44	@ 0x2c
 8000bc4:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000bc8:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000bcc:	6811      	ldr	r1, [r2, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f005 feb8 	bl	8006944 <f_lseek>
			//Write Data To The Text File [ Using f_puts() Function ]
			f_puts(buffer_data, &Fil);
 8000bd4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8000bd8:	3a2c      	subs	r2, #44	@ 0x2c
 8000bda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bde:	3b24      	subs	r3, #36	@ 0x24
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f006 fab7 	bl	8007156 <f_puts>
			pos = f_tell(&Fil);
 8000be8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000bec:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	@ 0xf9c
 8000bf0:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000bf4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000bf8:	6013      	str	r3, [r2, #0]
			// Close The File
			f_close(&Fil);
 8000bfa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000bfe:	3b2c      	subs	r3, #44	@ 0x2c
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fe74 	bl	80068ee <f_close>
		}
		if (data>=10000) data = 0;
 8000c06:	f507 5302 	add.w	r3, r7, #8320	@ 0x2080
 8000c0a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c14:	4293      	cmp	r3, r2
 8000c16:	f77f af14 	ble.w	8000a42 <main+0xbe>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f507 5202 	add.w	r2, r7, #8320	@ 0x2080
 8000c20:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000c24:	6013      	str	r3, [r2, #0]
  {
 8000c26:	e70c      	b.n	8000a42 <main+0xbe>
			break;
 8000c28:	bf00      	nop
 8000c2a:	e002      	b.n	8000c32 <main+0x2ae>
			  break;
 8000c2c:	bf00      	nop
 8000c2e:	e000      	b.n	8000c32 <main+0x2ae>
			  break;
 8000c30:	bf00      	nop
 8000c32:	2300      	movs	r3, #0
  }
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	0800ec00 	.word	0x0800ec00
 8000c44:	20000130 	.word	0x20000130
 8000c48:	08007dd4 	.word	0x08007dd4
 8000c4c:	08007dd8 	.word	0x08007dd8
 8000c50:	3fe00000 	.word	0x3fe00000
 8000c54:	08007ddc 	.word	0x08007ddc
 8000c58:	08007df0 	.word	0x08007df0

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b090      	sub	sp, #64	@ 0x40
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	2228      	movs	r2, #40	@ 0x28
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 fc18 	bl	80074a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c86:	2310      	movs	r3, #16
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fd22 	bl	80016dc <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c9e:	f000 f8c5 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 ff90 	bl	8001be0 <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cc6:	f000 f8b1 	bl	8000e2c <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3740      	adds	r7, #64	@ 0x40
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <MX_SPI2_Init+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d08:	2210      	movs	r2, #16
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_SPI2_Init+0x64>)
 8000d26:	f001 f8e9 	bl	8001efc <HAL_SPI_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d30:	f000 f87c 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000090 	.word	0x20000090
 8000d3c:	40003800 	.word	0x40003800

08000d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	@ (8000d90 <MX_USART1_UART_Init+0x50>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_USART1_UART_Init+0x4c>)
 8000d78:	f001 fcde 	bl	8002738 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d82:	f000 f853 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000e8 	.word	0x200000e8
 8000d90:	40013800 	.word	0x40013800

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_GPIO_Init+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df6:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <MX_GPIO_Init+0x94>)
 8000df8:	f000 fc58 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	4619      	mov	r1, r3
 8000e14:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_GPIO_Init+0x94>)
 8000e16:	f000 fac5 	bl	80013a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d131      	bne.n	8000f20 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <HAL_SPI_MspInit+0x90>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f2c <HAL_SPI_MspInit+0x90>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec6:	61d3      	str	r3, [r2, #28]
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_SPI_MspInit+0x90>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <HAL_SPI_MspInit+0x90>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <HAL_SPI_MspInit+0x90>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_SPI_MspInit+0x90>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000eec:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <HAL_SPI_MspInit+0x94>)
 8000f02:	f000 fa4f 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <HAL_SPI_MspInit+0x94>)
 8000f1c:	f000 fa42 	bl	80013a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40003800 	.word	0x40003800
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010c00 	.word	0x40010c00

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d131      	bne.n	8000fb8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a14      	ldr	r2, [pc, #80]	@ (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_UART_MspInit+0x90>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <HAL_UART_MspInit+0x94>)
 8000f9a:	f000 fa03 	bl	80013a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <HAL_UART_MspInit+0x94>)
 8000fb4:	f000 f9f6 	bl	80013a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010800 	.word	0x40010800

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <SysTick_Handler+0x34>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <SysTick_Handler+0x18>
	Timer1--;
 8001024:	4b09      	ldr	r3, [pc, #36]	@ (800104c <SysTick_Handler+0x34>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <SysTick_Handler+0x34>)
 800102e:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 8001030:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <SysTick_Handler+0x38>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <SysTick_Handler+0x2c>
	Timer2--;
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Handler+0x38>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	3b01      	subs	r3, #1
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <SysTick_Handler+0x38>)
 8001042:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f8ae 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000144 	.word	0x20000144
 8001050:	20000146 	.word	0x20000146

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f006 fa14 	bl	80074b0 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20005000 	.word	0x20005000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20000134 	.word	0x20000134
 80010bc:	200004c0 	.word	0x200004c0

080010c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010cc:	f7ff fff8 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d0:	480b      	ldr	r0, [pc, #44]	@ (8001100 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010d2:	490c      	ldr	r1, [pc, #48]	@ (8001104 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001108 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a09      	ldr	r2, [pc, #36]	@ (800110c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010e8:	4c09      	ldr	r4, [pc, #36]	@ (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f6:	f006 f9e1 	bl	80074bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fa:	f7ff fc43 	bl	8000984 <main>
  bx lr
 80010fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001108:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 800110c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001110:	200004c0 	.word	0x200004c0

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>
	...

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f907 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	200f      	movs	r0, #15
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe80 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f911 	bl	800138a <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f8e7 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a03      	ldr	r2, [pc, #12]	@ (80011c4 <HAL_IncTick+0x20>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000138 	.word	0x20000138

080011c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	@ (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000138 	.word	0x20000138

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff90 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff49 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff5e 	bl	8001224 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff90 	bl	8001294 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5f 	bl	8001240 <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffb0 	bl	80012f8 <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b08b      	sub	sp, #44	@ 0x2c
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e169      	b.n	800168c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013b8:	2201      	movs	r2, #1
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 8158 	bne.w	8001686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a9a      	ldr	r2, [pc, #616]	@ (8001644 <HAL_GPIO_Init+0x2a0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d05e      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013e0:	4a98      	ldr	r2, [pc, #608]	@ (8001644 <HAL_GPIO_Init+0x2a0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d875      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013e6:	4a98      	ldr	r2, [pc, #608]	@ (8001648 <HAL_GPIO_Init+0x2a4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d058      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013ec:	4a96      	ldr	r2, [pc, #600]	@ (8001648 <HAL_GPIO_Init+0x2a4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d86f      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013f2:	4a96      	ldr	r2, [pc, #600]	@ (800164c <HAL_GPIO_Init+0x2a8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d052      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013f8:	4a94      	ldr	r2, [pc, #592]	@ (800164c <HAL_GPIO_Init+0x2a8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d869      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013fe:	4a94      	ldr	r2, [pc, #592]	@ (8001650 <HAL_GPIO_Init+0x2ac>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d04c      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 8001404:	4a92      	ldr	r2, [pc, #584]	@ (8001650 <HAL_GPIO_Init+0x2ac>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d863      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 800140a:	4a92      	ldr	r2, [pc, #584]	@ (8001654 <HAL_GPIO_Init+0x2b0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d046      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 8001410:	4a90      	ldr	r2, [pc, #576]	@ (8001654 <HAL_GPIO_Init+0x2b0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d85d      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 8001416:	2b12      	cmp	r3, #18
 8001418:	d82a      	bhi.n	8001470 <HAL_GPIO_Init+0xcc>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d859      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 800141e:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <HAL_GPIO_Init+0x80>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	0800149f 	.word	0x0800149f
 8001428:	08001479 	.word	0x08001479
 800142c:	0800148b 	.word	0x0800148b
 8001430:	080014cd 	.word	0x080014cd
 8001434:	080014d3 	.word	0x080014d3
 8001438:	080014d3 	.word	0x080014d3
 800143c:	080014d3 	.word	0x080014d3
 8001440:	080014d3 	.word	0x080014d3
 8001444:	080014d3 	.word	0x080014d3
 8001448:	080014d3 	.word	0x080014d3
 800144c:	080014d3 	.word	0x080014d3
 8001450:	080014d3 	.word	0x080014d3
 8001454:	080014d3 	.word	0x080014d3
 8001458:	080014d3 	.word	0x080014d3
 800145c:	080014d3 	.word	0x080014d3
 8001460:	080014d3 	.word	0x080014d3
 8001464:	080014d3 	.word	0x080014d3
 8001468:	08001481 	.word	0x08001481
 800146c:	08001495 	.word	0x08001495
 8001470:	4a79      	ldr	r2, [pc, #484]	@ (8001658 <HAL_GPIO_Init+0x2b4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001476:	e02c      	b.n	80014d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	623b      	str	r3, [r7, #32]
          break;
 800147e:	e029      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	3304      	adds	r3, #4
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e024      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	3308      	adds	r3, #8
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e01f      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	330c      	adds	r3, #12
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e01a      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014a6:	2304      	movs	r3, #4
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e013      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	611a      	str	r2, [r3, #16]
          break;
 80014be:	e009      	b.n	80014d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c0:	2308      	movs	r3, #8
 80014c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	615a      	str	r2, [r3, #20]
          break;
 80014ca:	e003      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          break;
 80014d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2bff      	cmp	r3, #255	@ 0xff
 80014d8:	d801      	bhi.n	80014de <HAL_GPIO_Init+0x13a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_Init+0x13e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	@ 0xff
 80014e8:	d802      	bhi.n	80014f0 <HAL_GPIO_Init+0x14c>
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0x152>
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	3b08      	subs	r3, #8
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	210f      	movs	r1, #15
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	6a39      	ldr	r1, [r7, #32]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 80b1 	beq.w	8001686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001524:	4b4d      	ldr	r3, [pc, #308]	@ (800165c <HAL_GPIO_Init+0x2b8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a4c      	ldr	r2, [pc, #304]	@ (800165c <HAL_GPIO_Init+0x2b8>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <HAL_GPIO_Init+0x2b8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800153c:	4a48      	ldr	r2, [pc, #288]	@ (8001660 <HAL_GPIO_Init+0x2bc>)
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a40      	ldr	r2, [pc, #256]	@ (8001664 <HAL_GPIO_Init+0x2c0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d013      	beq.n	8001590 <HAL_GPIO_Init+0x1ec>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3f      	ldr	r2, [pc, #252]	@ (8001668 <HAL_GPIO_Init+0x2c4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00d      	beq.n	800158c <HAL_GPIO_Init+0x1e8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3e      	ldr	r2, [pc, #248]	@ (800166c <HAL_GPIO_Init+0x2c8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d007      	beq.n	8001588 <HAL_GPIO_Init+0x1e4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3d      	ldr	r2, [pc, #244]	@ (8001670 <HAL_GPIO_Init+0x2cc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_GPIO_Init+0x1e0>
 8001580:	2303      	movs	r3, #3
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001584:	2304      	movs	r3, #4
 8001586:	e004      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001590:	2300      	movs	r3, #0
 8001592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	4093      	lsls	r3, r2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a2:	492f      	ldr	r1, [pc, #188]	@ (8001660 <HAL_GPIO_Init+0x2bc>)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	492c      	ldr	r1, [pc, #176]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4928      	ldr	r1, [pc, #160]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4922      	ldr	r1, [pc, #136]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	491e      	ldr	r1, [pc, #120]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4918      	ldr	r1, [pc, #96]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	4914      	ldr	r1, [pc, #80]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d021      	beq.n	8001678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	490e      	ldr	r1, [pc, #56]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e021      	b.n	8001686 <HAL_GPIO_Init+0x2e2>
 8001642:	bf00      	nop
 8001644:	10320000 	.word	0x10320000
 8001648:	10310000 	.word	0x10310000
 800164c:	10220000 	.word	0x10220000
 8001650:	10210000 	.word	0x10210000
 8001654:	10120000 	.word	0x10120000
 8001658:	10110000 	.word	0x10110000
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40011000 	.word	0x40011000
 8001670:	40011400 	.word	0x40011400
 8001674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001678:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <HAL_GPIO_Init+0x304>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	43db      	mvns	r3, r3
 8001680:	4909      	ldr	r1, [pc, #36]	@ (80016a8 <HAL_GPIO_Init+0x304>)
 8001682:	4013      	ands	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f ae8e 	bne.w	80013b8 <HAL_GPIO_Init+0x14>
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	372c      	adds	r7, #44	@ 0x2c
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e272      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8087 	beq.w	800180a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016fc:	4b92      	ldr	r3, [pc, #584]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b04      	cmp	r3, #4
 8001706:	d00c      	beq.n	8001722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001708:	4b8f      	ldr	r3, [pc, #572]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d112      	bne.n	800173a <HAL_RCC_OscConfig+0x5e>
 8001714:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001720:	d10b      	bne.n	800173a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d06c      	beq.n	8001808 <HAL_RCC_OscConfig+0x12c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d168      	bne.n	8001808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e24c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x76>
 8001744:	4b80      	ldr	r3, [pc, #512]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7f      	ldr	r2, [pc, #508]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800174a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e02e      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x98>
 800175a:	4b7b      	ldr	r3, [pc, #492]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7a      	ldr	r2, [pc, #488]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b78      	ldr	r3, [pc, #480]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a77      	ldr	r2, [pc, #476]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0xbc>
 800177e:	4b72      	ldr	r3, [pc, #456]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a71      	ldr	r2, [pc, #452]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b6f      	ldr	r3, [pc, #444]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6e      	ldr	r2, [pc, #440]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xd4>
 8001798:	4b6b      	ldr	r3, [pc, #428]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a6a      	ldr	r2, [pc, #424]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b68      	ldr	r3, [pc, #416]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a67      	ldr	r2, [pc, #412]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fd06 	bl	80011c8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fd02 	bl	80011c8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e200      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xe4>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcf2 	bl	80011c8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fcee 	bl	80011c8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	@ 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1ec      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x10c>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001816:	4b4c      	ldr	r3, [pc, #304]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001822:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x18c>
 800182e:	4b46      	ldr	r3, [pc, #280]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	4b43      	ldr	r3, [pc, #268]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x176>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1c0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4939      	ldr	r1, [pc, #228]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e03a      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	4b36      	ldr	r3, [pc, #216]	@ (800194c <HAL_RCC_OscConfig+0x270>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fca7 	bl	80011c8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fca3 	bl	80011c8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1a1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4927      	ldr	r1, [pc, #156]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b26      	ldr	r3, [pc, #152]	@ (800194c <HAL_RCC_OscConfig+0x270>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc86 	bl	80011c8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc82 	bl	80011c8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e180      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d03a      	beq.n	8001960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_RCC_OscConfig+0x274>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fc66 	bl	80011c8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fc62 	bl	80011c8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e160      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <HAL_RCC_OscConfig+0x26c>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191e:	2001      	movs	r0, #1
 8001920:	f000 face 	bl	8001ec0 <RCC_Delay>
 8001924:	e01c      	b.n	8001960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_RCC_OscConfig+0x274>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fc4c 	bl	80011c8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001932:	e00f      	b.n	8001954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff fc48 	bl	80011c8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d908      	bls.n	8001954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e146      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	42420000 	.word	0x42420000
 8001950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b92      	ldr	r3, [pc, #584]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e9      	bne.n	8001934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80a6 	beq.w	8001aba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b8b      	ldr	r3, [pc, #556]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10d      	bne.n	800199a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b88      	ldr	r3, [pc, #544]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a87      	ldr	r2, [pc, #540]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b85      	ldr	r3, [pc, #532]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b82      	ldr	r3, [pc, #520]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d118      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b2:	f7ff fc09 	bl	80011c8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ba:	f7ff fc05 	bl	80011c8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b64      	cmp	r3, #100	@ 0x64
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e103      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	4b75      	ldr	r3, [pc, #468]	@ (8001ba4 <HAL_RCC_OscConfig+0x4c8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x312>
 80019e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e02d      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x334>
 80019f6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a69      	ldr	r2, [pc, #420]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b67      	ldr	r3, [pc, #412]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a66      	ldr	r2, [pc, #408]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	e01c      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d10c      	bne.n	8001a32 <HAL_RCC_OscConfig+0x356>
 8001a18:	4b61      	ldr	r3, [pc, #388]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	e00b      	b.n	8001a4a <HAL_RCC_OscConfig+0x36e>
 8001a32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4a5a      	ldr	r2, [pc, #360]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6213      	str	r3, [r2, #32]
 8001a3e:	4b58      	ldr	r3, [pc, #352]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a57      	ldr	r2, [pc, #348]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0304 	bic.w	r3, r3, #4
 8001a48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d015      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fbb9 	bl	80011c8 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a58:	e00a      	b.n	8001a70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7ff fbb5 	bl	80011c8 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e0b1      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ee      	beq.n	8001a5a <HAL_RCC_OscConfig+0x37e>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fba3 	bl	80011c8 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff fb9f 	bl	80011c8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e09b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ee      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8087 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b36      	ldr	r3, [pc, #216]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d061      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d146      	bne.n	8001b66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad8:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff fb73 	bl	80011c8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff fb6f 	bl	80011c8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e06d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0c:	d108      	bne.n	8001b20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4921      	ldr	r1, [pc, #132]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a19      	ldr	r1, [r3, #32]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	430b      	orrs	r3, r1
 8001b32:	491b      	ldr	r1, [pc, #108]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb43 	bl	80011c8 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fb3f 	bl	80011c8 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e03d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46a>
 8001b64:	e035      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_RCC_OscConfig+0x4cc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fb2c 	bl	80011c8 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fb28 	bl	80011c8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e026      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x498>
 8001b92:	e01e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e019      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x500>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0d0      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b67      	ldr	r3, [pc, #412]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	4965      	ldr	r1, [pc, #404]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b63      	ldr	r3, [pc, #396]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b8      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c3c:	4b59      	ldr	r3, [pc, #356]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c54:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a52      	ldr	r2, [pc, #328]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b50      	ldr	r3, [pc, #320]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	494d      	ldr	r1, [pc, #308]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d040      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e073      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06b      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4936      	ldr	r1, [pc, #216]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff fa7a 	bl	80011c8 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff fa76 	bl	80011c8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e053      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d210      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0207 	bic.w	r2, r3, #7
 8001d16:	4922      	ldr	r1, [pc, #136]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e032      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4916      	ldr	r1, [pc, #88]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	490e      	ldr	r1, [pc, #56]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d6e:	f000 f821 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	490a      	ldr	r1, [pc, #40]	@ (8001da8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a09      	ldr	r2, [pc, #36]	@ (8001dac <HAL_RCC_ClockConfig+0x1cc>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f9d8 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08007e44 	.word	0x08007e44
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x36>
 8001de2:	e027      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	613b      	str	r3, [r7, #16]
      break;
 8001de8:	e027      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a17      	ldr	r2, [pc, #92]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e02:	4b11      	ldr	r3, [pc, #68]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0c5b      	lsrs	r3, r3, #17
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e16:	fb03 f202 	mul.w	r2, r3, r2
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	e004      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0c      	ldr	r2, [pc, #48]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e28:	fb02 f303 	mul.w	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	613b      	str	r3, [r7, #16]
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e36:	613b      	str	r3, [r7, #16]
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	693b      	ldr	r3, [r7, #16]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	007a1200 	.word	0x007a1200
 8001e50:	08007e5c 	.word	0x08007e5c
 8001e54:	08007e6c 	.word	0x08007e6c
 8001e58:	003d0900 	.word	0x003d0900

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e60:	4b02      	ldr	r3, [pc, #8]	@ (8001e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff2 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08007e54 	.word	0x08007e54

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0adb      	lsrs	r3, r3, #11
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	@ (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08007e54 	.word	0x08007e54

08001ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <RCC_Delay+0x34>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <RCC_Delay+0x38>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001edc:	bf00      	nop
  }
  while (Delay --);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <RCC_Delay+0x1c>
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e076      	b.n	8001ffc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f1e:	d009      	beq.n	8001f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
 8001f26:	e005      	b.n	8001f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe ffa4 	bl	8000e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb8:	ea42 0103 	orr.w	r1, r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	0c1a      	lsrs	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f002 0204 	and.w	r2, r2, #4
 8001fda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_SPI_Transmit+0x22>
 8002022:	2302      	movs	r3, #2
 8002024:	e12d      	b.n	8002282 <HAL_SPI_Transmit+0x27e>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800202e:	f7ff f8cb 	bl	80011c8 <HAL_GetTick>
 8002032:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002044:	2302      	movs	r3, #2
 8002046:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002048:	e116      	b.n	8002278 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_SPI_Transmit+0x52>
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	77fb      	strb	r3, [r7, #31]
    goto error;
 800205a:	e10d      	b.n	8002278 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2203      	movs	r2, #3
 8002060:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	88fa      	ldrh	r2, [r7, #6]
 8002074:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	88fa      	ldrh	r2, [r7, #6]
 800207a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020a2:	d10f      	bne.n	80020c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ce:	2b40      	cmp	r3, #64	@ 0x40
 80020d0:	d007      	beq.n	80020e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ea:	d14f      	bne.n	800218c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_SPI_Transmit+0xf6>
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d142      	bne.n	8002180 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	1c9a      	adds	r2, r3, #2
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800211e:	e02f      	b.n	8002180 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d112      	bne.n	8002154 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	881a      	ldrh	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	1c9a      	adds	r2, r3, #2
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002152:	e015      	b.n	8002180 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002154:	f7ff f838 	bl	80011c8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d803      	bhi.n	800216c <HAL_SPI_Transmit+0x168>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d102      	bne.n	8002172 <HAL_SPI_Transmit+0x16e>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800217e:	e07b      	b.n	8002278 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ca      	bne.n	8002120 <HAL_SPI_Transmit+0x11c>
 800218a:	e050      	b.n	800222e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_SPI_Transmit+0x196>
 8002194:	8afb      	ldrh	r3, [r7, #22]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d144      	bne.n	8002224 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021c0:	e030      	b.n	8002224 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d113      	bne.n	80021f8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021f6:	e015      	b.n	8002224 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021f8:	f7fe ffe6 	bl	80011c8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d803      	bhi.n	8002210 <HAL_SPI_Transmit+0x20c>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d102      	bne.n	8002216 <HAL_SPI_Transmit+0x212>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002222:	e029      	b.n	8002278 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1c9      	bne.n	80021c2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa62 	bl	80026fc <SPI_EndRxTxTransaction>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	77fb      	strb	r3, [r7, #31]
 800226e:	e003      	b.n	8002278 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002280:	7ffb      	ldrb	r3, [r7, #31]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b08c      	sub	sp, #48	@ 0x30
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002298:	2301      	movs	r3, #1
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x26>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e198      	b.n	80025e2 <HAL_SPI_TransmitReceive+0x358>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b8:	f7fe ff86 	bl	80011c8 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d00f      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x70>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022e0:	d107      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d103      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x68>
 80022ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80022f8:	e16d      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_SPI_TransmitReceive+0x82>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_SPI_TransmitReceive+0x82>
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d103      	bne.n	8002314 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002312:	e160      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b04      	cmp	r3, #4
 800231e:	d003      	beq.n	8002328 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2205      	movs	r2, #5
 8002324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	887a      	ldrh	r2, [r7, #2]
 800234a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002368:	2b40      	cmp	r3, #64	@ 0x40
 800236a:	d007      	beq.n	800237c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800237a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002384:	d17c      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_SPI_TransmitReceive+0x10a>
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d16a      	bne.n	800246a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	1c9a      	adds	r2, r3, #2
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b8:	e057      	b.n	800246a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d11b      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x176>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_SPI_TransmitReceive+0x176>
 80023d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d113      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	881a      	ldrh	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	1c9a      	adds	r2, r3, #2
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d119      	bne.n	8002442 <HAL_SPI_TransmitReceive+0x1b8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d014      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002422:	b292      	uxth	r2, r2
 8002424:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242a:	1c9a      	adds	r2, r3, #2
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800243e:	2301      	movs	r3, #1
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002442:	f7fe fec1 	bl	80011c8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800244e:	429a      	cmp	r2, r3
 8002450:	d80b      	bhi.n	800246a <HAL_SPI_TransmitReceive+0x1e0>
 8002452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d007      	beq.n	800246a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002468:	e0b5      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1a2      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x130>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d19d      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x130>
 800247e:	e080      	b.n	8002582 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_SPI_TransmitReceive+0x204>
 8002488:	8b7b      	ldrh	r3, [r7, #26]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d16f      	bne.n	800256e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b4:	e05b      	b.n	800256e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d11c      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x274>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d017      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x274>
 80024ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d114      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d119      	bne.n	8002540 <HAL_SPI_TransmitReceive+0x2b6>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d014      	beq.n	8002540 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800253c:	2301      	movs	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002540:	f7fe fe42 	bl	80011c8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800254c:	429a      	cmp	r2, r3
 800254e:	d803      	bhi.n	8002558 <HAL_SPI_TransmitReceive+0x2ce>
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d102      	bne.n	800255e <HAL_SPI_TransmitReceive+0x2d4>
 8002558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800256c:	e033      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d19e      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x22c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d199      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002584:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8b8 	bl	80026fc <SPI_EndRxTxTransaction>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800259e:	e01a      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025cc:	e003      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3730      	adds	r7, #48	@ 0x30
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025fc:	f7fe fde4 	bl	80011c8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	4413      	add	r3, r2
 800260a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800260c:	f7fe fddc 	bl	80011c8 <HAL_GetTick>
 8002610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002612:	4b39      	ldr	r3, [pc, #228]	@ (80026f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	015b      	lsls	r3, r3, #5
 8002618:	0d1b      	lsrs	r3, r3, #20
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002622:	e054      	b.n	80026ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d050      	beq.n	80026ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800262c:	f7fe fdcc 	bl	80011c8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	429a      	cmp	r2, r3
 800263a:	d902      	bls.n	8002642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d13d      	bne.n	80026be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800265a:	d111      	bne.n	8002680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002664:	d004      	beq.n	8002670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800266e:	d107      	bne.n	8002680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800267e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002688:	d10f      	bne.n	80026aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e017      	b.n	80026ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	bf0c      	ite	eq
 80026de:	2301      	moveq	r3, #1
 80026e0:	2300      	movne	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d19b      	bne.n	8002624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	2180      	movs	r1, #128	@ 0x80
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f7ff ff6a 	bl	80025ec <SPI_WaitFlagStateUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e000      	b.n	8002730 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e042      	b.n	80027d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fbe8 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f82b 	bl	80027d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002812:	f023 030c 	bic.w	r3, r3, #12
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	430b      	orrs	r3, r1
 800281e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2c      	ldr	r2, [pc, #176]	@ (80028ec <UART_SetConfig+0x114>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d103      	bne.n	8002848 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002840:	f7ff fb2a 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	e002      	b.n	800284e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002848:	f7ff fb12 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 800284c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009a      	lsls	r2, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	4a22      	ldr	r2, [pc, #136]	@ (80028f0 <UART_SetConfig+0x118>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	0119      	lsls	r1, r3, #4
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009a      	lsls	r2, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fbb2 f2f3 	udiv	r2, r2, r3
 8002884:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <UART_SetConfig+0x118>)
 8002886:	fba3 0302 	umull	r0, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2064      	movs	r0, #100	@ 0x64
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	@ 0x32
 8002898:	4a15      	ldr	r2, [pc, #84]	@ (80028f0 <UART_SetConfig+0x118>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a4:	4419      	add	r1, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <UART_SetConfig+0x118>)
 80028be:	fba3 0302 	umull	r0, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2064      	movs	r0, #100	@ 0x64
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	3332      	adds	r3, #50	@ 0x32
 80028d0:	4a07      	ldr	r2, [pc, #28]	@ (80028f0 <UART_SetConfig+0x118>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	440a      	add	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40013800 	.word	0x40013800
 80028f0:	51eb851f 	.word	0x51eb851f

080028f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80028f8:	4904      	ldr	r1, [pc, #16]	@ (800290c <MX_FATFS_Init+0x18>)
 80028fa:	4805      	ldr	r0, [pc, #20]	@ (8002910 <MX_FATFS_Init+0x1c>)
 80028fc:	f004 fcae 	bl	800725c <FATFS_LinkDriver>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <MX_FATFS_Init+0x20>)
 8002906:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000140 	.word	0x20000140
 8002910:	2000000c 	.word	0x2000000c
 8002914:	2000013c 	.word	0x2000013c

08002918 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800291c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f9fa 	bl	8002d2c <SD_disk_initialize>
 8002938:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fad2 	bl	8002ef8 <SD_disk_status>
 8002954:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4603      	mov	r3, r0
 800296c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800296e:	7bf8      	ldrb	r0, [r7, #15]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	f000 fad3 	bl	8002f20 <SD_disk_read>
 800297a:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002994:	7bf8      	ldrb	r0, [r7, #15]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	f000 fb2a 	bl	8002ff4 <SD_disk_write>
 80029a0:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	603a      	str	r2, [r7, #0]
 80029b4:	71fb      	strb	r3, [r7, #7]
 80029b6:	460b      	mov	r3, r1
 80029b8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80029ba:	79b9      	ldrb	r1, [r7, #6]
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fb9b 	bl	80030fc <SD_disk_ioctl>
 80029c6:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029da:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <SELECT+0x14>)
 80029dc:	f7fe fe66 	bl	80016ac <HAL_GPIO_WritePin>
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40010c00 	.word	0x40010c00

080029e8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80029ec:	2201      	movs	r2, #1
 80029ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029f2:	4802      	ldr	r0, [pc, #8]	@ (80029fc <DESELECT+0x14>)
 80029f4:	f7fe fe5a 	bl	80016ac <HAL_GPIO_WritePin>
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40010c00 	.word	0x40010c00

08002a00 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002a0a:	bf00      	nop
 8002a0c:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <SPI_TxByte+0x30>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d1f8      	bne.n	8002a0c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002a1a:	1df9      	adds	r1, r7, #7
 8002a1c:	2364      	movs	r3, #100	@ 0x64
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4803      	ldr	r0, [pc, #12]	@ (8002a30 <SPI_TxByte+0x30>)
 8002a22:	f7ff faef 	bl	8002004 <HAL_SPI_Transmit>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000090 	.word	0x20000090

08002a34 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002a40:	bf00      	nop
 8002a42:	4b08      	ldr	r3, [pc, #32]	@ (8002a64 <SPI_TxBuffer+0x30>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d1f8      	bne.n	8002a42 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002a50:	887a      	ldrh	r2, [r7, #2]
 8002a52:	2364      	movs	r3, #100	@ 0x64
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <SPI_TxBuffer+0x30>)
 8002a58:	f7ff fad4 	bl	8002004 <HAL_SPI_Transmit>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000090 	.word	0x20000090

08002a68 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002a6e:	23ff      	movs	r3, #255	@ 0xff
 8002a70:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002a72:	bf00      	nop
 8002a74:	4b09      	ldr	r3, [pc, #36]	@ (8002a9c <SPI_RxByte+0x34>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d1f8      	bne.n	8002a74 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002a82:	1dba      	adds	r2, r7, #6
 8002a84:	1df9      	adds	r1, r7, #7
 8002a86:	2364      	movs	r3, #100	@ 0x64
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4803      	ldr	r0, [pc, #12]	@ (8002a9c <SPI_RxByte+0x34>)
 8002a8e:	f7ff fbfc 	bl	800228a <HAL_SPI_TransmitReceive>
  return data;
 8002a92:	79bb      	ldrb	r3, [r7, #6]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000090 	.word	0x20000090

08002aa0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002aa8:	f7ff ffde 	bl	8002a68 <SPI_RxByte>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	701a      	strb	r2, [r3, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <SD_ReadyWait+0x30>)
 8002ac4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ac8:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002aca:	f7ff ffcd 	bl	8002a68 <SPI_RxByte>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2bff      	cmp	r3, #255	@ 0xff
 8002ad6:	d003      	beq.n	8002ae0 <SD_ReadyWait+0x24>
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <SD_ReadyWait+0x30>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f4      	bne.n	8002aca <SD_ReadyWait+0xe>
  return res;
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000146 	.word	0x20000146

08002af0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002af6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8002afa:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8002afc:	f7ff ff74 	bl	80029e8 <DESELECT>
  for(int i = 0; i < 10; i++)
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e005      	b.n	8002b12 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002b06:	20ff      	movs	r0, #255	@ 0xff
 8002b08:	f7ff ff7a 	bl	8002a00 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	ddf6      	ble.n	8002b06 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8002b18:	f7ff ff5a 	bl	80029d0 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002b1c:	2340      	movs	r3, #64	@ 0x40
 8002b1e:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8002b30:	2395      	movs	r3, #149	@ 0x95
 8002b32:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8002b34:	463b      	mov	r3, r7
 8002b36:	2106      	movs	r1, #6
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff7b 	bl	8002a34 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002b3e:	e002      	b.n	8002b46 <SD_PowerOn+0x56>
  {
    cnt--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002b46:	f7ff ff8f 	bl	8002a68 <SPI_RxByte>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d002      	beq.n	8002b56 <SD_PowerOn+0x66>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f4      	bne.n	8002b40 <SD_PowerOn+0x50>
  }
  DESELECT();
 8002b56:	f7ff ff47 	bl	80029e8 <DESELECT>
  SPI_TxByte(0XFF);
 8002b5a:	20ff      	movs	r0, #255	@ 0xff
 8002b5c:	f7ff ff50 	bl	8002a00 <SPI_TxByte>
  PowerFlag = 1;
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <SD_PowerOn+0x80>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000149 	.word	0x20000149

08002b74 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <SD_PowerOff+0x14>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000149 	.word	0x20000149

08002b8c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002b90:	4b02      	ldr	r3, [pc, #8]	@ (8002b9c <SD_CheckPower+0x10>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	20000149 	.word	0x20000149

08002ba0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8002baa:	4b13      	ldr	r3, [pc, #76]	@ (8002bf8 <SD_RxDataBlock+0x58>)
 8002bac:	22c8      	movs	r2, #200	@ 0xc8
 8002bae:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8002bb0:	f7ff ff5a 	bl	8002a68 <SPI_RxByte>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2bff      	cmp	r3, #255	@ 0xff
 8002bbc:	d103      	bne.n	8002bc6 <SD_RxDataBlock+0x26>
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <SD_RxDataBlock+0x58>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f4      	bne.n	8002bb0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2bfe      	cmp	r3, #254	@ 0xfe
 8002bca:	d001      	beq.n	8002bd0 <SD_RxDataBlock+0x30>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e00f      	b.n	8002bf0 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff62 	bl	8002aa0 <SPI_RxBytePtr>
  } while(len--);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	1e5a      	subs	r2, r3, #1
 8002be0:	603a      	str	r2, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f4      	bne.n	8002bd0 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8002be6:	f7ff ff3f 	bl	8002a68 <SPI_RxByte>
  SPI_RxByte();
 8002bea:	f7ff ff3d 	bl	8002a68 <SPI_RxByte>
  return TRUE;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000144 	.word	0x20000144

08002bfc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002c0c:	f7ff ff56 	bl	8002abc <SD_ReadyWait>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2bff      	cmp	r3, #255	@ 0xff
 8002c14:	d001      	beq.n	8002c1a <SD_TxDataBlock+0x1e>
 8002c16:	2300      	movs	r3, #0
 8002c18:	e02f      	b.n	8002c7a <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff feef 	bl	8002a00 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	2bfd      	cmp	r3, #253	@ 0xfd
 8002c26:	d020      	beq.n	8002c6a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002c28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff01 	bl	8002a34 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8002c32:	f7ff ff19 	bl	8002a68 <SPI_RxByte>
    SPI_RxByte();
 8002c36:	f7ff ff17 	bl	8002a68 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8002c3a:	e00b      	b.n	8002c54 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8002c3c:	f7ff ff14 	bl	8002a68 <SPI_RxByte>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d006      	beq.n	8002c5c <SD_TxDataBlock+0x60>
      i++;
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	2b40      	cmp	r3, #64	@ 0x40
 8002c58:	d9f0      	bls.n	8002c3c <SD_TxDataBlock+0x40>
 8002c5a:	e000      	b.n	8002c5e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8002c5c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8002c5e:	bf00      	nop
 8002c60:	f7ff ff02 	bl	8002a68 <SPI_RxByte>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0fa      	beq.n	8002c60 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d101      	bne.n	8002c78 <SD_TxDataBlock+0x7c>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <SD_TxDataBlock+0x7e>

  return FALSE;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	6039      	str	r1, [r7, #0]
 8002c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002c8e:	f7ff ff15 	bl	8002abc <SD_ReadyWait>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2bff      	cmp	r3, #255	@ 0xff
 8002c96:	d001      	beq.n	8002c9c <SD_SendCmd+0x1a>
 8002c98:	23ff      	movs	r3, #255	@ 0xff
 8002c9a:	e042      	b.n	8002d22 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff feae 	bl	8002a00 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	0e1b      	lsrs	r3, r3, #24
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fea8 	bl	8002a00 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fea2 	bl	8002a00 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fe9c 	bl	8002a00 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fe97 	bl	8002a00 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d102      	bne.n	8002cde <SD_SendCmd+0x5c>
 8002cd8:	2395      	movs	r3, #149	@ 0x95
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	e007      	b.n	8002cee <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b48      	cmp	r3, #72	@ 0x48
 8002ce2:	d102      	bne.n	8002cea <SD_SendCmd+0x68>
 8002ce4:	2387      	movs	r3, #135	@ 0x87
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e001      	b.n	8002cee <SD_SendCmd+0x6c>
  else crc = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fe85 	bl	8002a00 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b4c      	cmp	r3, #76	@ 0x4c
 8002cfa:	d101      	bne.n	8002d00 <SD_SendCmd+0x7e>
 8002cfc:	f7ff feb4 	bl	8002a68 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8002d00:	230a      	movs	r3, #10
 8002d02:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8002d04:	f7ff feb0 	bl	8002a68 <SPI_RxByte>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002d0c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da05      	bge.n	8002d20 <SD_SendCmd+0x9e>
 8002d14:	7bbb      	ldrb	r3, [r7, #14]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	73bb      	strb	r3, [r7, #14]
 8002d1a:	7bbb      	ldrb	r3, [r7, #14]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f1      	bne.n	8002d04 <SD_SendCmd+0x82>

  return res;
 8002d20:	7b7b      	ldrb	r3, [r7, #13]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <SD_disk_initialize+0x14>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0d1      	b.n	8002ee4 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8002d40:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <SD_disk_initialize+0x1c0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <SD_disk_initialize+0x2a>
 8002d4e:	4b67      	ldr	r3, [pc, #412]	@ (8002eec <SD_disk_initialize+0x1c0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e0c6      	b.n	8002ee4 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8002d56:	f7ff fecb 	bl	8002af0 <SD_PowerOn>
  /* slave select */
  SELECT();
 8002d5a:	f7ff fe39 	bl	80029d0 <SELECT>
  /* check disk type */
  type = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8002d62:	2100      	movs	r1, #0
 8002d64:	2040      	movs	r0, #64	@ 0x40
 8002d66:	f7ff ff8c 	bl	8002c82 <SD_SendCmd>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 80a1 	bne.w	8002eb4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8002d72:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef0 <SD_disk_initialize+0x1c4>)
 8002d74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d78:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002d7a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002d7e:	2048      	movs	r0, #72	@ 0x48
 8002d80:	f7ff ff7f 	bl	8002c82 <SD_SendCmd>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d155      	bne.n	8002e36 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e00c      	b.n	8002daa <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8002d90:	7bfc      	ldrb	r4, [r7, #15]
 8002d92:	f7ff fe69 	bl	8002a68 <SPI_RxByte>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f104 0310 	add.w	r3, r4, #16
 8002d9e:	443b      	add	r3, r7
 8002da0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d9ef      	bls.n	8002d90 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002db0:	7abb      	ldrb	r3, [r7, #10]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d17e      	bne.n	8002eb4 <SD_disk_initialize+0x188>
 8002db6:	7afb      	ldrb	r3, [r7, #11]
 8002db8:	2baa      	cmp	r3, #170	@ 0xaa
 8002dba:	d17b      	bne.n	8002eb4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2077      	movs	r0, #119	@ 0x77
 8002dc0:	f7ff ff5f 	bl	8002c82 <SD_SendCmd>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d807      	bhi.n	8002dda <SD_disk_initialize+0xae>
 8002dca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002dce:	2069      	movs	r0, #105	@ 0x69
 8002dd0:	f7ff ff57 	bl	8002c82 <SD_SendCmd>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8002dda:	4b45      	ldr	r3, [pc, #276]	@ (8002ef0 <SD_disk_initialize+0x1c4>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ec      	bne.n	8002dbc <SD_disk_initialize+0x90>
 8002de2:	e000      	b.n	8002de6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002de4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002de6:	4b42      	ldr	r3, [pc, #264]	@ (8002ef0 <SD_disk_initialize+0x1c4>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d062      	beq.n	8002eb4 <SD_disk_initialize+0x188>
 8002dee:	2100      	movs	r1, #0
 8002df0:	207a      	movs	r0, #122	@ 0x7a
 8002df2:	f7ff ff46 	bl	8002c82 <SD_SendCmd>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d15b      	bne.n	8002eb4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e00c      	b.n	8002e1c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8002e02:	7bfc      	ldrb	r4, [r7, #15]
 8002e04:	f7ff fe30 	bl	8002a68 <SPI_RxByte>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f104 0310 	add.w	r3, r4, #16
 8002e10:	443b      	add	r3, r7
 8002e12:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d9ef      	bls.n	8002e02 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002e22:	7a3b      	ldrb	r3, [r7, #8]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <SD_disk_initialize+0x104>
 8002e2c:	230c      	movs	r3, #12
 8002e2e:	e000      	b.n	8002e32 <SD_disk_initialize+0x106>
 8002e30:	2304      	movs	r3, #4
 8002e32:	73bb      	strb	r3, [r7, #14]
 8002e34:	e03e      	b.n	8002eb4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002e36:	2100      	movs	r1, #0
 8002e38:	2077      	movs	r0, #119	@ 0x77
 8002e3a:	f7ff ff22 	bl	8002c82 <SD_SendCmd>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d808      	bhi.n	8002e56 <SD_disk_initialize+0x12a>
 8002e44:	2100      	movs	r1, #0
 8002e46:	2069      	movs	r0, #105	@ 0x69
 8002e48:	f7ff ff1b 	bl	8002c82 <SD_SendCmd>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d801      	bhi.n	8002e56 <SD_disk_initialize+0x12a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e000      	b.n	8002e58 <SD_disk_initialize+0x12c>
 8002e56:	2301      	movs	r3, #1
 8002e58:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d10e      	bne.n	8002e7e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002e60:	2100      	movs	r1, #0
 8002e62:	2077      	movs	r0, #119	@ 0x77
 8002e64:	f7ff ff0d 	bl	8002c82 <SD_SendCmd>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d80e      	bhi.n	8002e8c <SD_disk_initialize+0x160>
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2069      	movs	r0, #105	@ 0x69
 8002e72:	f7ff ff06 	bl	8002c82 <SD_SendCmd>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <SD_disk_initialize+0x160>
 8002e7c:	e00c      	b.n	8002e98 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2041      	movs	r0, #65	@ 0x41
 8002e82:	f7ff fefe 	bl	8002c82 <SD_SendCmd>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <SD_disk_initialize+0x1c4>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e2      	bne.n	8002e5a <SD_disk_initialize+0x12e>
 8002e94:	e000      	b.n	8002e98 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002e96:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002e98:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <SD_disk_initialize+0x1c4>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <SD_disk_initialize+0x184>
 8002ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ea4:	2050      	movs	r0, #80	@ 0x50
 8002ea6:	f7ff feec 	bl	8002c82 <SD_SendCmd>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <SD_disk_initialize+0x188>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef4 <SD_disk_initialize+0x1c8>)
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8002eba:	f7ff fd95 	bl	80029e8 <DESELECT>
  SPI_RxByte();
 8002ebe:	f7ff fdd3 	bl	8002a68 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8002ec2:	7bbb      	ldrb	r3, [r7, #14]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <SD_disk_initialize+0x1c0>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <SD_disk_initialize+0x1c0>)
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e001      	b.n	8002ede <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002eda:	f7ff fe4b 	bl	8002b74 <SD_PowerOff>
  }
  return Stat;
 8002ede:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <SD_disk_initialize+0x1c0>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}
 8002eec:	20000020 	.word	0x20000020
 8002ef0:	20000144 	.word	0x20000144
 8002ef4:	20000148 	.word	0x20000148

08002ef8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <SD_disk_status+0x14>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e002      	b.n	8002f12 <SD_disk_status+0x1a>
  return Stat;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <SD_disk_status+0x24>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	20000020 	.word	0x20000020

08002f20 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <SD_disk_read+0x1c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <SD_disk_read+0x20>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	e051      	b.n	8002fe4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002f40:	4b2a      	ldr	r3, [pc, #168]	@ (8002fec <SD_disk_read+0xcc>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <SD_disk_read+0x32>
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e048      	b.n	8002fe4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8002f52:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <SD_disk_read+0xd0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <SD_disk_read+0x44>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	025b      	lsls	r3, r3, #9
 8002f62:	607b      	str	r3, [r7, #4]

  SELECT();
 8002f64:	f7ff fd34 	bl	80029d0 <SELECT>

  if (count == 1)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d111      	bne.n	8002f92 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	2051      	movs	r0, #81	@ 0x51
 8002f72:	f7ff fe86 	bl	8002c82 <SD_SendCmd>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d129      	bne.n	8002fd0 <SD_disk_read+0xb0>
 8002f7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f80:	68b8      	ldr	r0, [r7, #8]
 8002f82:	f7ff fe0d 	bl	8002ba0 <SD_RxDataBlock>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <SD_disk_read+0xb0>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	e01e      	b.n	8002fd0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	2052      	movs	r0, #82	@ 0x52
 8002f96:	f7ff fe74 	bl	8002c82 <SD_SendCmd>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d117      	bne.n	8002fd0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8002fa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fa4:	68b8      	ldr	r0, [r7, #8]
 8002fa6:	f7ff fdfb 	bl	8002ba0 <SD_RxDataBlock>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <SD_disk_read+0xa6>
        buff += 512;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002fb6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ed      	bne.n	8002fa0 <SD_disk_read+0x80>
 8002fc4:	e000      	b.n	8002fc8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8002fc6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8002fc8:	2100      	movs	r1, #0
 8002fca:	204c      	movs	r0, #76	@ 0x4c
 8002fcc:	f7ff fe59 	bl	8002c82 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8002fd0:	f7ff fd0a 	bl	80029e8 <DESELECT>
  SPI_RxByte();
 8002fd4:	f7ff fd48 	bl	8002a68 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000020 	.word	0x20000020
 8002ff0:	20000148 	.word	0x20000148

08002ff4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <SD_disk_write+0x1c>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <SD_disk_write+0x20>
 8003010:	2304      	movs	r3, #4
 8003012:	e06b      	b.n	80030ec <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003014:	4b37      	ldr	r3, [pc, #220]	@ (80030f4 <SD_disk_write+0x100>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <SD_disk_write+0x32>
 8003022:	2303      	movs	r3, #3
 8003024:	e062      	b.n	80030ec <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003026:	4b33      	ldr	r3, [pc, #204]	@ (80030f4 <SD_disk_write+0x100>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <SD_disk_write+0x44>
 8003034:	2302      	movs	r3, #2
 8003036:	e059      	b.n	80030ec <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003038:	4b2f      	ldr	r3, [pc, #188]	@ (80030f8 <SD_disk_write+0x104>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <SD_disk_write+0x56>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	025b      	lsls	r3, r3, #9
 8003048:	607b      	str	r3, [r7, #4]

  SELECT();
 800304a:	f7ff fcc1 	bl	80029d0 <SELECT>

  if (count == 1)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d110      	bne.n	8003076 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	2058      	movs	r0, #88	@ 0x58
 8003058:	f7ff fe13 	bl	8002c82 <SD_SendCmd>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d13a      	bne.n	80030d8 <SD_disk_write+0xe4>
 8003062:	21fe      	movs	r1, #254	@ 0xfe
 8003064:	68b8      	ldr	r0, [r7, #8]
 8003066:	f7ff fdc9 	bl	8002bfc <SD_TxDataBlock>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d033      	beq.n	80030d8 <SD_disk_write+0xe4>
      count = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	e030      	b.n	80030d8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <SD_disk_write+0x104>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003082:	2100      	movs	r1, #0
 8003084:	2077      	movs	r0, #119	@ 0x77
 8003086:	f7ff fdfc 	bl	8002c82 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	2057      	movs	r0, #87	@ 0x57
 800308e:	f7ff fdf8 	bl	8002c82 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	2059      	movs	r0, #89	@ 0x59
 8003096:	f7ff fdf4 	bl	8002c82 <SD_SendCmd>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11b      	bne.n	80030d8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80030a0:	21fc      	movs	r1, #252	@ 0xfc
 80030a2:	68b8      	ldr	r0, [r7, #8]
 80030a4:	f7ff fdaa 	bl	8002bfc <SD_TxDataBlock>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <SD_disk_write+0xd0>
        buff += 512;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80030b4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ee      	bne.n	80030a0 <SD_disk_write+0xac>
 80030c2:	e000      	b.n	80030c6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80030c4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80030c6:	21fd      	movs	r1, #253	@ 0xfd
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7ff fd97 	bl	8002bfc <SD_TxDataBlock>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <SD_disk_write+0xe4>
      {
        count = 1;
 80030d4:	2301      	movs	r3, #1
 80030d6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80030d8:	f7ff fc86 	bl	80029e8 <DESELECT>
  SPI_RxByte();
 80030dc:	f7ff fcc4 	bl	8002a68 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000020 	.word	0x20000020
 80030f8:	20000148 	.word	0x20000148

080030fc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b08b      	sub	sp, #44	@ 0x2c
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	603a      	str	r2, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
 8003108:	460b      	mov	r3, r1
 800310a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <SD_disk_ioctl+0x1e>
 8003116:	2304      	movs	r3, #4
 8003118:	e113      	b.n	8003342 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003120:	79bb      	ldrb	r3, [r7, #6]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d124      	bne.n	8003170 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d012      	beq.n	8003154 <SD_disk_ioctl+0x58>
 800312e:	2b02      	cmp	r3, #2
 8003130:	dc1a      	bgt.n	8003168 <SD_disk_ioctl+0x6c>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <SD_disk_ioctl+0x40>
 8003136:	2b01      	cmp	r3, #1
 8003138:	d006      	beq.n	8003148 <SD_disk_ioctl+0x4c>
 800313a:	e015      	b.n	8003168 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800313c:	f7ff fd1a 	bl	8002b74 <SD_PowerOff>
      res = RES_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003146:	e0fa      	b.n	800333e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8003148:	f7ff fcd2 	bl	8002af0 <SD_PowerOn>
      res = RES_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003152:	e0f4      	b.n	800333e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	1c5c      	adds	r4, r3, #1
 8003158:	f7ff fd18 	bl	8002b8c <SD_CheckPower>
 800315c:	4603      	mov	r3, r0
 800315e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8003160:	2300      	movs	r3, #0
 8003162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003166:	e0ea      	b.n	800333e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800316e:	e0e6      	b.n	800333e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8003170:	4b76      	ldr	r3, [pc, #472]	@ (800334c <SD_disk_ioctl+0x250>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800317e:	2303      	movs	r3, #3
 8003180:	e0df      	b.n	8003342 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8003182:	f7ff fc25 	bl	80029d0 <SELECT>
    switch (ctrl)
 8003186:	79bb      	ldrb	r3, [r7, #6]
 8003188:	2b0d      	cmp	r3, #13
 800318a:	f200 80c9 	bhi.w	8003320 <SD_disk_ioctl+0x224>
 800318e:	a201      	add	r2, pc, #4	@ (adr r2, 8003194 <SD_disk_ioctl+0x98>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	0800328b 	.word	0x0800328b
 8003198:	080031cd 	.word	0x080031cd
 800319c:	0800327b 	.word	0x0800327b
 80031a0:	08003321 	.word	0x08003321
 80031a4:	08003321 	.word	0x08003321
 80031a8:	08003321 	.word	0x08003321
 80031ac:	08003321 	.word	0x08003321
 80031b0:	08003321 	.word	0x08003321
 80031b4:	08003321 	.word	0x08003321
 80031b8:	08003321 	.word	0x08003321
 80031bc:	08003321 	.word	0x08003321
 80031c0:	0800329d 	.word	0x0800329d
 80031c4:	080032c1 	.word	0x080032c1
 80031c8:	080032e5 	.word	0x080032e5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80031cc:	2100      	movs	r1, #0
 80031ce:	2049      	movs	r0, #73	@ 0x49
 80031d0:	f7ff fd57 	bl	8002c82 <SD_SendCmd>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80a6 	bne.w	8003328 <SD_disk_ioctl+0x22c>
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	2110      	movs	r1, #16
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fcdc 	bl	8002ba0 <SD_RxDataBlock>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 809c 	beq.w	8003328 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80031f0:	7b3b      	ldrb	r3, [r7, #12]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10d      	bne.n	8003216 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80031fa:	7d7b      	ldrb	r3, [r7, #21]
 80031fc:	461a      	mov	r2, r3
 80031fe:	7d3b      	ldrb	r3, [r7, #20]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b29b      	uxth	r3, r3
 8003204:	4413      	add	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	3301      	adds	r3, #1
 800320a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800320c:	8bfb      	ldrh	r3, [r7, #30]
 800320e:	029a      	lsls	r2, r3, #10
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e02d      	b.n	8003272 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003216:	7c7b      	ldrb	r3, [r7, #17]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2da      	uxtb	r2, r3
 800321e:	7dbb      	ldrb	r3, [r7, #22]
 8003220:	09db      	lsrs	r3, r3, #7
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4413      	add	r3, r2
 8003226:	b2da      	uxtb	r2, r3
 8003228:	7d7b      	ldrb	r3, [r7, #21]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4413      	add	r3, r2
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3302      	adds	r3, #2
 800323a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800323e:	7d3b      	ldrb	r3, [r7, #20]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	b2db      	uxtb	r3, r3
 8003244:	461a      	mov	r2, r3
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	b29b      	uxth	r3, r3
 800324c:	4413      	add	r3, r2
 800324e:	b29a      	uxth	r2, r3
 8003250:	7cbb      	ldrb	r3, [r7, #18]
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	b29b      	uxth	r3, r3
 8003256:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800325a:	b29b      	uxth	r3, r3
 800325c:	4413      	add	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003264:	8bfa      	ldrh	r2, [r7, #30]
 8003266:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800326a:	3b09      	subs	r3, #9
 800326c:	409a      	lsls	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003278:	e056      	b.n	8003328 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003280:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003288:	e055      	b.n	8003336 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800328a:	f7ff fc17 	bl	8002abc <SD_ReadyWait>
 800328e:	4603      	mov	r3, r0
 8003290:	2bff      	cmp	r3, #255	@ 0xff
 8003292:	d14b      	bne.n	800332c <SD_disk_ioctl+0x230>
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800329a:	e047      	b.n	800332c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800329c:	2100      	movs	r1, #0
 800329e:	2049      	movs	r0, #73	@ 0x49
 80032a0:	f7ff fcef 	bl	8002c82 <SD_SendCmd>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d142      	bne.n	8003330 <SD_disk_ioctl+0x234>
 80032aa:	2110      	movs	r1, #16
 80032ac:	6a38      	ldr	r0, [r7, #32]
 80032ae:	f7ff fc77 	bl	8002ba0 <SD_RxDataBlock>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d03b      	beq.n	8003330 <SD_disk_ioctl+0x234>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80032be:	e037      	b.n	8003330 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80032c0:	2100      	movs	r1, #0
 80032c2:	204a      	movs	r0, #74	@ 0x4a
 80032c4:	f7ff fcdd 	bl	8002c82 <SD_SendCmd>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d132      	bne.n	8003334 <SD_disk_ioctl+0x238>
 80032ce:	2110      	movs	r1, #16
 80032d0:	6a38      	ldr	r0, [r7, #32]
 80032d2:	f7ff fc65 	bl	8002ba0 <SD_RxDataBlock>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02b      	beq.n	8003334 <SD_disk_ioctl+0x238>
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80032e2:	e027      	b.n	8003334 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80032e4:	2100      	movs	r1, #0
 80032e6:	207a      	movs	r0, #122	@ 0x7a
 80032e8:	f7ff fccb 	bl	8002c82 <SD_SendCmd>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d116      	bne.n	8003320 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80032f8:	e00b      	b.n	8003312 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80032fa:	6a3c      	ldr	r4, [r7, #32]
 80032fc:	1c63      	adds	r3, r4, #1
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	f7ff fbb2 	bl	8002a68 <SPI_RxByte>
 8003304:	4603      	mov	r3, r0
 8003306:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003308:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800330c:	3301      	adds	r3, #1
 800330e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003312:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003316:	2b03      	cmp	r3, #3
 8003318:	d9ef      	bls.n	80032fa <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8003320:	2304      	movs	r3, #4
 8003322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003326:	e006      	b.n	8003336 <SD_disk_ioctl+0x23a>
      break;
 8003328:	bf00      	nop
 800332a:	e004      	b.n	8003336 <SD_disk_ioctl+0x23a>
      break;
 800332c:	bf00      	nop
 800332e:	e002      	b.n	8003336 <SD_disk_ioctl+0x23a>
      break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <SD_disk_ioctl+0x23a>
      break;
 8003334:	bf00      	nop
    }
    DESELECT();
 8003336:	f7ff fb57 	bl	80029e8 <DESELECT>
    SPI_RxByte();
 800333a:	f7ff fb95 	bl	8002a68 <SPI_RxByte>
  }
  return res;
 800333e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003342:	4618      	mov	r0, r3
 8003344:	372c      	adds	r7, #44	@ 0x2c
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}
 800334a:	bf00      	nop
 800334c:	20000020 	.word	0x20000020

08003350 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	4a08      	ldr	r2, [pc, #32]	@ (8003380 <disk_status+0x30>)
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	4905      	ldr	r1, [pc, #20]	@ (8003380 <disk_status+0x30>)
 800336a:	440a      	add	r2, r1
 800336c:	7a12      	ldrb	r2, [r2, #8]
 800336e:	4610      	mov	r0, r2
 8003370:	4798      	blx	r3
 8003372:	4603      	mov	r3, r0
 8003374:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	2000036c 	.word	0x2000036c

08003384 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003392:	79fb      	ldrb	r3, [r7, #7]
 8003394:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <disk_initialize+0x48>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <disk_initialize+0x48>)
 80033a0:	2101      	movs	r1, #1
 80033a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <disk_initialize+0x48>)
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	79fa      	ldrb	r2, [r7, #7]
 80033b2:	4906      	ldr	r1, [pc, #24]	@ (80033cc <disk_initialize+0x48>)
 80033b4:	440a      	add	r2, r1
 80033b6:	7a12      	ldrb	r2, [r2, #8]
 80033b8:	4610      	mov	r0, r2
 80033ba:	4798      	blx	r3
 80033bc:	4603      	mov	r3, r0
 80033be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2000036c 	.word	0x2000036c

080033d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <disk_read+0x3c>)
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	689c      	ldr	r4, [r3, #8]
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	4a07      	ldr	r2, [pc, #28]	@ (800340c <disk_read+0x3c>)
 80033f0:	4413      	add	r3, r2
 80033f2:	7a18      	ldrb	r0, [r3, #8]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	47a0      	blx	r4
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	2000036c 	.word	0x2000036c

08003410 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <disk_write+0x3c>)
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68dc      	ldr	r4, [r3, #12]
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4a07      	ldr	r2, [pc, #28]	@ (800344c <disk_write+0x3c>)
 8003430:	4413      	add	r3, r2
 8003432:	7a18      	ldrb	r0, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	47a0      	blx	r4
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
}
 8003442:	4618      	mov	r0, r3
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd90      	pop	{r4, r7, pc}
 800344a:	bf00      	nop
 800344c:	2000036c 	.word	0x2000036c

08003450 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	603a      	str	r2, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	460b      	mov	r3, r1
 800345e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	4a09      	ldr	r2, [pc, #36]	@ (8003488 <disk_ioctl+0x38>)
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	79fa      	ldrb	r2, [r7, #7]
 800346e:	4906      	ldr	r1, [pc, #24]	@ (8003488 <disk_ioctl+0x38>)
 8003470:	440a      	add	r2, r1
 8003472:	7a10      	ldrb	r0, [r2, #8]
 8003474:	79b9      	ldrb	r1, [r7, #6]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	4798      	blx	r3
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]
  return res;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000036c 	.word	0x2000036c

0800348c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80034a0:	e007      	b.n	80034b2 <mem_cpy+0x26>
		*d++ = *s++;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	1c53      	adds	r3, r2, #1
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	6179      	str	r1, [r7, #20]
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f2      	bne.n	80034a2 <mem_cpy+0x16>
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	371c      	adds	r7, #28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80034d8:	e005      	b.n	80034e6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	617a      	str	r2, [r7, #20]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1e5a      	subs	r2, r3, #1
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f4      	bne.n	80034da <mem_set+0x12>
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	@ 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003514:	bf00      	nop
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1e5a      	subs	r2, r3, #1
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <mem_cmp+0x40>
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	61fa      	str	r2, [r7, #28]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4619      	mov	r1, r3
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	61ba      	str	r2, [r7, #24]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	1acb      	subs	r3, r1, r3
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ec      	beq.n	8003516 <mem_cmp+0x1a>
	return r;
 800353c:	697b      	ldr	r3, [r7, #20]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	@ 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003552:	e002      	b.n	800355a <chk_chr+0x12>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3301      	adds	r3, #1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <chk_chr+0x26>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4293      	cmp	r3, r2
 800356c:	d1f2      	bne.n	8003554 <chk_chr+0xc>
	return *str;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	781b      	ldrb	r3, [r3, #0]
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e03b      	b.n	8003608 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8003590:	4931      	ldr	r1, [pc, #196]	@ (8003658 <chk_lock+0xdc>)
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d02c      	beq.n	80035fe <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80035a4:	492c      	ldr	r1, [pc, #176]	@ (8003658 <chk_lock+0xdc>)
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d120      	bne.n	8003602 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80035c0:	4925      	ldr	r1, [pc, #148]	@ (8003658 <chk_lock+0xdc>)
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3304      	adds	r3, #4
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035d8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80035da:	429a      	cmp	r2, r3
 80035dc:	d111      	bne.n	8003602 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80035de:	491e      	ldr	r1, [pc, #120]	@ (8003658 <chk_lock+0xdc>)
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3308      	adds	r3, #8
 80035ee:	881a      	ldrh	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d102      	bne.n	8003602 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80035fc:	e007      	b.n	800360e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80035fe:	2301      	movs	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d9c0      	bls.n	8003590 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d109      	bne.n	8003628 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <chk_lock+0xa4>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d101      	bne.n	8003624 <chk_lock+0xa8>
 8003620:	2300      	movs	r3, #0
 8003622:	e013      	b.n	800364c <chk_lock+0xd0>
 8003624:	2312      	movs	r3, #18
 8003626:	e011      	b.n	800364c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10b      	bne.n	8003646 <chk_lock+0xca>
 800362e:	490a      	ldr	r1, [pc, #40]	@ (8003658 <chk_lock+0xdc>)
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	330a      	adds	r3, #10
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003644:	d101      	bne.n	800364a <chk_lock+0xce>
 8003646:	2310      	movs	r3, #16
 8003648:	e000      	b.n	800364c <chk_lock+0xd0>
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000154 	.word	0x20000154

0800365c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e002      	b.n	800366e <enq_lock+0x12>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3301      	adds	r3, #1
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d809      	bhi.n	8003688 <enq_lock+0x2c>
 8003674:	490a      	ldr	r1, [pc, #40]	@ (80036a0 <enq_lock+0x44>)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ef      	bne.n	8003668 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000154 	.word	0x20000154

080036a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	e02e      	b.n	8003712 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80036b4:	4958      	ldr	r1, [pc, #352]	@ (8003818 <inc_lock+0x174>)
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d11d      	bne.n	800370c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 80036d0:	4951      	ldr	r1, [pc, #324]	@ (8003818 <inc_lock+0x174>)
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3304      	adds	r3, #4
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d10e      	bne.n	800370c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 80036ee:	494a      	ldr	r1, [pc, #296]	@ (8003818 <inc_lock+0x174>)
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	3308      	adds	r3, #8
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003706:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003708:	429a      	cmp	r2, r3
 800370a:	d006      	beq.n	800371a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d9cd      	bls.n	80036b4 <inc_lock+0x10>
 8003718:	e000      	b.n	800371c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800371a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d148      	bne.n	80037b4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e002      	b.n	800372e <inc_lock+0x8a>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d809      	bhi.n	8003748 <inc_lock+0xa4>
 8003734:	4938      	ldr	r1, [pc, #224]	@ (8003818 <inc_lock+0x174>)
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ef      	bne.n	8003728 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d101      	bne.n	8003752 <inc_lock+0xae>
 800374e:	2300      	movs	r3, #0
 8003750:	e05d      	b.n	800380e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	482f      	ldr	r0, [pc, #188]	@ (8003818 <inc_lock+0x174>)
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4403      	add	r3, r0
 8003768:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	4829      	ldr	r0, [pc, #164]	@ (8003818 <inc_lock+0x174>)
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4403      	add	r3, r0
 8003780:	3304      	adds	r3, #4
 8003782:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800378a:	88d8      	ldrh	r0, [r3, #6]
 800378c:	4922      	ldr	r1, [pc, #136]	@ (8003818 <inc_lock+0x174>)
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3308      	adds	r3, #8
 800379c:	4602      	mov	r2, r0
 800379e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80037a0:	491d      	ldr	r1, [pc, #116]	@ (8003818 <inc_lock+0x174>)
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	330a      	adds	r3, #10
 80037b0:	2200      	movs	r2, #0
 80037b2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00c      	beq.n	80037d4 <inc_lock+0x130>
 80037ba:	4917      	ldr	r1, [pc, #92]	@ (8003818 <inc_lock+0x174>)
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	330a      	adds	r3, #10
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <inc_lock+0x130>
 80037d0:	2300      	movs	r3, #0
 80037d2:	e01c      	b.n	800380e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <inc_lock+0x14e>
 80037da:	490f      	ldr	r1, [pc, #60]	@ (8003818 <inc_lock+0x174>)
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	330a      	adds	r3, #10
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	b299      	uxth	r1, r3
 80037f0:	e001      	b.n	80037f6 <inc_lock+0x152>
 80037f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037f6:	4808      	ldr	r0, [pc, #32]	@ (8003818 <inc_lock+0x174>)
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4403      	add	r3, r0
 8003804:	330a      	adds	r3, #10
 8003806:	460a      	mov	r2, r1
 8003808:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3301      	adds	r3, #1
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000154 	.word	0x20000154

0800381c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d82e      	bhi.n	800388e <dec_lock+0x72>
		n = Files[i].ctr;
 8003830:	491b      	ldr	r1, [pc, #108]	@ (80038a0 <dec_lock+0x84>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	330a      	adds	r3, #10
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003844:	89fb      	ldrh	r3, [r7, #14]
 8003846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800384a:	d101      	bne.n	8003850 <dec_lock+0x34>
 800384c:	2300      	movs	r3, #0
 800384e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003850:	89fb      	ldrh	r3, [r7, #14]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <dec_lock+0x40>
 8003856:	89fb      	ldrh	r3, [r7, #14]
 8003858:	3b01      	subs	r3, #1
 800385a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800385c:	4910      	ldr	r1, [pc, #64]	@ (80038a0 <dec_lock+0x84>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	330a      	adds	r3, #10
 800386c:	89fa      	ldrh	r2, [r7, #14]
 800386e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <dec_lock+0x6c>
 8003876:	490a      	ldr	r1, [pc, #40]	@ (80038a0 <dec_lock+0x84>)
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	737b      	strb	r3, [r7, #13]
 800388c:	e001      	b.n	8003892 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800388e:	2302      	movs	r3, #2
 8003890:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003892:	7b7b      	ldrb	r3, [r7, #13]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000154 	.word	0x20000154

080038a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e016      	b.n	80038e0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80038b2:	4910      	ldr	r1, [pc, #64]	@ (80038f4 <clear_lock+0x50>)
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d108      	bne.n	80038da <clear_lock+0x36>
 80038c8:	490a      	ldr	r1, [pc, #40]	@ (80038f4 <clear_lock+0x50>)
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d9e5      	bls.n	80038b2 <clear_lock+0xe>
	}
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000154 	.word	0x20000154

080038f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800390a:	791b      	ldrb	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d040      	beq.n	8003992 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003920:	7858      	ldrb	r0, [r3, #1]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	2301      	movs	r3, #1
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	f7ff fd72 	bl	8003410 <disk_write>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <sync_window+0x40>
			res = FR_DISK_ERR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e02c      	b.n	8003992 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393e:	2200      	movs	r2, #0
 8003940:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	1ad2      	subs	r2, r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	429a      	cmp	r2, r3
 8003958:	d21b      	bcs.n	8003992 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003960:	78db      	ldrb	r3, [r3, #3]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e012      	b.n	800398c <sync_window+0x94>
					wsect += fs->fsize;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4413      	add	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397a:	7858      	ldrb	r0, [r3, #1]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	2301      	movs	r3, #1
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	f7ff fd45 	bl	8003410 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3b01      	subs	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d8e9      	bhi.n	8003966 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d01e      	beq.n	80039f6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff9d 	bl	80038f8 <sync_window>
 80039be:	4603      	mov	r3, r0
 80039c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ce:	7858      	ldrb	r0, [r3, #1]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	2301      	movs	r3, #1
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	f7ff fcfb 	bl	80033d0 <disk_read>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039f0:	461a      	mov	r2, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff75 	bl	80038f8 <sync_window>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 80ad 	bne.w	8003b74 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	f040 8098 	bne.w	8003b58 <sync_fs+0x158>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a2e:	795b      	ldrb	r3, [r3, #5]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 8091 	bne.w	8003b58 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a3e:	895b      	ldrh	r3, [r3, #10]
 8003a40:	461a      	mov	r2, r3
 8003a42:	2100      	movs	r1, #0
 8003a44:	f7ff fd40 	bl	80034c8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2255      	movs	r2, #85	@ 0x55
 8003a4c:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	22aa      	movs	r2, #170	@ 0xaa
 8003a54:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2252      	movs	r2, #82	@ 0x52
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2252      	movs	r2, #82	@ 0x52
 8003a62:	705a      	strb	r2, [r3, #1]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2261      	movs	r2, #97	@ 0x61
 8003a68:	709a      	strb	r2, [r3, #2]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2241      	movs	r2, #65	@ 0x41
 8003a6e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2272      	movs	r2, #114	@ 0x72
 8003a74:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2272      	movs	r2, #114	@ 0x72
 8003a7c:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2241      	movs	r2, #65	@ 0x41
 8003a84:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2261      	movs	r2, #97	@ 0x61
 8003a8c:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b34:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b3c:	7858      	ldrb	r0, [r3, #1]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f7ff fc61 	bl	8003410 <disk_write>
			fs->fsi_flag = 0;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b54:	2200      	movs	r2, #0
 8003b56:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b5e:	785b      	ldrb	r3, [r3, #1]
 8003b60:	2200      	movs	r2, #0
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fc73 	bl	8003450 <disk_ioctl>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	3b02      	subs	r3, #2
 8003b8c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	3b02      	subs	r3, #2
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d301      	bcc.n	8003ba2 <clust2sect+0x24>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e00c      	b.n	8003bbc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ba8:	789b      	ldrb	r3, [r3, #2]
 8003baa:	461a      	mov	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	fb03 f202 	mul.w	r2, r3, r2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	4413      	add	r3, r2
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d906      	bls.n	8003be4 <get_fat+0x1e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <get_fat+0x24>
		val = 1;	/* Internal error */
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e0e4      	b.n	8003db4 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	f000 8098 	beq.w	8003d2e <get_fat+0x168>
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	f300 80ce 	bgt.w	8003da0 <get_fat+0x1da>
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d002      	beq.n	8003c0e <get_fat+0x48>
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d05e      	beq.n	8003cca <get_fat+0x104>
 8003c0c:	e0c8      	b.n	8003da0 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2a:	895b      	ldrh	r3, [r3, #10]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c34:	4413      	add	r3, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff feaf 	bl	800399c <move_window>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 80b0 	bne.w	8003da6 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c52:	8952      	ldrh	r2, [r2, #10]
 8003c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c58:	fb01 f202 	mul.w	r2, r1, r2
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c72:	895b      	ldrh	r3, [r3, #10]
 8003c74:	4619      	mov	r1, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe8b 	bl	800399c <move_window>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 808e 	bne.w	8003daa <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c94:	895b      	ldrh	r3, [r3, #10]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c9e:	fb01 f202 	mul.w	r2, r1, r2
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	5cd3      	ldrb	r3, [r2, r3]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <get_fat+0xfa>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	e002      	b.n	8003cc6 <get_fat+0x100>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	617b      	str	r3, [r7, #20]
			break;
 8003cc8:	e074      	b.n	8003db4 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd8:	895b      	ldrh	r3, [r3, #10]
 8003cda:	085b      	lsrs	r3, r3, #1
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff fe56 	bl	800399c <move_window>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d15b      	bne.n	8003dae <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d00:	8952      	ldrh	r2, [r2, #10]
 8003d02:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d06:	fb01 f202 	mul.w	r2, r1, r2
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	3301      	adds	r3, #1
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b21b      	sxth	r3, r3
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	b21a      	sxth	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	617b      	str	r3, [r7, #20]
			break;
 8003d2c:	e042      	b.n	8003db4 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d34:	6a1a      	ldr	r2, [r3, #32]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3c:	895b      	ldrh	r3, [r3, #10]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4619      	mov	r1, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fe24 	bl	800399c <move_window>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d12b      	bne.n	8003db2 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d64:	8952      	ldrh	r2, [r2, #10]
 8003d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d6a:	fb01 f202 	mul.w	r2, r1, r2
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3303      	adds	r3, #3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	061a      	lsls	r2, r3, #24
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3302      	adds	r3, #2
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	431a      	orrs	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	4313      	orrs	r3, r2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d9c:	617b      	str	r3, [r7, #20]
			break;
 8003d9e:	e009      	b.n	8003db4 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8003da0:	2301      	movs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e006      	b.n	8003db4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003da6:	bf00      	nop
 8003da8:	e004      	b.n	8003db4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003db2:	bf00      	nop
		}
	}

	return val;
 8003db4:	697b      	ldr	r3, [r7, #20]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b088      	sub	sp, #32
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d906      	bls.n	8003dde <put_fat+0x20>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d302      	bcc.n	8003de4 <put_fat+0x26>
		res = FR_INT_ERR;
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e13a      	b.n	800405a <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	f000 80d0 	beq.w	8003f92 <put_fat+0x1d4>
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	f300 8127 	bgt.w	8004046 <put_fat+0x288>
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d003      	beq.n	8003e04 <put_fat+0x46>
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f000 808f 	beq.w	8003f20 <put_fat+0x162>
 8003e02:	e120      	b.n	8004046 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4413      	add	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e20:	895b      	ldrh	r3, [r3, #10]
 8003e22:	4619      	mov	r1, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fdb4 	bl	800399c <move_window>
 8003e34:	4603      	mov	r3, r0
 8003e36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 8106 	bne.w	800404c <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	617a      	str	r2, [r7, #20]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e4c:	8952      	ldrh	r2, [r2, #10]
 8003e4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e52:	fb01 f202 	mul.w	r2, r1, r2
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <put_fat+0xc6>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	b25a      	sxtb	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	b25b      	sxtb	r3, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	b25b      	sxtb	r3, r3
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e001      	b.n	8003e88 <put_fat+0xca>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e92:	2201      	movs	r2, #1
 8003e94:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ea4:	895b      	ldrh	r3, [r3, #10]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eae:	4413      	add	r3, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff fd72 	bl	800399c <move_window>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f040 80c6 	bne.w	8004050 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eca:	895b      	ldrh	r3, [r3, #10]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ed4:	fb01 f202 	mul.w	r2, r1, r2
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4413      	add	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <put_fat+0x134>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e00e      	b.n	8003f10 <put_fat+0x152>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	f023 030f 	bic.w	r3, r3, #15
 8003efc:	b25a      	sxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	b25b      	sxtb	r3, r3
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	711a      	strb	r2, [r3, #4]
			break;
 8003f1e:	e09c      	b.n	800405a <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2e:	895b      	ldrh	r3, [r3, #10]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	4619      	mov	r1, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff fd2b 	bl	800399c <move_window>
 8003f46:	4603      	mov	r3, r0
 8003f48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 8081 	bne.w	8004054 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f5c:	8952      	ldrh	r2, [r2, #10]
 8003f5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f62:	fb01 f202 	mul.w	r2, r1, r2
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	3301      	adds	r3, #1
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	711a      	strb	r2, [r3, #4]
			break;
 8003f90:	e063      	b.n	800405a <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa0:	895b      	ldrh	r3, [r3, #10]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fae:	4413      	add	r3, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fcf2 	bl	800399c <move_window>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d14a      	bne.n	8004058 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fcc:	8952      	ldrh	r2, [r2, #10]
 8003fce:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fd2:	fb01 f202 	mul.w	r2, r1, r2
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	3303      	adds	r3, #3
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	061a      	lsls	r2, r3, #24
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	7812      	ldrb	r2, [r2, #0]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	b29b      	uxth	r3, r3
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29a      	uxth	r2, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	3301      	adds	r3, #1
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0c1a      	lsrs	r2, r3, #16
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	3302      	adds	r3, #2
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0e1a      	lsrs	r2, r3, #24
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3303      	adds	r3, #3
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004040:	2201      	movs	r2, #1
 8004042:	711a      	strb	r2, [r3, #4]
			break;
 8004044:	e009      	b.n	800405a <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8004046:	2302      	movs	r3, #2
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e006      	b.n	800405a <put_fat+0x29c>
			if (res != FR_OK) break;
 800404c:	bf00      	nop
 800404e:	e004      	b.n	800405a <put_fat+0x29c>
			if (res != FR_OK) break;
 8004050:	bf00      	nop
 8004052:	e002      	b.n	800405a <put_fat+0x29c>
			if (res != FR_OK) break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <put_fat+0x29c>
			if (res != FR_OK) break;
 8004058:	bf00      	nop
		}
	}

	return res;
 800405a:	7ffb      	ldrb	r3, [r7, #31]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d906      	bls.n	8004082 <remove_chain+0x1e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <remove_chain+0x24>
		res = FR_INT_ERR;
 8004082:	2302      	movs	r3, #2
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	e049      	b.n	800411c <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800408c:	e03b      	b.n	8004106 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800408e:	6839      	ldr	r1, [r7, #0]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fd98 	bl	8003bc6 <get_fat>
 8004096:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d03b      	beq.n	8004116 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <remove_chain+0x46>
 80040a4:	2302      	movs	r3, #2
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e038      	b.n	800411c <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d102      	bne.n	80040b8 <remove_chain+0x54>
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
 80040b6:	e031      	b.n	800411c <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80040b8:	2200      	movs	r2, #0
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff fe7e 	bl	8003dbe <put_fat>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d126      	bne.n	800411a <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d013      	beq.n	8004102 <remove_chain+0x9e>
				fs->free_clust++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	3301      	adds	r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040ea:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f2:	795b      	ldrb	r3, [r3, #5]
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004100:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d3bc      	bcc.n	800408e <remove_chain+0x2a>
 8004114:	e002      	b.n	800411c <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <remove_chain+0xb8>
			if (res != FR_OK) break;
 800411a:	bf00      	nop
		}
	}

	return res;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d111      	bne.n	800415a <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <create_chain+0x2e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d31d      	bcc.n	8004190 <create_chain+0x6a>
 8004154:	2301      	movs	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e01a      	b.n	8004190 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fd32 	bl	8003bc6 <get_fat>
 8004162:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d801      	bhi.n	800416e <create_chain+0x48>
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d101      	bne.n	800417a <create_chain+0x54>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	e079      	b.n	800426e <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	429a      	cmp	r2, r3
 8004186:	d201      	bcs.n	800418c <create_chain+0x66>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	e070      	b.n	800426e <create_chain+0x148>
		scl = clst;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d307      	bcc.n	80041b8 <create_chain+0x92>
			ncl = 2;
 80041a8:	2302      	movs	r3, #2
 80041aa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d901      	bls.n	80041b8 <create_chain+0x92>
 80041b4:	2300      	movs	r3, #0
 80041b6:	e05a      	b.n	800426e <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80041b8:	6979      	ldr	r1, [r7, #20]
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fd03 	bl	8003bc6 <get_fat>
 80041c0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00e      	beq.n	80041e6 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d002      	beq.n	80041d6 <create_chain+0xb0>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <create_chain+0xb4>
			return cs;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	e049      	b.n	800426e <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d1d8      	bne.n	8004194 <create_chain+0x6e>
 80041e2:	2300      	movs	r3, #0
 80041e4:	e043      	b.n	800426e <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80041e6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80041e8:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80041ec:	6979      	ldr	r1, [r7, #20]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff fde5 	bl	8003dbe <put_fat>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <create_chain+0xec>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d006      	beq.n	8004212 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fdd8 	bl	8003dbe <put_fat>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d121      	bne.n	800425c <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800421e:	461a      	mov	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d01c      	beq.n	800426c <create_chain+0x146>
			fs->free_clust--;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	3b01      	subs	r3, #1
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004242:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800424a:	795b      	ldrb	r3, [r3, #5]
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2da      	uxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004258:	715a      	strb	r2, [r3, #5]
 800425a:	e007      	b.n	800426c <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d102      	bne.n	8004268 <create_chain+0x142>
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
 8004266:	e000      	b.n	800426a <create_chain+0x144>
 8004268:	2301      	movs	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800426c:	697b      	ldr	r3, [r7, #20]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	3304      	adds	r3, #4
 800428a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004298:	895b      	ldrh	r3, [r3, #10]
 800429a:	461a      	mov	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	fbb3 f3f2 	udiv	r3, r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042ae:	7892      	ldrb	r2, [r2, #2]
 80042b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1d1a      	adds	r2, r3, #4
 80042ba:	613a      	str	r2, [r7, #16]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <clmt_clust+0x54>
 80042c6:	2300      	movs	r3, #0
 80042c8:	e010      	b.n	80042ec <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d307      	bcc.n	80042e2 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3304      	adds	r3, #4
 80042de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80042e0:	e7e9      	b.n	80042b6 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80042e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	4413      	add	r3, r2
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b086      	sub	sp, #24
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800430a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d009      	beq.n	8004330 <dir_sdi+0x3a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	d301      	bcc.n	8004334 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8004330:	2302      	movs	r3, #2
 8004332:	e0aa      	b.n	800448a <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d110      	bne.n	800435c <dir_sdi+0x66>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d107      	bne.n	800435c <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436e:	891b      	ldrh	r3, [r3, #8]
 8004370:	461a      	mov	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	4293      	cmp	r3, r2
 8004376:	d301      	bcc.n	800437c <dir_sdi+0x86>
			return FR_INT_ERR;
 8004378:	2302      	movs	r3, #2
 800437a:	e086      	b.n	800448a <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e043      	b.n	8004416 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	895b      	ldrh	r3, [r3, #10]
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b29b      	uxth	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ae:	789b      	ldrb	r3, [r3, #2]
 80043b0:	fb02 f303 	mul.w	r3, r2, r3
 80043b4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80043b6:	e021      	b.n	80043fc <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6979      	ldr	r1, [r7, #20]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fbff 	bl	8003bc6 <get_fat>
 80043c8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d101      	bne.n	80043d6 <dir_sdi+0xe0>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e059      	b.n	800448a <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d909      	bls.n	80043f0 <dir_sdi+0xfa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d301      	bcc.n	80043f4 <dir_sdi+0xfe>
				return FR_INT_ERR;
 80043f0:	2302      	movs	r3, #2
 80043f2:	e04a      	b.n	800448a <dir_sdi+0x194>
			idx -= ic;
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	429a      	cmp	r2, r3
 8004402:	d2d9      	bcs.n	80043b8 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6979      	ldr	r1, [r7, #20]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fbb5 	bl	8003b7e <clust2sect>
 8004414:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441c:	461a      	mov	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <dir_sdi+0x136>
 8004428:	2302      	movs	r3, #2
 800442a:	e02e      	b.n	800448a <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004438:	895b      	ldrh	r3, [r3, #10]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	fbb3 f2f2 	udiv	r2, r3, r2
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004450:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004468:	895b      	ldrh	r3, [r3, #10]
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	fbb3 f1f2 	udiv	r1, r3, r2
 8004476:	fb01 f202 	mul.w	r2, r1, r2
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	015b      	lsls	r3, r3, #5
 800447e:	4403      	add	r3, r0
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004486:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004492:	b590      	push	{r4, r7, lr}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044a2:	88db      	ldrh	r3, [r3, #6]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <dir_next+0x2a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <dir_next+0x2e>
		return FR_NO_FILE;
 80044bc:	2304      	movs	r3, #4
 80044be:	e12e      	b.n	800471e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044cc:	895b      	ldrh	r3, [r3, #10]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80044da:	fb01 f202 	mul.w	r2, r1, r2
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f040 80fa 	bne.w	80046da <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	3301      	adds	r3, #1
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044f6:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004510:	891b      	ldrh	r3, [r3, #8]
 8004512:	461a      	mov	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4293      	cmp	r3, r2
 8004518:	f0c0 80df 	bcc.w	80046da <dir_next+0x248>
				return FR_NO_FILE;
 800451c:	2304      	movs	r3, #4
 800451e:	e0fe      	b.n	800471e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800452c:	895b      	ldrh	r3, [r3, #10]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	fbb3 f3f2 	udiv	r3, r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004546:	7892      	ldrb	r2, [r2, #2]
 8004548:	3a01      	subs	r2, #1
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 80c4 	bne.w	80046da <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7ff fb2e 	bl	8003bc6 <get_fat>
 800456a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d801      	bhi.n	8004576 <dir_next+0xe4>
 8004572:	2302      	movs	r3, #2
 8004574:	e0d3      	b.n	800471e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d101      	bne.n	8004582 <dir_next+0xf0>
 800457e:	2301      	movs	r3, #1
 8004580:	e0cd      	b.n	800471e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	429a      	cmp	r2, r3
 8004594:	f0c0 808e 	bcc.w	80046b4 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <dir_next+0x110>
 800459e:	2304      	movs	r3, #4
 80045a0:	e0bd      	b.n	800471e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7ff fdb6 	bl	8004126 <create_chain>
 80045ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <dir_next+0x134>
 80045c2:	2307      	movs	r3, #7
 80045c4:	e0ab      	b.n	800471e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <dir_next+0x13e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0a6      	b.n	800471e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d101      	bne.n	80045dc <dir_next+0x14a>
 80045d8:	2301      	movs	r3, #1
 80045da:	e0a0      	b.n	800471e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff f987 	bl	80038f8 <sync_window>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <dir_next+0x162>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e094      	b.n	800471e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800460a:	895b      	ldrh	r3, [r3, #10]
 800460c:	461a      	mov	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	f7fe ff5a 	bl	80034c8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004622:	681c      	ldr	r4, [r3, #0]
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	4610      	mov	r0, r2
 8004628:	f7ff faa9 	bl	8003b7e <clust2sect>
 800462c:	4603      	mov	r3, r0
 800462e:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8004632:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	e021      	b.n	800467e <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004646:	2201      	movs	r2, #1
 8004648:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f950 	bl	80038f8 <sync_window>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <dir_next+0x1d0>
 800465e:	2301      	movs	r3, #1
 8004660:	e05d      	b.n	800471e <dir_next+0x28c>
						dp->fs->winsect++;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 800466e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004670:	3201      	adds	r2, #1
 8004672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004676:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3301      	adds	r3, #1
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468a:	789b      	ldrb	r3, [r3, #2]
 800468c:	461a      	mov	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4293      	cmp	r3, r2
 8004692:	d3d2      	bcc.n	800463a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1acb      	subs	r3, r1, r3
 80046ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ba:	461a      	mov	r2, r3
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6979      	ldr	r1, [r7, #20]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fa57 	bl	8003b7e <clust2sect>
 80046d0:	4602      	mov	r2, r0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d8:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046e4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046fc:	895b      	ldrh	r3, [r3, #10]
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	b29b      	uxth	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	fbb3 f1f2 	udiv	r1, r3, r2
 800470a:	fb01 f202 	mul.w	r2, r1, r2
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	015b      	lsls	r3, r3, #5
 8004712:	4403      	add	r3, r0
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800471a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}

08004726 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004730:	2100      	movs	r1, #0
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fddf 	bl	80042f6 <dir_sdi>
 8004738:	4603      	mov	r3, r0
 800473a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d135      	bne.n	80047ae <dir_alloc+0x88>
		n = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7ff f91f 	bl	800399c <move_window>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d121      	bne.n	80047ac <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2be5      	cmp	r3, #229	@ 0xe5
 8004774:	d006      	beq.n	8004784 <dir_alloc+0x5e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	3301      	adds	r3, #1
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d102      	bne.n	8004798 <dir_alloc+0x72>
 8004792:	e00c      	b.n	80047ae <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004798:	2101      	movs	r1, #1
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff fe79 	bl	8004492 <dir_next>
 80047a0:	4603      	mov	r3, r0
 80047a2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0cd      	beq.n	8004746 <dir_alloc+0x20>
 80047aa:	e000      	b.n	80047ae <dir_alloc+0x88>
			if (res != FR_OK) break;
 80047ac:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d101      	bne.n	80047b8 <dir_alloc+0x92>
 80047b4:	2307      	movs	r3, #7
 80047b6:	73fb      	strb	r3, [r7, #15]
	return res;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	331b      	adds	r3, #27
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	b21a      	sxth	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	331a      	adds	r3, #26
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b21b      	sxth	r3, r3
 80047e0:	4313      	orrs	r3, r2
 80047e2:	b21b      	sxth	r3, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d110      	bne.n	8004816 <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	3315      	adds	r3, #21
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	b21a      	sxth	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	b21b      	sxth	r3, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	b21b      	sxth	r3, r3
 800480c:	b29b      	uxth	r3, r3
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

	return cl;
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr

08004822 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	331a      	adds	r3, #26
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	331b      	adds	r3, #27
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	0c1a      	lsrs	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3314      	adds	r3, #20
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	b29b      	uxth	r3, r3
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3315      	adds	r3, #21
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
	...

08004870 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	2301      	movs	r3, #1
 8004896:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004898:	4a2b      	ldr	r2, [pc, #172]	@ (8004948 <cmp_lfn+0xd8>)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	4413      	add	r3, r2
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b21b      	sxth	r3, r3
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	b21a      	sxth	r2, r3
 80048ae:	4926      	ldr	r1, [pc, #152]	@ (8004948 <cmp_lfn+0xd8>)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	440b      	add	r3, r1
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	4619      	mov	r1, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	440b      	add	r3, r1
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b21b      	sxth	r3, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d019      	beq.n	8004900 <cmp_lfn+0x90>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80048cc:	89bb      	ldrh	r3, [r7, #12]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f002 fd0e 	bl	80072f0 <ff_wtoupper>
 80048d4:	4603      	mov	r3, r0
 80048d6:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2bfe      	cmp	r3, #254	@ 0xfe
 80048dc:	d80e      	bhi.n	80048fc <cmp_lfn+0x8c>
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	617a      	str	r2, [r7, #20]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f002 fcff 	bl	80072f0 <ff_wtoupper>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d008      	beq.n	800490e <cmp_lfn+0x9e>
				return 0;				/* Not matched */
 80048fc:	2300      	movs	r3, #0
 80048fe:	e01f      	b.n	8004940 <cmp_lfn+0xd0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004900:	89bb      	ldrh	r3, [r7, #12]
 8004902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004906:	4293      	cmp	r3, r2
 8004908:	d001      	beq.n	800490e <cmp_lfn+0x9e>
 800490a:	2300      	movs	r3, #0
 800490c:	e018      	b.n	8004940 <cmp_lfn+0xd0>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d9be      	bls.n	8004898 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <cmp_lfn+0xce>
 8004926:	89fb      	ldrh	r3, [r7, #14]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <cmp_lfn+0xce>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <cmp_lfn+0xce>
		return 0;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <cmp_lfn+0xd0>

	return 1;						/* The part of LFN matched */
 800493e:	2301      	movs	r3, #1
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	08007ef0 	.word	0x08007ef0

0800494c <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	@ 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	460b      	mov	r3, r1
 800495c:	71fb      	strb	r3, [r7, #7]
 800495e:	4613      	mov	r3, r2
 8004960:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	330d      	adds	r3, #13
 8004966:	79ba      	ldrb	r2, [r7, #6]
 8004968:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	330b      	adds	r3, #11
 800496e:	220f      	movs	r2, #15
 8004970:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	330c      	adds	r3, #12
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	331a      	adds	r3, #26
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	331b      	adds	r3, #27
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	4613      	mov	r3, r2
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	82fb      	strh	r3, [r7, #22]
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80049a2:	8afb      	ldrh	r3, [r7, #22]
 80049a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <fit_lfn+0x70>
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	61fa      	str	r2, [r7, #28]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80049bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <fit_lfn+0xe4>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4413      	add	r3, r2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4413      	add	r3, r2
 80049ca:	8afa      	ldrh	r2, [r7, #22]
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	8afb      	ldrh	r3, [r7, #22]
 80049d2:	0a1b      	lsrs	r3, r3, #8
 80049d4:	b299      	uxth	r1, r3
 80049d6:	4a16      	ldr	r2, [pc, #88]	@ (8004a30 <fit_lfn+0xe4>)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	4413      	add	r3, r2
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	4413      	add	r3, r2
 80049e4:	b2ca      	uxtb	r2, r1
 80049e6:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80049e8:	8afb      	ldrh	r3, [r7, #22]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <fit_lfn+0xa8>
 80049ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	d9d0      	bls.n	80049a2 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004a00:	8afb      	ldrh	r3, [r7, #22]
 8004a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d006      	beq.n	8004a18 <fit_lfn+0xcc>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <fit_lfn+0xd4>
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	79fa      	ldrb	r2, [r7, #7]
 8004a24:	701a      	strb	r2, [r3, #0]
}
 8004a26:	bf00      	nop
 8004a28:	3724      	adds	r7, #36	@ 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	08007ef0 	.word	0x08007ef0

08004a34 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	@ 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004a42:	220b      	movs	r2, #11
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7fe fd20 	bl	800348c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d92b      	bls.n	8004aaa <gen_numname+0x76>
		sr = seq;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004a56:	e022      	b.n	8004a9e <gen_numname+0x6a>
			wc = *lfn++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a66:	e017      	b.n	8004a98 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	005a      	lsls	r2, r3, #1
 8004a6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004a76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <gen_numname+0x5e>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004a8c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004a90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	3301      	adds	r3, #1
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d9e4      	bls.n	8004a68 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1d8      	bne.n	8004a58 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004aaa:	2307      	movs	r3, #7
 8004aac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3330      	adds	r3, #48	@ 0x30
 8004aba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004abe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ac2:	2b39      	cmp	r3, #57	@ 0x39
 8004ac4:	d904      	bls.n	8004ad0 <gen_numname+0x9c>
 8004ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004aca:	3307      	adds	r3, #7
 8004acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ad6:	3330      	adds	r3, #48	@ 0x30
 8004ad8:	443b      	add	r3, r7
 8004ada:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004ade:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1df      	bne.n	8004aae <gen_numname+0x7a>
	ns[i] = '~';
 8004aee:	f107 0214 	add.w	r2, r7, #20
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	4413      	add	r3, r2
 8004af6:	227e      	movs	r2, #126	@ 0x7e
 8004af8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004afa:	2300      	movs	r3, #0
 8004afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afe:	e002      	b.n	8004b06 <gen_numname+0xd2>
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	3301      	adds	r3, #1
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d205      	bcs.n	8004b1a <gen_numname+0xe6>
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d1f2      	bne.n	8004b00 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	d807      	bhi.n	8004b30 <gen_numname+0xfc>
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b26:	3330      	adds	r3, #48	@ 0x30
 8004b28:	443b      	add	r3, r7
 8004b2a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004b2e:	e000      	b.n	8004b32 <gen_numname+0xfe>
 8004b30:	2120      	movs	r1, #32
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	460a      	mov	r2, r1
 8004b3e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	2b07      	cmp	r3, #7
 8004b44:	d9e9      	bls.n	8004b1a <gen_numname+0xe6>
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	3730      	adds	r7, #48	@ 0x30
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004b5c:	230b      	movs	r3, #11
 8004b5e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	0852      	lsrs	r2, r2, #1
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	1c59      	adds	r1, r3, #1
 8004b70:	6079      	str	r1, [r7, #4]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	4413      	add	r3, r2
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ed      	bne.n	8004b60 <sum_sfn+0x10>
	return sum;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004b98:	2100      	movs	r1, #0
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fbab 	bl	80042f6 <dir_sdi>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <dir_find+0x1e>
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	e0b8      	b.n	8004d20 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004bae:	23ff      	movs	r3, #255	@ 0xff
 8004bb0:	753b      	strb	r3, [r7, #20]
 8004bb2:	7d3b      	ldrb	r3, [r7, #20]
 8004bb4:	757b      	strb	r3, [r7, #21]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bc0:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fe fee1 	bl	800399c <move_window>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f040 8097 	bne.w	8004d14 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004bf6:	7dbb      	ldrb	r3, [r7, #22]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <dir_find+0x72>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	75fb      	strb	r3, [r7, #23]
 8004c00:	e08d      	b.n	8004d1e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	330b      	adds	r3, #11
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c0c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004c0e:	7dbb      	ldrb	r3, [r7, #22]
 8004c10:	2be5      	cmp	r3, #229	@ 0xe5
 8004c12:	d007      	beq.n	8004c24 <dir_find+0x94>
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <dir_find+0xa6>
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b0f      	cmp	r3, #15
 8004c22:	d008      	beq.n	8004c36 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004c24:	23ff      	movs	r3, #255	@ 0xff
 8004c26:	757b      	strb	r3, [r7, #21]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c32:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004c34:	e063      	b.n	8004cfe <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b0f      	cmp	r3, #15
 8004c3a:	d137      	bne.n	8004cac <dir_find+0x11c>
				if (dp->lfn) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05a      	beq.n	8004cfe <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004c48:	7dbb      	ldrb	r3, [r7, #22]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d010      	beq.n	8004c74 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	7b5b      	ldrb	r3, [r3, #13]
 8004c56:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004c58:	7dbb      	ldrb	r3, [r7, #22]
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5e:	75bb      	strb	r3, [r7, #22]
 8004c60:	7dbb      	ldrb	r3, [r7, #22]
 8004c62:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6a:	88da      	ldrh	r2, [r3, #6]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c72:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004c74:	7dba      	ldrb	r2, [r7, #22]
 8004c76:	7d7b      	ldrb	r3, [r7, #21]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d114      	bne.n	8004ca6 <dir_find+0x116>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	330d      	adds	r3, #13
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	7d3a      	ldrb	r2, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d10e      	bne.n	8004ca6 <dir_find+0x116>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	6939      	ldr	r1, [r7, #16]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fdec 	bl	8004870 <cmp_lfn>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <dir_find+0x116>
 8004c9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e000      	b.n	8004ca8 <dir_find+0x118>
 8004ca6:	23ff      	movs	r3, #255	@ 0xff
 8004ca8:	757b      	strb	r3, [r7, #21]
 8004caa:	e028      	b.n	8004cfe <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004cac:	7d7b      	ldrb	r3, [r7, #21]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <dir_find+0x132>
 8004cb2:	6938      	ldr	r0, [r7, #16]
 8004cb4:	f7ff ff4c 	bl	8004b50 <sum_sfn>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	7d3b      	ldrb	r3, [r7, #20]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02a      	beq.n	8004d18 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	330b      	adds	r3, #11
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <dir_find+0x15e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	220b      	movs	r2, #11
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6938      	ldr	r0, [r7, #16]
 8004ce4:	f7fe fc0a 	bl	80034fc <mem_cmp>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d016      	beq.n	8004d1c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004cee:	23ff      	movs	r3, #255	@ 0xff
 8004cf0:	757b      	strb	r3, [r7, #21]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cfc:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fbc6 	bl	8004492 <dir_next>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f43f af58 	beq.w	8004bc2 <dir_find+0x32>
 8004d12:	e004      	b.n	8004d1e <dir_find+0x18e>
		if (res != FR_OK) break;
 8004d14:	bf00      	nop
 8004d16:	e002      	b.n	8004d1e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004d18:	bf00      	nop
 8004d1a:	e000      	b.n	8004d1e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d1c:	bf00      	nop

	return res;
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	@ 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8004d44:	f107 030c 	add.w	r3, r7, #12
 8004d48:	220c      	movs	r2, #12
 8004d4a:	6a39      	ldr	r1, [r7, #32]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fb9d 	bl	800348c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d03b      	beq.n	8004dd4 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	330b      	adds	r3, #11
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8004d70:	2301      	movs	r3, #1
 8004d72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d74:	e013      	b.n	8004d9e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004d76:	f107 010c 	add.w	r1, r7, #12
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	6a38      	ldr	r0, [r7, #32]
 8004d80:	f7ff fe58 	bl	8004a34 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ff03 	bl	8004b90 <dir_find>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004d90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	2b63      	cmp	r3, #99	@ 0x63
 8004da2:	d9e8      	bls.n	8004d76 <dir_register+0x4e>
 8004da4:	e000      	b.n	8004da8 <dir_register+0x80>
			if (res != FR_OK) break;
 8004da6:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d101      	bne.n	8004db2 <dir_register+0x8a>
 8004dae:	2307      	movs	r3, #7
 8004db0:	e0d8      	b.n	8004f64 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004db2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d002      	beq.n	8004dc0 <dir_register+0x98>
 8004dba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004dbe:	e0d1      	b.n	8004f64 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	330b      	adds	r3, #11
 8004dc4:	7dfa      	ldrb	r2, [r7, #23]
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dce:	461a      	mov	r2, r3
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d014      	beq.n	8004e08 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8004dde:	2300      	movs	r3, #0
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de2:	e002      	b.n	8004dea <dir_register+0xc2>
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	3301      	adds	r3, #1
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f5      	bne.n	8004de4 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	3319      	adds	r3, #25
 8004dfc:	4a5b      	ldr	r2, [pc, #364]	@ (8004f6c <dir_register+0x244>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	089b      	lsrs	r3, r3, #2
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e06:	e001      	b.n	8004e0c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004e0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fc89 	bl	8004726 <dir_alloc>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d15b      	bne.n	8004eda <dir_register+0x1b2>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	3b01      	subs	r3, #1
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d055      	beq.n	8004eda <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e34:	88db      	ldrh	r3, [r3, #6]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fa59 	bl	80042f6 <dir_sdi>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d143      	bne.n	8004eda <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fe78 	bl	8004b50 <sum_sfn>
 8004e60:	4603      	mov	r3, r0
 8004e62:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7fe fd90 	bl	800399c <move_window>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d126      	bne.n	8004ed8 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e90:	6a18      	ldr	r0, [r3, #32]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e98:	6959      	ldr	r1, [r3, #20]
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	7efb      	ldrb	r3, [r7, #27]
 8004ea0:	f7ff fd54 	bl	800494c <fit_lfn>
				dp->fs->wflag = 1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff faeb 	bl	8004492 <dir_next>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004ec2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d107      	bne.n	8004eda <dir_register+0x1b2>
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1c6      	bne.n	8004e64 <dir_register+0x13c>
 8004ed6:	e000      	b.n	8004eda <dir_register+0x1b2>
				if (res != FR_OK) break;
 8004ed8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004eda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d13e      	bne.n	8004f60 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7fe fd51 	bl	800399c <move_window>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d12b      	bne.n	8004f60 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	2220      	movs	r2, #32
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fad7 	bl	80034c8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f20:	6958      	ldr	r0, [r3, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	220b      	movs	r2, #11
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f7fe faad 	bl	800348c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	330b      	adds	r3, #11
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	330c      	adds	r3, #12
 8004f48:	f002 0218 	and.w	r2, r2, #24
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3730      	adds	r7, #48	@ 0x30
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	4ec4ec4f 	.word	0x4ec4ec4f

08004f70 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	e002      	b.n	8004f88 <create_name+0x18>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8004f8e:	d0f8      	beq.n	8004f82 <create_name+0x12>
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b5c      	cmp	r3, #92	@ 0x5c
 8004f96:	d0f4      	beq.n	8004f82 <create_name+0x12>
	lfn = dp->lfn;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	61ba      	str	r2, [r7, #24]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004fb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fba:	2b1f      	cmp	r3, #31
 8004fbc:	d92f      	bls.n	800501e <create_name+0xae>
 8004fbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8004fc2:	d02c      	beq.n	800501e <create_name+0xae>
 8004fc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fc6:	2b5c      	cmp	r3, #92	@ 0x5c
 8004fc8:	d029      	beq.n	800501e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8004fce:	d901      	bls.n	8004fd4 <create_name+0x64>
			return FR_INVALID_NAME;
 8004fd0:	2306      	movs	r3, #6
 8004fd2:	e186      	b.n	80052e2 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f002 f94c 	bl	800727c <ff_convert>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004fe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <create_name+0x82>
 8004fee:	2306      	movs	r3, #6
 8004ff0:	e177      	b.n	80052e2 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004ff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ff4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ff6:	d809      	bhi.n	800500c <create_name+0x9c>
 8004ff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	488e      	ldr	r0, [pc, #568]	@ (8005238 <create_name+0x2c8>)
 8004ffe:	f7fe faa3 	bl	8003548 <chk_chr>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <create_name+0x9c>
			return FR_INVALID_NAME;
 8005008:	2306      	movs	r3, #6
 800500a:	e16a      	b.n	80052e2 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	617a      	str	r2, [r7, #20]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800501a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800501c:	e7c5      	b.n	8004faa <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	441a      	add	r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800502a:	2b1f      	cmp	r3, #31
 800502c:	d801      	bhi.n	8005032 <create_name+0xc2>
 800502e:	2304      	movs	r3, #4
 8005030:	e000      	b.n	8005034 <create_name+0xc4>
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8005038:	e011      	b.n	800505e <create_name+0xee>
		w = lfn[di - 1];
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005040:	3b01      	subs	r3, #1
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800504c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800504e:	2b20      	cmp	r3, #32
 8005050:	d002      	beq.n	8005058 <create_name+0xe8>
 8005052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005054:	2b2e      	cmp	r3, #46	@ 0x2e
 8005056:	d106      	bne.n	8005066 <create_name+0xf6>
		di--;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3b01      	subs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1ea      	bne.n	800503a <create_name+0xca>
 8005064:	e000      	b.n	8005068 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005066:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <create_name+0x102>
 800506e:	2306      	movs	r3, #6
 8005070:	e137      	b.n	80052e2 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	2200      	movs	r2, #0
 800507c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	220b      	movs	r2, #11
 8005088:	2120      	movs	r1, #32
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe fa1c 	bl	80034c8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e002      	b.n	800509c <create_name+0x12c>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	3301      	adds	r3, #1
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d0f5      	beq.n	8005096 <create_name+0x126>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80050b6:	d0ee      	beq.n	8005096 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <create_name+0x162>
 80050be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050c2:	f043 0303 	orr.w	r3, r3, #3
 80050c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80050ca:	e002      	b.n	80050d2 <create_name+0x162>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <create_name+0x17c>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80050de:	3b01      	subs	r3, #1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80050ea:	d1ef      	bne.n	80050cc <create_name+0x15c>

	b = i = 0; ni = 8;
 80050ec:	2300      	movs	r3, #0
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80050f6:	2308      	movs	r3, #8
 80050f8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	61ba      	str	r2, [r7, #24]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800510a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8091 	beq.w	8005234 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005114:	2b20      	cmp	r3, #32
 8005116:	d006      	beq.n	8005126 <create_name+0x1b6>
 8005118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800511a:	2b2e      	cmp	r3, #46	@ 0x2e
 800511c:	d10a      	bne.n	8005134 <create_name+0x1c4>
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	429a      	cmp	r2, r3
 8005124:	d006      	beq.n	8005134 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8005126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800512a:	f043 0303 	orr.w	r3, r3, #3
 800512e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005132:	e07e      	b.n	8005232 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	429a      	cmp	r2, r3
 800513a:	d203      	bcs.n	8005144 <create_name+0x1d4>
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	429a      	cmp	r2, r3
 8005142:	d123      	bne.n	800518c <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b0b      	cmp	r3, #11
 8005148:	d106      	bne.n	8005158 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800514a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800514e:	f043 0303 	orr.w	r3, r3, #3
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005156:	e076      	b.n	8005246 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d005      	beq.n	800516c <create_name+0x1fc>
 8005160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005164:	f043 0303 	orr.w	r3, r3, #3
 8005168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	d867      	bhi.n	8005244 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	2308      	movs	r3, #8
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	230b      	movs	r3, #11
 800517e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800518a:	e052      	b.n	8005232 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800518c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800518e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005190:	d914      	bls.n	80051bc <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005192:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005194:	2100      	movs	r1, #0
 8005196:	4618      	mov	r0, r3
 8005198:	f002 f870 	bl	800727c <ff_convert>
 800519c:	4603      	mov	r3, r0
 800519e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80051a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <create_name+0x240>
 80051a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051a8:	3b80      	subs	r3, #128	@ 0x80
 80051aa:	4a24      	ldr	r2, [pc, #144]	@ (800523c <create_name+0x2cc>)
 80051ac:	5cd3      	ldrb	r3, [r2, r3]
 80051ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80051b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b4:	f043 0302 	orr.w	r3, r3, #2
 80051b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80051bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <create_name+0x262>
 80051c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051c4:	4619      	mov	r1, r3
 80051c6:	481e      	ldr	r0, [pc, #120]	@ (8005240 <create_name+0x2d0>)
 80051c8:	f7fe f9be 	bl	8003548 <chk_chr>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80051d2:	235f      	movs	r3, #95	@ 0x5f
 80051d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051da:	f043 0303 	orr.w	r3, r3, #3
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80051e2:	e01b      	b.n	800521c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80051e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051e6:	2b40      	cmp	r3, #64	@ 0x40
 80051e8:	d909      	bls.n	80051fe <create_name+0x28e>
 80051ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ec:	2b5a      	cmp	r3, #90	@ 0x5a
 80051ee:	d806      	bhi.n	80051fe <create_name+0x28e>
					b |= 2;
 80051f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80051fc:	e00e      	b.n	800521c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80051fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005200:	2b60      	cmp	r3, #96	@ 0x60
 8005202:	d90b      	bls.n	800521c <create_name+0x2ac>
 8005204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005206:	2b7a      	cmp	r3, #122	@ 0x7a
 8005208:	d808      	bhi.n	800521c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800520a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005218:	3b20      	subs	r3, #32
 800521a:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	6239      	str	r1, [r7, #32]
 800522a:	4413      	add	r3, r2
 800522c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8005232:	e762      	b.n	80050fa <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8005234:	bf00      	nop
 8005236:	e006      	b.n	8005246 <create_name+0x2d6>
 8005238:	08007dfc 	.word	0x08007dfc
 800523c:	08007e70 	.word	0x08007e70
 8005240:	08007e08 	.word	0x08007e08
			if (si > di) break;			/* No extension */
 8005244:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2be5      	cmp	r3, #229	@ 0xe5
 8005252:	d105      	bne.n	8005260 <create_name+0x2f0>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2205      	movs	r2, #5
 800525e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d104      	bne.n	8005270 <create_name+0x300>
 8005266:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005270:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d005      	beq.n	8005288 <create_name+0x318>
 800527c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b03      	cmp	r3, #3
 8005286:	d105      	bne.n	8005294 <create_name+0x324>
		cf |= NS_LFN;
 8005288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800528c:	f043 0302 	orr.w	r3, r3, #2
 8005290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d117      	bne.n	80052d0 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80052a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d105      	bne.n	80052b8 <create_name+0x348>
 80052ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052b0:	f043 0310 	orr.w	r3, r3, #16
 80052b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80052b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d105      	bne.n	80052d0 <create_name+0x360>
 80052c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052c8:	f043 0308 	orr.w	r3, r3, #8
 80052cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	330b      	adds	r3, #11
 80052da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80052de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80052e0:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3728      	adds	r7, #40	@ 0x28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop

080052ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80052fc:	d003      	beq.n	8005306 <follow_path+0x1a>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b5c      	cmp	r3, #92	@ 0x5c
 8005304:	d102      	bne.n	800530c <follow_path+0x20>
		path++;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005312:	461a      	mov	r2, r3
 8005314:	2300      	movs	r3, #0
 8005316:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b1f      	cmp	r3, #31
 800531e:	d80c      	bhi.n	800533a <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8005320:	2100      	movs	r1, #0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fe ffe7 	bl	80042f6 <dir_sdi>
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005332:	461a      	mov	r2, r3
 8005334:	2300      	movs	r3, #0
 8005336:	6153      	str	r3, [r2, #20]
 8005338:	e049      	b.n	80053ce <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800533a:	463b      	mov	r3, r7
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff fe16 	bl	8004f70 <create_name>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d13a      	bne.n	80053c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff fc1e 	bl	8004b90 <dir_find>
 8005354:	4603      	mov	r3, r0
 8005356:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	7adb      	ldrb	r3, [r3, #11]
 8005362:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d12b      	bne.n	80053c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d126      	bne.n	80053c8 <follow_path+0xdc>
 800537a:	2305      	movs	r3, #5
 800537c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800537e:	e023      	b.n	80053c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d120      	bne.n	80053cc <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	330b      	adds	r3, #11
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80053a2:	2305      	movs	r3, #5
 80053a4:	73fb      	strb	r3, [r7, #15]
 80053a6:	e012      	b.n	80053ce <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fa05 	bl	80047c2 <ld_clust>
 80053b8:	4602      	mov	r2, r0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053c2:	e7ba      	b.n	800533a <follow_path+0x4e>
			if (res != FR_OK) break;
 80053c4:	bf00      	nop
 80053c6:	e002      	b.n	80053ce <follow_path+0xe2>
				break;
 80053c8:	bf00      	nop
 80053ca:	e000      	b.n	80053ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053cc:	bf00      	nop
		}
	}

	return res;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d031      	beq.n	8005452 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e002      	b.n	80053fc <get_ldnumber+0x24>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	3301      	adds	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b1f      	cmp	r3, #31
 8005402:	d903      	bls.n	800540c <get_ldnumber+0x34>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b3a      	cmp	r3, #58	@ 0x3a
 800540a:	d1f4      	bne.n	80053f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b3a      	cmp	r3, #58	@ 0x3a
 8005412:	d11c      	bne.n	800544e <get_ldnumber+0x76>
			tp = *path;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	60fa      	str	r2, [r7, #12]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	3b30      	subs	r3, #48	@ 0x30
 8005424:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b09      	cmp	r3, #9
 800542a:	d80e      	bhi.n	800544a <get_ldnumber+0x72>
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	429a      	cmp	r2, r3
 8005432:	d10a      	bne.n	800544a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <get_ldnumber+0x72>
					vol = (int)i;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	3301      	adds	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	e002      	b.n	8005454 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005452:	693b      	ldr	r3, [r7, #16]
}
 8005454:	4618      	mov	r0, r3
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
	...

08005460 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005470:	2200      	movs	r2, #0
 8005472:	711a      	strb	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547a:	461a      	mov	r2, r3
 800547c:	f04f 33ff 	mov.w	r3, #4294967295
 8005480:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fe fa89 	bl	800399c <move_window>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <check_fs+0x34>
		return 3;
 8005490:	2303      	movs	r3, #3
 8005492:	e04b      	b.n	800552c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800549a:	3301      	adds	r3, #1
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b21b      	sxth	r3, r3
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	b21a      	sxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	4313      	orrs	r3, r2
 80054ae:	b21b      	sxth	r3, r3
 80054b0:	4a20      	ldr	r2, [pc, #128]	@ (8005534 <check_fs+0xd4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d001      	beq.n	80054ba <check_fs+0x5a>
		return 2;
 80054b6:	2302      	movs	r3, #2
 80054b8:	e038      	b.n	800552c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3336      	adds	r3, #54	@ 0x36
 80054be:	3303      	adds	r3, #3
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	061a      	lsls	r2, r3, #24
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3336      	adds	r3, #54	@ 0x36
 80054c8:	3302      	adds	r3, #2
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3336      	adds	r3, #54	@ 0x36
 80054d4:	3301      	adds	r3, #1
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	4313      	orrs	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054e8:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <check_fs+0xd8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d101      	bne.n	80054f2 <check_fs+0x92>
		return 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e01c      	b.n	800552c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3352      	adds	r3, #82	@ 0x52
 80054f6:	3303      	adds	r3, #3
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	061a      	lsls	r2, r3, #24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3352      	adds	r3, #82	@ 0x52
 8005500:	3302      	adds	r3, #2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3352      	adds	r3, #82	@ 0x52
 800550c:	3301      	adds	r3, #1
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	4313      	orrs	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800551a:	4313      	orrs	r3, r2
 800551c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005520:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <check_fs+0xd8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <check_fs+0xca>
		return 0;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <check_fs+0xcc>

	return 1;
 800552a:	2301      	movs	r3, #1
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	ffffaa55 	.word	0xffffaa55
 8005538:	00544146 	.word	0x00544146

0800553c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b096      	sub	sp, #88	@ 0x58
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005550:	68b8      	ldr	r0, [r7, #8]
 8005552:	f7ff ff41 	bl	80053d8 <get_ldnumber>
 8005556:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	da01      	bge.n	8005562 <find_volume+0x26>
 800555e:	230b      	movs	r3, #11
 8005560:	e318      	b.n	8005b94 <find_volume+0x658>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005562:	4a99      	ldr	r2, [pc, #612]	@ (80057c8 <find_volume+0x28c>)
 8005564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800556c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <find_volume+0x3a>
 8005572:	230c      	movs	r3, #12
 8005574:	e30e      	b.n	8005b94 <find_volume+0x658>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800557a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800557c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fd fedd 	bl	8003350 <disk_status>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800559c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10c      	bne.n	80055c2 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <find_volume+0x82>
 80055ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80055ba:	230a      	movs	r3, #10
 80055bc:	e2ea      	b.n	8005b94 <find_volume+0x658>
			return FR_OK;				/* The file system object is valid */
 80055be:	2300      	movs	r3, #0
 80055c0:	e2e8      	b.n	8005b94 <find_volume+0x658>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fd fecf 	bl	8003384 <disk_initialize>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80055ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80055f8:	2303      	movs	r3, #3
 80055fa:	e2cb      	b.n	8005b94 <find_volume+0x658>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <find_volume+0xd6>
 8005602:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800560e:	230a      	movs	r3, #10
 8005610:	e2c0      	b.n	8005b94 <find_volume+0x658>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005618:	7858      	ldrb	r0, [r3, #1]
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005620:	330a      	adds	r3, #10
 8005622:	461a      	mov	r2, r3
 8005624:	2102      	movs	r1, #2
 8005626:	f7fd ff13 	bl	8003450 <disk_ioctl>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10d      	bne.n	800564c <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005636:	895b      	ldrh	r3, [r3, #10]
 8005638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563c:	d306      	bcc.n	800564c <find_volume+0x110>
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005644:	895b      	ldrh	r3, [r3, #10]
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564a:	d901      	bls.n	8005650 <find_volume+0x114>
 800564c:	2301      	movs	r3, #1
 800564e:	e2a1      	b.n	8005b94 <find_volume+0x658>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005654:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005656:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005658:	f7ff ff02 	bl	8005460 <check_fs>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005662:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005666:	2b01      	cmp	r3, #1
 8005668:	d153      	bne.n	8005712 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800566a:	2300      	movs	r3, #0
 800566c:	643b      	str	r3, [r7, #64]	@ 0x40
 800566e:	e028      	b.n	80056c2 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800567a:	4413      	add	r3, r2
 800567c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	3304      	adds	r3, #4
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <find_volume+0x172>
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	330b      	adds	r3, #11
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	061a      	lsls	r2, r3, #24
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	330a      	adds	r3, #10
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	431a      	orrs	r2, r3
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	3309      	adds	r3, #9
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	4313      	orrs	r3, r2
 80056a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056a6:	3208      	adds	r2, #8
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	e000      	b.n	80056b0 <find_volume+0x174>
 80056ae:	2200      	movs	r2, #0
 80056b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	3358      	adds	r3, #88	@ 0x58
 80056b6:	443b      	add	r3, r7
 80056b8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80056bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056be:	3301      	adds	r3, #1
 80056c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80056c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d9d3      	bls.n	8005670 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80056c8:	2300      	movs	r3, #0
 80056ca:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80056cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <find_volume+0x19c>
 80056d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056d4:	3b01      	subs	r3, #1
 80056d6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80056d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	3358      	adds	r3, #88	@ 0x58
 80056de:	443b      	add	r3, r7
 80056e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80056e4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80056e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <find_volume+0x1bc>
 80056ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056f0:	f7ff feb6 	bl	8005460 <check_fs>
 80056f4:	4603      	mov	r3, r0
 80056f6:	e000      	b.n	80056fa <find_volume+0x1be>
 80056f8:	2302      	movs	r3, #2
 80056fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80056fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <find_volume+0x1d6>
 8005706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005708:	3301      	adds	r3, #1
 800570a:	643b      	str	r3, [r7, #64]	@ 0x40
 800570c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570e:	2b03      	cmp	r3, #3
 8005710:	d9e2      	bls.n	80056d8 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005712:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005716:	2b03      	cmp	r3, #3
 8005718:	d101      	bne.n	800571e <find_volume+0x1e2>
 800571a:	2301      	movs	r3, #1
 800571c:	e23a      	b.n	8005b94 <find_volume+0x658>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800571e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <find_volume+0x1ee>
 8005726:	230d      	movs	r3, #13
 8005728:	e234      	b.n	8005b94 <find_volume+0x658>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	7b1b      	ldrb	r3, [r3, #12]
 800572e:	b21b      	sxth	r3, r3
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	b21a      	sxth	r2, r3
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	7adb      	ldrb	r3, [r3, #11]
 8005738:	b21b      	sxth	r3, r3
 800573a:	4313      	orrs	r3, r2
 800573c:	b21a      	sxth	r2, r3
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005744:	895b      	ldrh	r3, [r3, #10]
 8005746:	b21b      	sxth	r3, r3
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <find_volume+0x214>
		return FR_NO_FILESYSTEM;
 800574c:	230d      	movs	r3, #13
 800574e:	e221      	b.n	8005b94 <find_volume+0x658>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	7ddb      	ldrb	r3, [r3, #23]
 8005754:	b21b      	sxth	r3, r3
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b21a      	sxth	r2, r3
 800575a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575c:	7d9b      	ldrb	r3, [r3, #22]
 800575e:	b21b      	sxth	r3, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	b21b      	sxth	r3, r3
 8005764:	b29b      	uxth	r3, r3
 8005766:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d112      	bne.n	8005794 <find_volume+0x258>
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005774:	061a      	lsls	r2, r3, #24
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	4313      	orrs	r3, r2
 800578a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800578c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8005790:	4313      	orrs	r3, r2
 8005792:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800579a:	461a      	mov	r2, r3
 800579c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	7c1a      	ldrb	r2, [r3, #16]
 80057a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057aa:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80057ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057b2:	78db      	ldrb	r3, [r3, #3]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d009      	beq.n	80057cc <find_volume+0x290>
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057be:	78db      	ldrb	r3, [r3, #3]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d003      	beq.n	80057cc <find_volume+0x290>
		return FR_NO_FILESYSTEM;
 80057c4:	230d      	movs	r3, #13
 80057c6:	e1e5      	b.n	8005b94 <find_volume+0x658>
 80057c8:	2000014c 	.word	0x2000014c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80057cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057d2:	78db      	ldrb	r3, [r3, #3]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d8:	fb02 f303 	mul.w	r3, r2, r3
 80057dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	7b5a      	ldrb	r2, [r3, #13]
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057e8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <find_volume+0x2d4>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fc:	789b      	ldrb	r3, [r3, #2]
 80057fe:	461a      	mov	r2, r3
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005806:	789b      	ldrb	r3, [r3, #2]
 8005808:	3b01      	subs	r3, #1
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <find_volume+0x2d8>
		return FR_NO_FILESYSTEM;
 8005810:	230d      	movs	r3, #13
 8005812:	e1bf      	b.n	8005b94 <find_volume+0x658>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	7c9b      	ldrb	r3, [r3, #18]
 8005818:	b21b      	sxth	r3, r3
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	b21a      	sxth	r2, r3
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	7c5b      	ldrb	r3, [r3, #17]
 8005822:	b21b      	sxth	r3, r3
 8005824:	4313      	orrs	r3, r2
 8005826:	b21b      	sxth	r3, r3
 8005828:	b29a      	uxth	r2, r3
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005830:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005838:	891b      	ldrh	r3, [r3, #8]
 800583a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800583c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005840:	8952      	ldrh	r2, [r2, #10]
 8005842:	0952      	lsrs	r2, r2, #5
 8005844:	b292      	uxth	r2, r2
 8005846:	fbb3 f1f2 	udiv	r1, r3, r2
 800584a:	fb01 f202 	mul.w	r2, r1, r2
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <find_volume+0x31e>
		return FR_NO_FILESYSTEM;
 8005856:	230d      	movs	r3, #13
 8005858:	e19c      	b.n	8005b94 <find_volume+0x658>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	7d1b      	ldrb	r3, [r3, #20]
 800585e:	b21b      	sxth	r3, r3
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	b21a      	sxth	r2, r3
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	7cdb      	ldrb	r3, [r3, #19]
 8005868:	b21b      	sxth	r3, r3
 800586a:	4313      	orrs	r3, r2
 800586c:	b21b      	sxth	r3, r3
 800586e:	b29b      	uxth	r3, r3
 8005870:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005874:	2b00      	cmp	r3, #0
 8005876:	d112      	bne.n	800589e <find_volume+0x362>
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800587e:	061a      	lsls	r2, r3, #24
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	431a      	orrs	r2, r3
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	4313      	orrs	r3, r2
 8005894:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005896:	f892 2020 	ldrb.w	r2, [r2, #32]
 800589a:	4313      	orrs	r3, r2
 800589c:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	7bdb      	ldrb	r3, [r3, #15]
 80058a2:	b21b      	sxth	r3, r3
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	b21a      	sxth	r2, r3
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	7b9b      	ldrb	r3, [r3, #14]
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80058b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <find_volume+0x382>
 80058ba:	230d      	movs	r3, #13
 80058bc:	e16a      	b.n	8005b94 <find_volume+0x658>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80058be:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c2:	4413      	add	r3, r2
 80058c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ca:	8911      	ldrh	r1, [r2, #8]
 80058cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058d2:	8952      	ldrh	r2, [r2, #10]
 80058d4:	0952      	lsrs	r2, r2, #5
 80058d6:	b292      	uxth	r2, r2
 80058d8:	fbb1 f2f2 	udiv	r2, r1, r2
 80058dc:	b292      	uxth	r2, r2
 80058de:	4413      	add	r3, r2
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80058e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d201      	bcs.n	80058ee <find_volume+0x3b2>
 80058ea:	230d      	movs	r3, #13
 80058ec:	e152      	b.n	8005b94 <find_volume+0x658>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80058ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058fa:	7892      	ldrb	r2, [r2, #2]
 80058fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <find_volume+0x3d0>
 8005908:	230d      	movs	r3, #13
 800590a:	e143      	b.n	8005b94 <find_volume+0x658>
	fmt = FS_FAT12;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005918:	4293      	cmp	r3, r2
 800591a:	d902      	bls.n	8005922 <find_volume+0x3e6>
 800591c:	2302      	movs	r3, #2
 800591e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005928:	4293      	cmp	r3, r2
 800592a:	d902      	bls.n	8005932 <find_volume+0x3f6>
 800592c:	2303      	movs	r3, #3
 800592e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	3302      	adds	r3, #2
 8005936:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005938:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800593c:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005944:	461a      	mov	r2, r3
 8005946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005948:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800594a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800594c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594e:	4413      	add	r3, r2
 8005950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005952:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005956:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8005958:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	4413      	add	r3, r2
 800595e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005960:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005964:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8005966:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800596a:	2b03      	cmp	r3, #3
 800596c:	d124      	bne.n	80059b8 <find_volume+0x47c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005974:	891b      	ldrh	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <find_volume+0x442>
 800597a:	230d      	movs	r3, #13
 800597c:	e10a      	b.n	8005b94 <find_volume+0x658>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005984:	061a      	lsls	r2, r3, #24
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	431a      	orrs	r2, r3
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	4313      	orrs	r3, r2
 800599a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800599c:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80059a0:	4313      	orrs	r3, r2
 80059a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059a8:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b6:	e02b      	b.n	8005a10 <find_volume+0x4d4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059be:	891b      	ldrh	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <find_volume+0x48c>
 80059c4:	230d      	movs	r3, #13
 80059c6:	e0e5      	b.n	8005b94 <find_volume+0x658>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d2:	4413      	add	r3, r2
 80059d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80059da:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d105      	bne.n	80059f0 <find_volume+0x4b4>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	e00e      	b.n	8005a0e <find_volume+0x4d2>
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	085a      	lsrs	r2, r3, #1
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005a0e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a16:	699a      	ldr	r2, [r3, #24]
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1e:	895b      	ldrh	r3, [r3, #10]
 8005a20:	4619      	mov	r1, r3
 8005a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a24:	440b      	add	r3, r1
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a2a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8005a2e:	8949      	ldrh	r1, [r1, #10]
 8005a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d201      	bcs.n	8005a3c <find_volume+0x500>
		return FR_NO_FILESYSTEM;
 8005a38:	230d      	movs	r3, #13
 8005a3a:	e0ab      	b.n	8005b94 <find_volume+0x658>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a42:	461a      	mov	r2, r3
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	6113      	str	r3, [r2, #16]
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a58:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a60:	2280      	movs	r2, #128	@ 0x80
 8005a62:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005a64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d17c      	bne.n	8005b66 <find_volume+0x62a>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a72:	b21b      	sxth	r3, r3
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	b21a      	sxth	r2, r3
 8005a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a7e:	b21b      	sxth	r3, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d16e      	bne.n	8005b66 <find_volume+0x62a>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a90:	f7fd ff84 	bl	800399c <move_window>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d165      	bne.n	8005b66 <find_volume+0x62a>
	{
		fs->fsi_flag = 0;
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005aaa:	b21b      	sxth	r3, r3
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	b21a      	sxth	r2, r3
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab2:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005ab6:	b21b      	sxth	r3, r3
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	b21b      	sxth	r3, r3
 8005abc:	4a37      	ldr	r2, [pc, #220]	@ (8005b9c <find_volume+0x660>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d151      	bne.n	8005b66 <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	061a      	lsls	r2, r3, #24
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	789b      	ldrb	r3, [r3, #2]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <find_volume+0x664>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d140      	bne.n	8005b66 <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8005aea:	061a      	lsls	r2, r3, #24
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	431a      	orrs	r2, r3
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	4313      	orrs	r3, r2
 8005b00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b02:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8005b06:	4313      	orrs	r3, r2
 8005b08:	4a26      	ldr	r2, [pc, #152]	@ (8005ba4 <find_volume+0x668>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d12b      	bne.n	8005b66 <find_volume+0x62a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8005b14:	061a      	lsls	r2, r3, #24
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b2c:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8005b30:	4313      	orrs	r3, r2
 8005b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b38:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8005b40:	061a      	lsls	r2, r3, #24
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	4313      	orrs	r3, r2
 8005b56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b58:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005b64:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b72:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005b74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <find_volume+0x66c>)
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <find_volume+0x66c>)
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	4b09      	ldr	r3, [pc, #36]	@ (8005ba8 <find_volume+0x66c>)
 8005b82:	881a      	ldrh	r2, [r3, #0]
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b8a:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005b8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b8e:	f7fd fe89 	bl	80038a4 <clear_lock>
#endif

	return FR_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3758      	adds	r7, #88	@ 0x58
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	ffffaa55 	.word	0xffffaa55
 8005ba0:	41615252 	.word	0x41615252
 8005ba4:	61417272 	.word	0x61417272
 8005ba8:	20000150 	.word	0x20000150

08005bac <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02a      	beq.n	8005c14 <validate+0x68>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d024      	beq.n	8005c14 <validate+0x68>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <validate+0x68>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be8:	88da      	ldrh	r2, [r3, #6]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bf0:	889b      	ldrh	r3, [r3, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d10e      	bne.n	8005c14 <validate+0x68>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fba3 	bl	8003350 <disk_status>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005c14:	2309      	movs	r3, #9
 8005c16:	e000      	b.n	8005c1a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005c36:	f107 0310 	add.w	r3, r7, #16
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fbcc 	bl	80053d8 <get_ldnumber>
 8005c40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da01      	bge.n	8005c4c <f_mount+0x28>
 8005c48:	230b      	movs	r3, #11
 8005c4a:	e02f      	b.n	8005cac <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005c4c:	4a19      	ldr	r2, [pc, #100]	@ (8005cb4 <f_mount+0x90>)
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005c5c:	69b8      	ldr	r0, [r7, #24]
 8005c5e:	f7fd fe21 	bl	80038a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	490d      	ldr	r1, [pc, #52]	@ (8005cb4 <f_mount+0x90>)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <f_mount+0x6e>
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <f_mount+0x72>
 8005c92:	2300      	movs	r3, #0
 8005c94:	e00a      	b.n	8005cac <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005c96:	f107 0108 	add.w	r1, r7, #8
 8005c9a:	f107 030c 	add.w	r3, r7, #12
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fc4b 	bl	800553c <find_volume>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	2000014c 	.word	0x2000014c

08005cb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005cc6:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005cca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005cce:	f843 1c50 	str.w	r1, [r3, #-80]
 8005cd2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005cd6:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005cda:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005cde:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <f_open+0x32>
 8005ce6:	2309      	movs	r3, #9
 8005ce8:	e2f3      	b.n	80062d2 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8005cea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005cee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005cfc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d00:	461a      	mov	r2, r3
 8005d02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d06:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005d12:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d16:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	f107 0118 	add.w	r1, r7, #24
 8005d24:	3910      	subs	r1, #16
 8005d26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d2a:	3b18      	subs	r3, #24
 8005d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fc03 	bl	800553c <find_volume>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005d3c:	f102 0217 	add.w	r2, r2, #23
 8005d40:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005d42:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005d46:	f103 0317 	add.w	r3, r3, #23
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 82bb 	bne.w	80062c8 <f_open+0x610>
		INIT_BUF(dj);
 8005d52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d56:	461a      	mov	r2, r3
 8005d58:	f107 0318 	add.w	r3, r7, #24
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8005d62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d66:	461a      	mov	r2, r3
 8005d68:	4bd3      	ldr	r3, [pc, #844]	@ (80060b8 <f_open+0x400>)
 8005d6a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8005d6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d72:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8005d76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d7a:	3b18      	subs	r3, #24
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fab4 	bl	80052ec <follow_path>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005d8a:	f102 0217 	add.w	r2, r2, #23
 8005d8e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8005d90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005d94:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8005d98:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005d9c:	f102 0210 	add.w	r2, r2, #16
 8005da0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005da2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005da6:	f103 0317 	add.w	r3, r3, #23
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d124      	bne.n	8005dfa <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8005db0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005db4:	f103 0310 	add.w	r3, r3, #16
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <f_open+0x114>
				res = FR_INVALID_NAME;
 8005dbe:	2306      	movs	r3, #6
 8005dc0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005dc4:	f102 0217 	add.w	r2, r2, #23
 8005dc8:	7013      	strb	r3, [r2, #0]
 8005dca:	e016      	b.n	8005dfa <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005dcc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dd0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	bf8c      	ite	hi
 8005dd8:	2301      	movhi	r3, #1
 8005dda:	2300      	movls	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005de4:	3b18      	subs	r3, #24
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fd fbc7 	bl	800357c <chk_lock>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005df4:	f102 0217 	add.w	r2, r2, #23
 8005df8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005dfa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005dfe:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e02:	f003 031c 	and.w	r3, r3, #28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 813c 	beq.w	8006084 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8005e0c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005e10:	f103 0317 	add.w	r3, r3, #23
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d02e      	beq.n	8005e78 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005e1a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005e1e:	f103 0317 	add.w	r3, r3, #23
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d112      	bne.n	8005e4e <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e28:	f7fd fc18 	bl	800365c <enq_lock>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <f_open+0x18a>
 8005e32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e36:	3b18      	subs	r3, #24
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe ff75 	bl	8004d28 <dir_register>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	e000      	b.n	8005e44 <f_open+0x18c>
 8005e42:	2312      	movs	r3, #18
 8005e44:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e48:	f102 0217 	add.w	r2, r2, #23
 8005e4c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005e4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e52:	461a      	mov	r2, r3
 8005e54:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e58:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8005e64:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005e68:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8005e6c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e70:	f102 0210 	add.w	r2, r2, #16
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01f      	b.n	8005eb8 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e78:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005e7c:	f103 0310 	add.w	r3, r3, #16
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330b      	adds	r3, #11
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f003 0311 	and.w	r3, r3, #17
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d006      	beq.n	8005e9c <f_open+0x1e4>
					res = FR_DENIED;
 8005e8e:	2307      	movs	r3, #7
 8005e90:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005e94:	f102 0217 	add.w	r2, r2, #23
 8005e98:	7013      	strb	r3, [r2, #0]
 8005e9a:	e00d      	b.n	8005eb8 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005e9c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005ea0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <f_open+0x200>
						res = FR_EXIST;
 8005eac:	2308      	movs	r3, #8
 8005eae:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005eb2:	f102 0217 	add.w	r2, r2, #23
 8005eb6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005eb8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005ebc:	f103 0317 	add.w	r3, r3, #23
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 8113 	bne.w	80060ee <f_open+0x436>
 8005ec8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005ecc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 810a 	beq.w	80060ee <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8005eda:	f7fc fd1d 	bl	8002918 <get_fattime>
 8005ede:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005ee2:	f103 030c 	add.w	r3, r3, #12
 8005ee6:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005ee8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005eec:	f103 0310 	add.w	r3, r3, #16
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	330e      	adds	r3, #14
 8005ef4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005ef8:	f102 020c 	add.w	r2, r2, #12
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f06:	f103 030c 	add.w	r3, r3, #12
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f16:	f103 0310 	add.w	r3, r3, #16
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330f      	adds	r3, #15
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f26:	f103 030c 	add.w	r3, r3, #12
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	0c1a      	lsrs	r2, r3, #16
 8005f2e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f32:	f103 0310 	add.w	r3, r3, #16
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3310      	adds	r3, #16
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f42:	f103 030c 	add.w	r3, r3, #12
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	0e1a      	lsrs	r2, r3, #24
 8005f4a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f4e:	f103 0310 	add.w	r3, r3, #16
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3311      	adds	r3, #17
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005f5a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f5e:	f103 0310 	add.w	r3, r3, #16
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330b      	adds	r3, #11
 8005f66:	2200      	movs	r2, #0
 8005f68:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005f6a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f6e:	f103 0310 	add.w	r3, r3, #16
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	331c      	adds	r3, #28
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f7e:	f103 0310 	add.w	r3, r3, #16
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	331d      	adds	r3, #29
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f8e:	f103 0310 	add.w	r3, r3, #16
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	331e      	adds	r3, #30
 8005f96:	2200      	movs	r2, #0
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005f9e:	f103 0310 	add.w	r3, r3, #16
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	331f      	adds	r3, #31
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005faa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fae:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005fb2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005fb6:	f102 0210 	add.w	r2, r2, #16
 8005fba:	6811      	ldr	r1, [r2, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe fc00 	bl	80047c2 <ld_clust>
 8005fc2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005fc6:	f103 0308 	add.w	r3, r3, #8
 8005fca:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005fd2:	f103 0310 	add.w	r3, r3, #16
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	f7fe fc23 	bl	8004822 <st_clust>
				dj.fs->wflag = 1;
 8005fdc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005fe0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8005fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe8:	2201      	movs	r2, #1
 8005fea:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005fec:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005ff0:	f103 0308 	add.w	r3, r3, #8
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d079      	beq.n	80060ee <f_open+0x436>
					dw = dj.fs->winsect;
 8005ffa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005ffe:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800600c:	f102 020c 	add.w	r2, r2, #12
 8006010:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006012:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006016:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800601a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800601e:	f102 0208 	add.w	r2, r2, #8
 8006022:	6811      	ldr	r1, [r2, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe f81d 	bl	8004064 <remove_chain>
 800602a:	4603      	mov	r3, r0
 800602c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006030:	f102 0217 	add.w	r2, r2, #23
 8006034:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006036:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800603a:	f103 0317 	add.w	r3, r3, #23
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d154      	bne.n	80060ee <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006044:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006048:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 800604c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006050:	f103 0308 	add.w	r3, r3, #8
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3b01      	subs	r3, #1
 8006058:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800605c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800605e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006062:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006066:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800606a:	f102 020c 	add.w	r2, r2, #12
 800606e:	6811      	ldr	r1, [r2, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f7fd fc93 	bl	800399c <move_window>
 8006076:	4603      	mov	r3, r0
 8006078:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800607c:	f102 0217 	add.w	r2, r2, #23
 8006080:	7013      	strb	r3, [r2, #0]
 8006082:	e034      	b.n	80060ee <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006084:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006088:	f103 0317 	add.w	r3, r3, #23
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d12d      	bne.n	80060ee <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006092:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006096:	f103 0310 	add.w	r3, r3, #16
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330b      	adds	r3, #11
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d009      	beq.n	80060bc <f_open+0x404>
					res = FR_NO_FILE;
 80060a8:	2304      	movs	r3, #4
 80060aa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80060ae:	f102 0217 	add.w	r2, r2, #23
 80060b2:	7013      	strb	r3, [r2, #0]
 80060b4:	e01b      	b.n	80060ee <f_open+0x436>
 80060b6:	bf00      	nop
 80060b8:	2000016c 	.word	0x2000016c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80060bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060c0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d010      	beq.n	80060ee <f_open+0x436>
 80060cc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060d0:	f103 0310 	add.w	r3, r3, #16
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330b      	adds	r3, #11
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <f_open+0x436>
						res = FR_DENIED;
 80060e2:	2307      	movs	r3, #7
 80060e4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80060e8:	f102 0217 	add.w	r2, r2, #23
 80060ec:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80060ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060f2:	f103 0317 	add.w	r3, r3, #23
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d155      	bne.n	80061a8 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060fc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006100:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <f_open+0x46a>
				mode |= FA__WRITTEN;
 800610c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006110:	461a      	mov	r2, r3
 8006112:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006116:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800611a:	f043 0320 	orr.w	r3, r3, #32
 800611e:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006122:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006126:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800612a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006134:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006138:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800613c:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800613e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006142:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614a:	461a      	mov	r2, r3
 800614c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006150:	f103 0310 	add.w	r3, r3, #16
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006158:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800615c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf8c      	ite	hi
 8006164:	2301      	movhi	r3, #1
 8006166:	2300      	movls	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	461a      	mov	r2, r3
 800616c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006170:	3b18      	subs	r3, #24
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f7fd fa95 	bl	80036a4 <inc_lock>
 800617a:	4602      	mov	r2, r0
 800617c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006180:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006188:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800618a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800618e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <f_open+0x4f0>
 800619c:	2302      	movs	r3, #2
 800619e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80061a2:	f102 0217 	add.w	r2, r2, #23
 80061a6:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80061a8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061ac:	f103 0317 	add.w	r3, r3, #23
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f040 8088 	bne.w	80062c8 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 80061b8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061bc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c4:	461a      	mov	r2, r3
 80061c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061ca:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80061ce:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80061d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061d4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80061d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061dc:	2200      	movs	r2, #0
 80061de:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80061e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061e4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80061e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80061ec:	f102 0210 	add.w	r2, r2, #16
 80061f0:	6811      	ldr	r1, [r2, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe fae5 	bl	80047c2 <ld_clust>
 80061f8:	4602      	mov	r2, r0
 80061fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061fe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006206:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006208:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800620c:	f103 0310 	add.w	r3, r3, #16
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	331f      	adds	r3, #31
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800621c:	f103 0310 	add.w	r3, r3, #16
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	331e      	adds	r3, #30
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	431a      	orrs	r2, r3
 800622a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800622e:	f103 0310 	add.w	r3, r3, #16
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	331d      	adds	r3, #29
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	4313      	orrs	r3, r2
 800623c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006240:	f102 0210 	add.w	r2, r2, #16
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	321c      	adds	r2, #28
 8006248:	7812      	ldrb	r2, [r2, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006250:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006254:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006258:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800625a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800625e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006266:	461a      	mov	r2, r3
 8006268:	2300      	movs	r3, #0
 800626a:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800626c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006270:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800627e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006282:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800628a:	461a      	mov	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006290:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006294:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006298:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800629c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80062a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80062a4:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80062a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062aa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80062ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b8:	88da      	ldrh	r2, [r3, #6]
 80062ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80062be:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80062c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c6:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80062c8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062cc:	f103 0317 	add.w	r3, r3, #23
 80062d0:	781b      	ldrb	r3, [r3, #0]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop

080062e0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08a      	sub	sp, #40	@ 0x28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fc57 	bl	8005bac <validate>
 80062fe:	4603      	mov	r3, r0
 8006300:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <f_write+0x2c>
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	e21e      	b.n	800674a <f_write+0x46a>
	if (fp->err)							/* Check error */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006312:	79db      	ldrb	r3, [r3, #7]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800631e:	79db      	ldrb	r3, [r3, #7]
 8006320:	e213      	b.n	800674a <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006328:	799b      	ldrb	r3, [r3, #6]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006332:	2307      	movs	r3, #7
 8006334:	e209      	b.n	800674a <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	429a      	cmp	r2, r3
 800634c:	f080 81d9 	bcs.w	8006702 <f_write+0x422>
 8006350:	2300      	movs	r3, #0
 8006352:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006354:	e1d5      	b.n	8006702 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800636a:	8952      	ldrh	r2, [r2, #10]
 800636c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006370:	fb01 f202 	mul.w	r2, r1, r2
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 8169 	bne.w	800664e <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006390:	8952      	ldrh	r2, [r2, #10]
 8006392:	fbb3 f3f2 	udiv	r3, r3, r2
 8006396:	b2da      	uxtb	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063a4:	789b      	ldrb	r3, [r3, #2]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4013      	ands	r3, r2
 80063ac:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80063ae:	7dbb      	ldrb	r3, [r7, #22]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d15f      	bne.n	8006474 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d111      	bne.n	80063e4 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d126      	bne.n	800641e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fd fea3 	bl	8004126 <create_chain>
 80063e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80063e2:	e01c      	b.n	800641e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d009      	beq.n	8006404 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	4619      	mov	r1, r3
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7fd ff3b 	bl	8004276 <clmt_clust>
 8006400:	6278      	str	r0, [r7, #36]	@ 0x24
 8006402:	e00c      	b.n	800641e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f7fd fe85 	bl	8004126 <create_chain>
 800641c:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8173 	beq.w	800670c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	2b01      	cmp	r3, #1
 800642a:	d106      	bne.n	800643a <f_write+0x15a>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006432:	2202      	movs	r2, #2
 8006434:	71da      	strb	r2, [r3, #7]
 8006436:	2302      	movs	r3, #2
 8006438:	e187      	b.n	800674a <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d106      	bne.n	8006450 <f_write+0x170>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006448:	2201      	movs	r2, #1
 800644a:	71da      	strb	r2, [r3, #7]
 800644c:	2301      	movs	r3, #1
 800644e:	e17c      	b.n	800674a <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006456:	461a      	mov	r2, r3
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <f_write+0x194>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800646e:	461a      	mov	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800647a:	799b      	ldrb	r3, [r3, #6]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d023      	beq.n	80064cc <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006490:	7858      	ldrb	r0, [r3, #1]
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800649a:	699a      	ldr	r2, [r3, #24]
 800649c:	2301      	movs	r3, #1
 800649e:	f7fc ffb7 	bl	8003410 <disk_write>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d006      	beq.n	80064b6 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ae:	2201      	movs	r2, #1
 80064b0:	71da      	strb	r2, [r3, #7]
 80064b2:	2301      	movs	r3, #1
 80064b4:	e149      	b.n	800674a <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064bc:	799b      	ldrb	r3, [r3, #6]
 80064be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ca:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fd fb4d 	bl	8003b7e <clust2sect>
 80064e4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <f_write+0x21a>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064f2:	2202      	movs	r2, #2
 80064f4:	71da      	strb	r2, [r3, #7]
 80064f6:	2302      	movs	r3, #2
 80064f8:	e127      	b.n	800674a <f_write+0x46a>
			sect += csect;
 80064fa:	7dbb      	ldrb	r3, [r7, #22]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650e:	895b      	ldrh	r3, [r3, #10]
 8006510:	461a      	mov	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	fbb3 f3f2 	udiv	r3, r3, r2
 8006518:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d069      	beq.n	80065f4 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006520:	7dba      	ldrb	r2, [r7, #22]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006532:	7892      	ldrb	r2, [r2, #2]
 8006534:	4293      	cmp	r3, r2
 8006536:	d90a      	bls.n	800654e <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006544:	789b      	ldrb	r3, [r3, #2]
 8006546:	461a      	mov	r2, r3
 8006548:	7dbb      	ldrb	r3, [r7, #22]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655a:	7858      	ldrb	r0, [r3, #1]
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	f7fc ff55 	bl	8003410 <disk_write>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006572:	2201      	movs	r2, #1
 8006574:	71da      	strb	r2, [r3, #7]
 8006576:	2301      	movs	r3, #1
 8006578:	e0e7      	b.n	800674a <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	429a      	cmp	r2, r3
 800658a:	d926      	bls.n	80065da <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065a6:	8952      	ldrh	r2, [r2, #10]
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	18d1      	adds	r1, r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065bc:	895b      	ldrh	r3, [r3, #10]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fc ff64 	bl	800348c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ca:	799b      	ldrb	r3, [r3, #6]
 80065cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065d8:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065e6:	895b      	ldrh	r3, [r3, #10]
 80065e8:	461a      	mov	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	623b      	str	r3, [r7, #32]
				continue;
 80065f2:	e06e      	b.n	80066d2 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d01f      	beq.n	8006642 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	429a      	cmp	r2, r3
 8006614:	d215      	bcs.n	8006642 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006622:	7858      	ldrb	r0, [r3, #1]
 8006624:	68f9      	ldr	r1, [r7, #12]
 8006626:	2301      	movs	r3, #1
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	f7fc fed1 	bl	80033d0 <disk_read>
 800662e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006630:	2b00      	cmp	r3, #0
 8006632:	d006      	beq.n	8006642 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800663a:	2201      	movs	r2, #1
 800663c:	71da      	strb	r2, [r3, #7]
 800663e:	2301      	movs	r3, #1
 8006640:	e083      	b.n	800674a <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006648:	461a      	mov	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800665a:	895b      	ldrh	r3, [r3, #10]
 800665c:	4618      	mov	r0, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006672:	8952      	ldrh	r2, [r2, #10]
 8006674:	fbb3 f1f2 	udiv	r1, r3, r2
 8006678:	fb01 f202 	mul.w	r2, r1, r2
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	1ac3      	subs	r3, r0, r3
 8006680:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006682:	6a3a      	ldr	r2, [r7, #32]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	429a      	cmp	r2, r3
 8006688:	d901      	bls.n	800668e <f_write+0x3ae>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066a2:	8952      	ldrh	r2, [r2, #10]
 80066a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80066a8:	fb01 f202 	mul.w	r2, r1, r2
 80066ac:	1a9b      	subs	r3, r3, r2
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4413      	add	r3, r2
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	69b9      	ldr	r1, [r7, #24]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fc fee8 	bl	800348c <mem_cpy>
		fp->flag |= FA__DIRTY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c2:	799b      	ldrb	r3, [r3, #6]
 80066c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066d0:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	4413      	add	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	4413      	add	r3, r2
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	441a      	add	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f ae26 	bne.w	8006356 <f_write+0x76>
 800670a:	e000      	b.n	800670e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800670c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	429a      	cmp	r2, r3
 8006720:	d907      	bls.n	8006732 <f_write+0x452>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006730:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006738:	799b      	ldrb	r3, [r3, #6]
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	b2da      	uxtb	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006746:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3728      	adds	r7, #40	@ 0x28
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff fa26 	bl	8005bac <validate>
 8006760:	4603      	mov	r3, r0
 8006762:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 80bc 	bne.w	80068e4 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006772:	799b      	ldrb	r3, [r3, #6]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 80b3 	beq.w	80068e4 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006784:	799b      	ldrb	r3, [r3, #6]
 8006786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d01e      	beq.n	80067cc <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679a:	7858      	ldrb	r0, [r3, #1]
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	2301      	movs	r3, #1
 80067a8:	f7fc fe32 	bl	8003410 <disk_write>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80067b2:	2301      	movs	r3, #1
 80067b4:	e097      	b.n	80068e6 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067bc:	799b      	ldrb	r3, [r3, #6]
 80067be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ca:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7fd f8dc 	bl	800399c <move_window>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d17a      	bne.n	80068e4 <f_sync+0x192>
				dir = fp->dir_ptr;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	330b      	adds	r3, #11
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	330b      	adds	r3, #11
 8006802:	f042 0220 	orr.w	r2, r2, #32
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	331c      	adds	r3, #28
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	b29b      	uxth	r3, r3
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	b29a      	uxth	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	331d      	adds	r3, #29
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	0c1a      	lsrs	r2, r3, #16
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	331e      	adds	r3, #30
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	0e1a      	lsrs	r2, r3, #24
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	331f      	adds	r3, #31
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4619      	mov	r1, r3
 800685e:	6938      	ldr	r0, [r7, #16]
 8006860:	f7fd ffdf 	bl	8004822 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006864:	f7fc f858 	bl	8002918 <get_fattime>
 8006868:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	3316      	adds	r3, #22
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	b29b      	uxth	r3, r3
 8006878:	0a1b      	lsrs	r3, r3, #8
 800687a:	b29a      	uxth	r2, r3
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	3317      	adds	r3, #23
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	0c1a      	lsrs	r2, r3, #16
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	3318      	adds	r3, #24
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	0e1a      	lsrs	r2, r3, #24
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	3319      	adds	r3, #25
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	3312      	adds	r3, #18
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	3313      	adds	r3, #19
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068b2:	799b      	ldrb	r3, [r3, #6]
 80068b4:	f023 0320 	bic.w	r3, r3, #32
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c0:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ce:	2201      	movs	r2, #1
 80068d0:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd f890 	bl	8003a00 <sync_fs>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff ff2b 	bl	8006752 <f_sync>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d119      	bne.n	800693a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff f950 	bl	8005bac <validate>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d111      	bne.n	800693a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	4618      	mov	r0, r3
 8006920:	f7fc ff7c 	bl	800381c <dec_lock>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b090      	sub	sp, #64	@ 0x40
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff f92c 	bl	8005bac <validate>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800695a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <f_lseek+0x24>
 8006962:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006966:	e2da      	b.n	8006f1e <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800696e:	79db      	ldrb	r3, [r3, #7]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697a:	79db      	ldrb	r3, [r3, #7]
 800697c:	e2cf      	b.n	8006f1e <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8124 	beq.w	8006bd4 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d16c      	bne.n	8006a6e <f_lseek+0x12a>
			tbl = fp->cltbl;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	1d1a      	adds	r2, r3, #4
 80069a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	2302      	movs	r3, #2
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d046      	beq.n	8006a4a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	2300      	movs	r3, #0
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	3302      	adds	r3, #2
 80069c8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d0:	3301      	adds	r3, #1
 80069d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fd f8f1 	bl	8003bc6 <get_fat>
 80069e4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80069e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d806      	bhi.n	80069fa <f_lseek+0xb6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069f2:	2202      	movs	r2, #2
 80069f4:	71da      	strb	r2, [r3, #7]
 80069f6:	2302      	movs	r3, #2
 80069f8:	e291      	b.n	8006f1e <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d106      	bne.n	8006a10 <f_lseek+0xcc>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a08:	2201      	movs	r2, #1
 8006a0a:	71da      	strb	r2, [r3, #7]
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e286      	b.n	8006f1e <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d0d7      	beq.n	80069ca <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006a1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d809      	bhi.n	8006a36 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a24:	1d1a      	adds	r2, r3, #4
 8006a26:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	1d1a      	adds	r2, r3, #4
 8006a30:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d3b8      	bcc.n	80069bc <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a54:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8006a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d803      	bhi.n	8006a66 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	e259      	b.n	8006f1a <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006a66:	2311      	movs	r3, #17
 8006a68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006a6c:	e255      	b.n	8006f1a <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d904      	bls.n	8006a86 <f_lseek+0x142>
				ofs = fp->fsize;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8240 	beq.w	8006f1a <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fd fbe8 	bl	8004276 <clmt_clust>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aae:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f7fd f85b 	bl	8003b7e <clust2sect>
 8006ac8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <f_lseek+0x19a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	71da      	strb	r2, [r3, #7]
 8006ada:	2302      	movs	r3, #2
 8006adc:	e21f      	b.n	8006f1e <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006aee:	8952      	ldrh	r2, [r2, #10]
 8006af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b00:	7892      	ldrb	r2, [r2, #2]
 8006b02:	3a01      	subs	r2, #1
 8006b04:	4013      	ands	r3, r2
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4413      	add	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006b20:	8952      	ldrh	r2, [r2, #10]
 8006b22:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b26:	fb01 f202 	mul.w	r2, r1, r2
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 81f4 	beq.w	8006f1a <f_lseek+0x5d6>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	f000 81ec 	beq.w	8006f1a <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b48:	799b      	ldrb	r3, [r3, #6]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d023      	beq.n	8006b9a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5e:	7858      	ldrb	r0, [r3, #1]
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f7fc fc50 	bl	8003410 <disk_write>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d006      	beq.n	8006b84 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	71da      	strb	r2, [r3, #7]
 8006b80:	2301      	movs	r3, #1
 8006b82:	e1cc      	b.n	8006f1e <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b8a:	799b      	ldrb	r3, [r3, #6]
 8006b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b98:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ba6:	7858      	ldrb	r0, [r3, #1]
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	2301      	movs	r3, #1
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	f7fc fc0f 	bl	80033d0 <disk_read>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	71da      	strb	r2, [r3, #7]
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e1ab      	b.n	8006f1e <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bcc:	461a      	mov	r2, r3
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6193      	str	r3, [r2, #24]
 8006bd2:	e1a2      	b.n	8006f1a <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d90c      	bls.n	8006bfc <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be8:	799b      	ldrb	r3, [r3, #6]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d104      	bne.n	8006bfc <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c10:	461a      	mov	r2, r3
 8006c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c14:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8100 	beq.w	8006e1e <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c2a:	789b      	ldrb	r3, [r3, #2]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c3a:	895b      	ldrh	r3, [r3, #10]
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d021      	beq.n	8006c8c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	1e5a      	subs	r2, r3, #1
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	1e59      	subs	r1, r3, #1
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d315      	bcc.n	8006c8c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	1e5a      	subs	r2, r3, #1
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	425b      	negs	r3, r3
 8006c68:	4013      	ands	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c70:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c8a:	e031      	b.n	8006cf0 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d123      	bne.n	8006ce4 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fd fa3d 	bl	8004126 <create_chain>
 8006cac:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d106      	bne.n	8006cc2 <f_lseek+0x37e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cba:	2202      	movs	r2, #2
 8006cbc:	71da      	strb	r2, [r3, #7]
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e12d      	b.n	8006f1e <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d106      	bne.n	8006cd8 <f_lseek+0x394>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	71da      	strb	r2, [r3, #7]
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e122      	b.n	8006f1e <f_lseek+0x5da>
					fp->sclust = clst;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cea:	461a      	mov	r2, r3
 8006cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cee:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8093 	beq.w	8006e1e <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8006cf8:	e052      	b.n	8006da0 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d00:	799b      	ldrb	r3, [r3, #6]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00e      	beq.n	8006d28 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fd fa06 	bl	8004126 <create_chain>
 8006d1a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <f_lseek+0x3f6>
							ofs = bcs; break;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	603b      	str	r3, [r7, #0]
 8006d26:	e03f      	b.n	8006da8 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fc ff47 	bl	8003bc6 <get_fat>
 8006d38:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d106      	bne.n	8006d50 <f_lseek+0x40c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d48:	2201      	movs	r2, #1
 8006d4a:	71da      	strb	r2, [r3, #7]
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0e6      	b.n	8006f1e <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d909      	bls.n	8006d6a <f_lseek+0x426>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d306      	bcc.n	8006d78 <f_lseek+0x434>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d70:	2202      	movs	r2, #2
 8006d72:	71da      	strb	r2, [r3, #7]
 8006d74:	2302      	movs	r3, #2
 8006d76:	e0d2      	b.n	8006f1e <f_lseek+0x5da>
					fp->clust = clst;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d82:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	4413      	add	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d96:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d8a8      	bhi.n	8006cfa <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	4413      	add	r3, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dba:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dc8:	895b      	ldrh	r3, [r3, #10]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dd2:	fb01 f202 	mul.w	r2, r1, r2
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d020      	beq.n	8006e1e <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fc fec9 	bl	8003b7e <clust2sect>
 8006dec:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <f_lseek+0x4be>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	71da      	strb	r2, [r3, #7]
 8006dfe:	2302      	movs	r3, #2
 8006e00:	e08d      	b.n	8006f1e <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e0e:	895b      	ldrh	r3, [r3, #10]
 8006e10:	461a      	mov	r2, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e1a:	4413      	add	r3, r2
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e2c:	6812      	ldr	r2, [r2, #0]
 8006e2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e32:	8952      	ldrh	r2, [r2, #10]
 8006e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e38:	fb01 f202 	mul.w	r2, r1, r2
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d04e      	beq.n	8006ee0 <f_lseek+0x59c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d047      	beq.n	8006ee0 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e56:	799b      	ldrb	r3, [r3, #6]
 8006e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d023      	beq.n	8006ea8 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6c:	7858      	ldrb	r0, [r3, #1]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e76:	699a      	ldr	r2, [r3, #24]
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f7fc fac9 	bl	8003410 <disk_write>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d006      	beq.n	8006e92 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	71da      	strb	r2, [r3, #7]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e045      	b.n	8006f1e <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e98:	799b      	ldrb	r3, [r3, #6]
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea6:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb4:	7858      	ldrb	r0, [r3, #1]
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	2301      	movs	r3, #1
 8006eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ebc:	f7fc fa88 	bl	80033d0 <disk_read>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d006      	beq.n	8006ed4 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ecc:	2201      	movs	r2, #1
 8006ece:	71da      	strb	r2, [r3, #7]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e024      	b.n	8006f1e <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eda:	461a      	mov	r2, r3
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ede:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d912      	bls.n	8006f1a <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f02:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0a:	799b      	ldrb	r3, [r3, #6]
 8006f0c:	f043 0320 	orr.w	r3, r3, #32
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f18:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8006f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3740      	adds	r7, #64	@ 0x40
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b08e      	sub	sp, #56	@ 0x38
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006f32:	f107 030c 	add.w	r3, r7, #12
 8006f36:	2200      	movs	r2, #0
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fe fafe 	bl	800553c <find_volume>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f040 80bd 	bne.w	80070d0 <f_getfree+0x1aa>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	3b02      	subs	r3, #2
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d806      	bhi.n	8006f7a <f_getfree+0x54>
			*nclst = fs->free_clust;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e0aa      	b.n	80070d0 <f_getfree+0x1aa>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 8006f88:	7efb      	ldrb	r3, [r7, #27]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d126      	bne.n	8006fdc <f_getfree+0xb6>
				clst = 2;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	69f8      	ldr	r0, [r7, #28]
 8006f96:	f7fc fe16 	bl	8003bc6 <get_fat>
 8006f9a:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa2:	d103      	bne.n	8006fac <f_getfree+0x86>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006faa:	e07d      	b.n	80070a8 <f_getfree+0x182>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d103      	bne.n	8006fba <f_getfree+0x94>
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006fb8:	e076      	b.n	80070a8 <f_getfree+0x182>
					if (stat == 0) n++;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <f_getfree+0xa0>
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 8006fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc8:	3301      	adds	r3, #1
 8006fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d3db      	bcc.n	8006f92 <f_getfree+0x6c>
 8006fda:	e065      	b.n	80070a8 <f_getfree+0x182>
			} else {
				clst = fs->n_fatent;
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d114      	bne.n	8007028 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007004:	4619      	mov	r1, r3
 8007006:	69f8      	ldr	r0, [r7, #28]
 8007008:	f7fc fcc8 	bl	800399c <move_window>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8007012:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007016:	2b00      	cmp	r3, #0
 8007018:	d145      	bne.n	80070a6 <f_getfree+0x180>
						p = fs->win.d8;
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007024:	895b      	ldrh	r3, [r3, #10]
 8007026:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 8007028:	7efb      	ldrb	r3, [r7, #27]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d116      	bne.n	800705c <f_getfree+0x136>
						if (LD_WORD(p) == 0) n++;
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	3301      	adds	r3, #1
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b21b      	sxth	r3, r3
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	b21a      	sxth	r2, r3
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	b21b      	sxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b21b      	sxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <f_getfree+0x128>
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	3301      	adds	r3, #1
 800704c:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	3302      	adds	r3, #2
 8007052:	623b      	str	r3, [r7, #32]
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	3b02      	subs	r3, #2
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
 800705a:	e01d      	b.n	8007098 <f_getfree+0x172>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	3303      	adds	r3, #3
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	061a      	lsls	r2, r3, #24
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	3302      	adds	r3, #2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	431a      	orrs	r2, r3
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	3301      	adds	r3, #1
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	4313      	orrs	r3, r2
 8007078:	6a3a      	ldr	r2, [r7, #32]
 800707a:	7812      	ldrb	r2, [r2, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <f_getfree+0x166>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	3301      	adds	r3, #1
 800708a:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	3304      	adds	r3, #4
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	3b04      	subs	r3, #4
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	3b01      	subs	r3, #1
 800709c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800709e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1a9      	bne.n	8006ff8 <f_getfree+0xd2>
 80070a4:	e000      	b.n	80070a8 <f_getfree+0x182>
						if (res != FR_OK) break;
 80070a6:	bf00      	nop
			}
			fs->free_clust = n;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ae:	461a      	mov	r2, r3
 80070b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b2:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ba:	795b      	ldrb	r3, [r3, #5]
 80070bc:	f043 0301 	orr.w	r3, r3, #1
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c8:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ce:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80070d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3738      	adds	r7, #56	@ 0x38
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	2b0a      	cmp	r3, #10
 80070ec:	d103      	bne.n	80070f6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80070ee:	210d      	movs	r1, #13
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff fff3 	bl	80070dc <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	db25      	blt.n	800714e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	60fa      	str	r2, [r7, #12]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b3c      	cmp	r3, #60	@ 0x3c
 8007114:	dd12      	ble.n	800713c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f103 010c 	add.w	r1, r3, #12
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	f107 0308 	add.w	r3, r7, #8
 8007126:	f7ff f8db 	bl	80062e0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	429a      	cmp	r2, r3
 8007130:	d101      	bne.n	8007136 <putc_bfd+0x5a>
 8007132:	2300      	movs	r3, #0
 8007134:	e001      	b.n	800713a <putc_bfd+0x5e>
 8007136:	f04f 33ff 	mov.w	r3, #4294967295
 800713a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	e000      	b.n	8007150 <putc_bfd+0x74>
	if (i < 0) return;
 800714e:	bf00      	nop
}
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007156:	b590      	push	{r4, r7, lr}
 8007158:	b097      	sub	sp, #92	@ 0x5c
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800716c:	e009      	b.n	8007182 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	f107 030c 	add.w	r3, r7, #12
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff ffad 	bl	80070dc <putc_bfd>
	while (*str)			/* Put the string */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f1      	bne.n	800716e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	db15      	blt.n	80071bc <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	461c      	mov	r4, r3
 8007196:	f107 0208 	add.w	r2, r7, #8
 800719a:	f107 030c 	add.w	r3, r7, #12
 800719e:	f103 010c 	add.w	r1, r3, #12
 80071a2:	4613      	mov	r3, r2
 80071a4:	4622      	mov	r2, r4
 80071a6:	f7ff f89b 	bl	80062e0 <f_write>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d101      	bne.n	80071bc <f_puts+0x66>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	e001      	b.n	80071c0 <f_puts+0x6a>
	return EOF;
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	375c      	adds	r7, #92	@ 0x5c
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd90      	pop	{r4, r7, pc}

080071c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80071de:	4b1e      	ldr	r3, [pc, #120]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 80071e0:	7a5b      	ldrb	r3, [r3, #9]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d831      	bhi.n	800724c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80071e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 80071ea:	7a5b      	ldrb	r3, [r3, #9]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	4b19      	ldr	r3, [pc, #100]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 80071f2:	2100      	movs	r1, #0
 80071f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80071f6:	4b18      	ldr	r3, [pc, #96]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 80071f8:	7a5b      	ldrb	r3, [r3, #9]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4a16      	ldr	r2, [pc, #88]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007206:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 8007208:	7a5b      	ldrb	r3, [r3, #9]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 8007210:	4413      	add	r3, r2
 8007212:	79fa      	ldrb	r2, [r7, #7]
 8007214:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007216:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 8007218:	7a5b      	ldrb	r3, [r3, #9]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	b2d1      	uxtb	r1, r2
 8007220:	4a0d      	ldr	r2, [pc, #52]	@ (8007258 <FATFS_LinkDriverEx+0x90>)
 8007222:	7251      	strb	r1, [r2, #9]
 8007224:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007226:	7dbb      	ldrb	r3, [r7, #22]
 8007228:	3330      	adds	r3, #48	@ 0x30
 800722a:	b2da      	uxtb	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	3301      	adds	r3, #1
 8007234:	223a      	movs	r2, #58	@ 0x3a
 8007236:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	3302      	adds	r3, #2
 800723c:	222f      	movs	r2, #47	@ 0x2f
 800723e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	3303      	adds	r3, #3
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007248:	2300      	movs	r3, #0
 800724a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
}
 800724e:	4618      	mov	r0, r3
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	2000036c 	.word	0x2000036c

0800725c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007266:	2200      	movs	r2, #0
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff ffac 	bl	80071c8 <FATFS_LinkDriverEx>
 8007270:	4603      	mov	r3, r0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	6039      	str	r1, [r7, #0]
 8007286:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	2b7f      	cmp	r3, #127	@ 0x7f
 800728c:	d802      	bhi.n	8007294 <ff_convert+0x18>
		c = chr;
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	81fb      	strh	r3, [r7, #14]
 8007292:	e025      	b.n	80072e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00b      	beq.n	80072b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800729a:	88fb      	ldrh	r3, [r7, #6]
 800729c:	2bff      	cmp	r3, #255	@ 0xff
 800729e:	d805      	bhi.n	80072ac <ff_convert+0x30>
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	3b80      	subs	r3, #128	@ 0x80
 80072a4:	4a11      	ldr	r2, [pc, #68]	@ (80072ec <ff_convert+0x70>)
 80072a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072aa:	e000      	b.n	80072ae <ff_convert+0x32>
 80072ac:	2300      	movs	r3, #0
 80072ae:	81fb      	strh	r3, [r7, #14]
 80072b0:	e016      	b.n	80072e0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80072b2:	2300      	movs	r3, #0
 80072b4:	81fb      	strh	r3, [r7, #14]
 80072b6:	e009      	b.n	80072cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	4a0c      	ldr	r2, [pc, #48]	@ (80072ec <ff_convert+0x70>)
 80072bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c0:	88fa      	ldrh	r2, [r7, #6]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d006      	beq.n	80072d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	3301      	adds	r3, #1
 80072ca:	81fb      	strh	r3, [r7, #14]
 80072cc:	89fb      	ldrh	r3, [r7, #14]
 80072ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80072d0:	d9f2      	bls.n	80072b8 <ff_convert+0x3c>
 80072d2:	e000      	b.n	80072d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80072d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80072d6:	89fb      	ldrh	r3, [r7, #14]
 80072d8:	3380      	adds	r3, #128	@ 0x80
 80072da:	b29b      	uxth	r3, r3
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80072e0:	89fb      	ldrh	r3, [r7, #14]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr
 80072ec:	08007f00 	.word	0x08007f00

080072f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e002      	b.n	8007306 <ff_wtoupper+0x16>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3301      	adds	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	4a0f      	ldr	r2, [pc, #60]	@ (8007344 <ff_wtoupper+0x54>)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d006      	beq.n	8007320 <ff_wtoupper+0x30>
 8007312:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <ff_wtoupper+0x54>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800731a:	88fa      	ldrh	r2, [r7, #6]
 800731c:	429a      	cmp	r2, r3
 800731e:	d1ef      	bne.n	8007300 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007320:	4a08      	ldr	r2, [pc, #32]	@ (8007344 <ff_wtoupper+0x54>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <ff_wtoupper+0x46>
 800732c:	4a06      	ldr	r2, [pc, #24]	@ (8007348 <ff_wtoupper+0x58>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007334:	e000      	b.n	8007338 <ff_wtoupper+0x48>
 8007336:	88fb      	ldrh	r3, [r7, #6]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	08008000 	.word	0x08008000
 8007348:	080081e0 	.word	0x080081e0

0800734c <atoi>:
 800734c:	220a      	movs	r2, #10
 800734e:	2100      	movs	r1, #0
 8007350:	f000 b87a 	b.w	8007448 <strtol>

08007354 <_strtol_l.isra.0>:
 8007354:	2b24      	cmp	r3, #36	@ 0x24
 8007356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800735a:	4686      	mov	lr, r0
 800735c:	4690      	mov	r8, r2
 800735e:	d801      	bhi.n	8007364 <_strtol_l.isra.0+0x10>
 8007360:	2b01      	cmp	r3, #1
 8007362:	d106      	bne.n	8007372 <_strtol_l.isra.0+0x1e>
 8007364:	f000 f8a4 	bl	80074b0 <__errno>
 8007368:	2316      	movs	r3, #22
 800736a:	6003      	str	r3, [r0, #0]
 800736c:	2000      	movs	r0, #0
 800736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007372:	460d      	mov	r5, r1
 8007374:	4833      	ldr	r0, [pc, #204]	@ (8007444 <_strtol_l.isra.0+0xf0>)
 8007376:	462a      	mov	r2, r5
 8007378:	f815 4b01 	ldrb.w	r4, [r5], #1
 800737c:	5d06      	ldrb	r6, [r0, r4]
 800737e:	f016 0608 	ands.w	r6, r6, #8
 8007382:	d1f8      	bne.n	8007376 <_strtol_l.isra.0+0x22>
 8007384:	2c2d      	cmp	r4, #45	@ 0x2d
 8007386:	d110      	bne.n	80073aa <_strtol_l.isra.0+0x56>
 8007388:	2601      	movs	r6, #1
 800738a:	782c      	ldrb	r4, [r5, #0]
 800738c:	1c95      	adds	r5, r2, #2
 800738e:	f033 0210 	bics.w	r2, r3, #16
 8007392:	d115      	bne.n	80073c0 <_strtol_l.isra.0+0x6c>
 8007394:	2c30      	cmp	r4, #48	@ 0x30
 8007396:	d10d      	bne.n	80073b4 <_strtol_l.isra.0+0x60>
 8007398:	782a      	ldrb	r2, [r5, #0]
 800739a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800739e:	2a58      	cmp	r2, #88	@ 0x58
 80073a0:	d108      	bne.n	80073b4 <_strtol_l.isra.0+0x60>
 80073a2:	786c      	ldrb	r4, [r5, #1]
 80073a4:	3502      	adds	r5, #2
 80073a6:	2310      	movs	r3, #16
 80073a8:	e00a      	b.n	80073c0 <_strtol_l.isra.0+0x6c>
 80073aa:	2c2b      	cmp	r4, #43	@ 0x2b
 80073ac:	bf04      	itt	eq
 80073ae:	782c      	ldrbeq	r4, [r5, #0]
 80073b0:	1c95      	addeq	r5, r2, #2
 80073b2:	e7ec      	b.n	800738e <_strtol_l.isra.0+0x3a>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f6      	bne.n	80073a6 <_strtol_l.isra.0+0x52>
 80073b8:	2c30      	cmp	r4, #48	@ 0x30
 80073ba:	bf14      	ite	ne
 80073bc:	230a      	movne	r3, #10
 80073be:	2308      	moveq	r3, #8
 80073c0:	2200      	movs	r2, #0
 80073c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80073c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80073ca:	fbbc f9f3 	udiv	r9, ip, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80073d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80073d8:	2f09      	cmp	r7, #9
 80073da:	d80f      	bhi.n	80073fc <_strtol_l.isra.0+0xa8>
 80073dc:	463c      	mov	r4, r7
 80073de:	42a3      	cmp	r3, r4
 80073e0:	dd1b      	ble.n	800741a <_strtol_l.isra.0+0xc6>
 80073e2:	1c57      	adds	r7, r2, #1
 80073e4:	d007      	beq.n	80073f6 <_strtol_l.isra.0+0xa2>
 80073e6:	4581      	cmp	r9, r0
 80073e8:	d314      	bcc.n	8007414 <_strtol_l.isra.0+0xc0>
 80073ea:	d101      	bne.n	80073f0 <_strtol_l.isra.0+0x9c>
 80073ec:	45a2      	cmp	sl, r4
 80073ee:	db11      	blt.n	8007414 <_strtol_l.isra.0+0xc0>
 80073f0:	2201      	movs	r2, #1
 80073f2:	fb00 4003 	mla	r0, r0, r3, r4
 80073f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073fa:	e7eb      	b.n	80073d4 <_strtol_l.isra.0+0x80>
 80073fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007400:	2f19      	cmp	r7, #25
 8007402:	d801      	bhi.n	8007408 <_strtol_l.isra.0+0xb4>
 8007404:	3c37      	subs	r4, #55	@ 0x37
 8007406:	e7ea      	b.n	80073de <_strtol_l.isra.0+0x8a>
 8007408:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800740c:	2f19      	cmp	r7, #25
 800740e:	d804      	bhi.n	800741a <_strtol_l.isra.0+0xc6>
 8007410:	3c57      	subs	r4, #87	@ 0x57
 8007412:	e7e4      	b.n	80073de <_strtol_l.isra.0+0x8a>
 8007414:	f04f 32ff 	mov.w	r2, #4294967295
 8007418:	e7ed      	b.n	80073f6 <_strtol_l.isra.0+0xa2>
 800741a:	1c53      	adds	r3, r2, #1
 800741c:	d108      	bne.n	8007430 <_strtol_l.isra.0+0xdc>
 800741e:	2322      	movs	r3, #34	@ 0x22
 8007420:	4660      	mov	r0, ip
 8007422:	f8ce 3000 	str.w	r3, [lr]
 8007426:	f1b8 0f00 	cmp.w	r8, #0
 800742a:	d0a0      	beq.n	800736e <_strtol_l.isra.0+0x1a>
 800742c:	1e69      	subs	r1, r5, #1
 800742e:	e006      	b.n	800743e <_strtol_l.isra.0+0xea>
 8007430:	b106      	cbz	r6, 8007434 <_strtol_l.isra.0+0xe0>
 8007432:	4240      	negs	r0, r0
 8007434:	f1b8 0f00 	cmp.w	r8, #0
 8007438:	d099      	beq.n	800736e <_strtol_l.isra.0+0x1a>
 800743a:	2a00      	cmp	r2, #0
 800743c:	d1f6      	bne.n	800742c <_strtol_l.isra.0+0xd8>
 800743e:	f8c8 1000 	str.w	r1, [r8]
 8007442:	e794      	b.n	800736e <_strtol_l.isra.0+0x1a>
 8007444:	080083c1 	.word	0x080083c1

08007448 <strtol>:
 8007448:	4613      	mov	r3, r2
 800744a:	460a      	mov	r2, r1
 800744c:	4601      	mov	r1, r0
 800744e:	4802      	ldr	r0, [pc, #8]	@ (8007458 <strtol+0x10>)
 8007450:	6800      	ldr	r0, [r0, #0]
 8007452:	f7ff bf7f 	b.w	8007354 <_strtol_l.isra.0>
 8007456:	bf00      	nop
 8007458:	20000024 	.word	0x20000024

0800745c <siprintf>:
 800745c:	b40e      	push	{r1, r2, r3}
 800745e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007462:	b510      	push	{r4, lr}
 8007464:	2400      	movs	r4, #0
 8007466:	b09d      	sub	sp, #116	@ 0x74
 8007468:	ab1f      	add	r3, sp, #124	@ 0x7c
 800746a:	9002      	str	r0, [sp, #8]
 800746c:	9006      	str	r0, [sp, #24]
 800746e:	9107      	str	r1, [sp, #28]
 8007470:	9104      	str	r1, [sp, #16]
 8007472:	4809      	ldr	r0, [pc, #36]	@ (8007498 <siprintf+0x3c>)
 8007474:	4909      	ldr	r1, [pc, #36]	@ (800749c <siprintf+0x40>)
 8007476:	f853 2b04 	ldr.w	r2, [r3], #4
 800747a:	9105      	str	r1, [sp, #20]
 800747c:	6800      	ldr	r0, [r0, #0]
 800747e:	a902      	add	r1, sp, #8
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007484:	f000 f992 	bl	80077ac <_svfiprintf_r>
 8007488:	9b02      	ldr	r3, [sp, #8]
 800748a:	701c      	strb	r4, [r3, #0]
 800748c:	b01d      	add	sp, #116	@ 0x74
 800748e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007492:	b003      	add	sp, #12
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000024 	.word	0x20000024
 800749c:	ffff0208 	.word	0xffff0208

080074a0 <memset>:
 80074a0:	4603      	mov	r3, r0
 80074a2:	4402      	add	r2, r0
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d100      	bne.n	80074aa <memset+0xa>
 80074a8:	4770      	bx	lr
 80074aa:	f803 1b01 	strb.w	r1, [r3], #1
 80074ae:	e7f9      	b.n	80074a4 <memset+0x4>

080074b0 <__errno>:
 80074b0:	4b01      	ldr	r3, [pc, #4]	@ (80074b8 <__errno+0x8>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20000024 	.word	0x20000024

080074bc <__libc_init_array>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	2600      	movs	r6, #0
 80074c0:	4d0c      	ldr	r5, [pc, #48]	@ (80074f4 <__libc_init_array+0x38>)
 80074c2:	4c0d      	ldr	r4, [pc, #52]	@ (80074f8 <__libc_init_array+0x3c>)
 80074c4:	1b64      	subs	r4, r4, r5
 80074c6:	10a4      	asrs	r4, r4, #2
 80074c8:	42a6      	cmp	r6, r4
 80074ca:	d109      	bne.n	80074e0 <__libc_init_array+0x24>
 80074cc:	f000 fc76 	bl	8007dbc <_init>
 80074d0:	2600      	movs	r6, #0
 80074d2:	4d0a      	ldr	r5, [pc, #40]	@ (80074fc <__libc_init_array+0x40>)
 80074d4:	4c0a      	ldr	r4, [pc, #40]	@ (8007500 <__libc_init_array+0x44>)
 80074d6:	1b64      	subs	r4, r4, r5
 80074d8:	10a4      	asrs	r4, r4, #2
 80074da:	42a6      	cmp	r6, r4
 80074dc:	d105      	bne.n	80074ea <__libc_init_array+0x2e>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e4:	4798      	blx	r3
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7ee      	b.n	80074c8 <__libc_init_array+0xc>
 80074ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ee:	4798      	blx	r3
 80074f0:	3601      	adds	r6, #1
 80074f2:	e7f2      	b.n	80074da <__libc_init_array+0x1e>
 80074f4:	080084fc 	.word	0x080084fc
 80074f8:	080084fc 	.word	0x080084fc
 80074fc:	080084fc 	.word	0x080084fc
 8007500:	08008500 	.word	0x08008500

08007504 <__retarget_lock_acquire_recursive>:
 8007504:	4770      	bx	lr

08007506 <__retarget_lock_release_recursive>:
 8007506:	4770      	bx	lr

08007508 <_free_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4605      	mov	r5, r0
 800750c:	2900      	cmp	r1, #0
 800750e:	d040      	beq.n	8007592 <_free_r+0x8a>
 8007510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007514:	1f0c      	subs	r4, r1, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfb8      	it	lt
 800751a:	18e4      	addlt	r4, r4, r3
 800751c:	f000 f8de 	bl	80076dc <__malloc_lock>
 8007520:	4a1c      	ldr	r2, [pc, #112]	@ (8007594 <_free_r+0x8c>)
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	b933      	cbnz	r3, 8007534 <_free_r+0x2c>
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	6014      	str	r4, [r2, #0]
 800752a:	4628      	mov	r0, r5
 800752c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007530:	f000 b8da 	b.w	80076e8 <__malloc_unlock>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d908      	bls.n	800754a <_free_r+0x42>
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	1821      	adds	r1, r4, r0
 800753c:	428b      	cmp	r3, r1
 800753e:	bf01      	itttt	eq
 8007540:	6819      	ldreq	r1, [r3, #0]
 8007542:	685b      	ldreq	r3, [r3, #4]
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	e7ed      	b.n	8007526 <_free_r+0x1e>
 800754a:	461a      	mov	r2, r3
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	b10b      	cbz	r3, 8007554 <_free_r+0x4c>
 8007550:	42a3      	cmp	r3, r4
 8007552:	d9fa      	bls.n	800754a <_free_r+0x42>
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	1850      	adds	r0, r2, r1
 8007558:	42a0      	cmp	r0, r4
 800755a:	d10b      	bne.n	8007574 <_free_r+0x6c>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	4401      	add	r1, r0
 8007560:	1850      	adds	r0, r2, r1
 8007562:	4283      	cmp	r3, r0
 8007564:	6011      	str	r1, [r2, #0]
 8007566:	d1e0      	bne.n	800752a <_free_r+0x22>
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	4408      	add	r0, r1
 800756e:	6010      	str	r0, [r2, #0]
 8007570:	6053      	str	r3, [r2, #4]
 8007572:	e7da      	b.n	800752a <_free_r+0x22>
 8007574:	d902      	bls.n	800757c <_free_r+0x74>
 8007576:	230c      	movs	r3, #12
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	e7d6      	b.n	800752a <_free_r+0x22>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	1821      	adds	r1, r4, r0
 8007580:	428b      	cmp	r3, r1
 8007582:	bf01      	itttt	eq
 8007584:	6819      	ldreq	r1, [r3, #0]
 8007586:	685b      	ldreq	r3, [r3, #4]
 8007588:	1809      	addeq	r1, r1, r0
 800758a:	6021      	streq	r1, [r4, #0]
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	6054      	str	r4, [r2, #4]
 8007590:	e7cb      	b.n	800752a <_free_r+0x22>
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	200004bc 	.word	0x200004bc

08007598 <sbrk_aligned>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	4e0f      	ldr	r6, [pc, #60]	@ (80075d8 <sbrk_aligned+0x40>)
 800759c:	460c      	mov	r4, r1
 800759e:	6831      	ldr	r1, [r6, #0]
 80075a0:	4605      	mov	r5, r0
 80075a2:	b911      	cbnz	r1, 80075aa <sbrk_aligned+0x12>
 80075a4:	f000 fba8 	bl	8007cf8 <_sbrk_r>
 80075a8:	6030      	str	r0, [r6, #0]
 80075aa:	4621      	mov	r1, r4
 80075ac:	4628      	mov	r0, r5
 80075ae:	f000 fba3 	bl	8007cf8 <_sbrk_r>
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	d103      	bne.n	80075be <sbrk_aligned+0x26>
 80075b6:	f04f 34ff 	mov.w	r4, #4294967295
 80075ba:	4620      	mov	r0, r4
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
 80075be:	1cc4      	adds	r4, r0, #3
 80075c0:	f024 0403 	bic.w	r4, r4, #3
 80075c4:	42a0      	cmp	r0, r4
 80075c6:	d0f8      	beq.n	80075ba <sbrk_aligned+0x22>
 80075c8:	1a21      	subs	r1, r4, r0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 fb94 	bl	8007cf8 <_sbrk_r>
 80075d0:	3001      	adds	r0, #1
 80075d2:	d1f2      	bne.n	80075ba <sbrk_aligned+0x22>
 80075d4:	e7ef      	b.n	80075b6 <sbrk_aligned+0x1e>
 80075d6:	bf00      	nop
 80075d8:	200004b8 	.word	0x200004b8

080075dc <_malloc_r>:
 80075dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e0:	1ccd      	adds	r5, r1, #3
 80075e2:	f025 0503 	bic.w	r5, r5, #3
 80075e6:	3508      	adds	r5, #8
 80075e8:	2d0c      	cmp	r5, #12
 80075ea:	bf38      	it	cc
 80075ec:	250c      	movcc	r5, #12
 80075ee:	2d00      	cmp	r5, #0
 80075f0:	4606      	mov	r6, r0
 80075f2:	db01      	blt.n	80075f8 <_malloc_r+0x1c>
 80075f4:	42a9      	cmp	r1, r5
 80075f6:	d904      	bls.n	8007602 <_malloc_r+0x26>
 80075f8:	230c      	movs	r3, #12
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	2000      	movs	r0, #0
 80075fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076d8 <_malloc_r+0xfc>
 8007606:	f000 f869 	bl	80076dc <__malloc_lock>
 800760a:	f8d8 3000 	ldr.w	r3, [r8]
 800760e:	461c      	mov	r4, r3
 8007610:	bb44      	cbnz	r4, 8007664 <_malloc_r+0x88>
 8007612:	4629      	mov	r1, r5
 8007614:	4630      	mov	r0, r6
 8007616:	f7ff ffbf 	bl	8007598 <sbrk_aligned>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	4604      	mov	r4, r0
 800761e:	d158      	bne.n	80076d2 <_malloc_r+0xf6>
 8007620:	f8d8 4000 	ldr.w	r4, [r8]
 8007624:	4627      	mov	r7, r4
 8007626:	2f00      	cmp	r7, #0
 8007628:	d143      	bne.n	80076b2 <_malloc_r+0xd6>
 800762a:	2c00      	cmp	r4, #0
 800762c:	d04b      	beq.n	80076c6 <_malloc_r+0xea>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	4639      	mov	r1, r7
 8007632:	4630      	mov	r0, r6
 8007634:	eb04 0903 	add.w	r9, r4, r3
 8007638:	f000 fb5e 	bl	8007cf8 <_sbrk_r>
 800763c:	4581      	cmp	r9, r0
 800763e:	d142      	bne.n	80076c6 <_malloc_r+0xea>
 8007640:	6821      	ldr	r1, [r4, #0]
 8007642:	4630      	mov	r0, r6
 8007644:	1a6d      	subs	r5, r5, r1
 8007646:	4629      	mov	r1, r5
 8007648:	f7ff ffa6 	bl	8007598 <sbrk_aligned>
 800764c:	3001      	adds	r0, #1
 800764e:	d03a      	beq.n	80076c6 <_malloc_r+0xea>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	442b      	add	r3, r5
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	f8d8 3000 	ldr.w	r3, [r8]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	bb62      	cbnz	r2, 80076b8 <_malloc_r+0xdc>
 800765e:	f8c8 7000 	str.w	r7, [r8]
 8007662:	e00f      	b.n	8007684 <_malloc_r+0xa8>
 8007664:	6822      	ldr	r2, [r4, #0]
 8007666:	1b52      	subs	r2, r2, r5
 8007668:	d420      	bmi.n	80076ac <_malloc_r+0xd0>
 800766a:	2a0b      	cmp	r2, #11
 800766c:	d917      	bls.n	800769e <_malloc_r+0xc2>
 800766e:	1961      	adds	r1, r4, r5
 8007670:	42a3      	cmp	r3, r4
 8007672:	6025      	str	r5, [r4, #0]
 8007674:	bf18      	it	ne
 8007676:	6059      	strne	r1, [r3, #4]
 8007678:	6863      	ldr	r3, [r4, #4]
 800767a:	bf08      	it	eq
 800767c:	f8c8 1000 	streq.w	r1, [r8]
 8007680:	5162      	str	r2, [r4, r5]
 8007682:	604b      	str	r3, [r1, #4]
 8007684:	4630      	mov	r0, r6
 8007686:	f000 f82f 	bl	80076e8 <__malloc_unlock>
 800768a:	f104 000b 	add.w	r0, r4, #11
 800768e:	1d23      	adds	r3, r4, #4
 8007690:	f020 0007 	bic.w	r0, r0, #7
 8007694:	1ac2      	subs	r2, r0, r3
 8007696:	bf1c      	itt	ne
 8007698:	1a1b      	subne	r3, r3, r0
 800769a:	50a3      	strne	r3, [r4, r2]
 800769c:	e7af      	b.n	80075fe <_malloc_r+0x22>
 800769e:	6862      	ldr	r2, [r4, #4]
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	bf0c      	ite	eq
 80076a4:	f8c8 2000 	streq.w	r2, [r8]
 80076a8:	605a      	strne	r2, [r3, #4]
 80076aa:	e7eb      	b.n	8007684 <_malloc_r+0xa8>
 80076ac:	4623      	mov	r3, r4
 80076ae:	6864      	ldr	r4, [r4, #4]
 80076b0:	e7ae      	b.n	8007610 <_malloc_r+0x34>
 80076b2:	463c      	mov	r4, r7
 80076b4:	687f      	ldr	r7, [r7, #4]
 80076b6:	e7b6      	b.n	8007626 <_malloc_r+0x4a>
 80076b8:	461a      	mov	r2, r3
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	42a3      	cmp	r3, r4
 80076be:	d1fb      	bne.n	80076b8 <_malloc_r+0xdc>
 80076c0:	2300      	movs	r3, #0
 80076c2:	6053      	str	r3, [r2, #4]
 80076c4:	e7de      	b.n	8007684 <_malloc_r+0xa8>
 80076c6:	230c      	movs	r3, #12
 80076c8:	4630      	mov	r0, r6
 80076ca:	6033      	str	r3, [r6, #0]
 80076cc:	f000 f80c 	bl	80076e8 <__malloc_unlock>
 80076d0:	e794      	b.n	80075fc <_malloc_r+0x20>
 80076d2:	6005      	str	r5, [r0, #0]
 80076d4:	e7d6      	b.n	8007684 <_malloc_r+0xa8>
 80076d6:	bf00      	nop
 80076d8:	200004bc 	.word	0x200004bc

080076dc <__malloc_lock>:
 80076dc:	4801      	ldr	r0, [pc, #4]	@ (80076e4 <__malloc_lock+0x8>)
 80076de:	f7ff bf11 	b.w	8007504 <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	200004b4 	.word	0x200004b4

080076e8 <__malloc_unlock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	@ (80076f0 <__malloc_unlock+0x8>)
 80076ea:	f7ff bf0c 	b.w	8007506 <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	200004b4 	.word	0x200004b4

080076f4 <__ssputs_r>:
 80076f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076f8:	461f      	mov	r7, r3
 80076fa:	688e      	ldr	r6, [r1, #8]
 80076fc:	4682      	mov	sl, r0
 80076fe:	42be      	cmp	r6, r7
 8007700:	460c      	mov	r4, r1
 8007702:	4690      	mov	r8, r2
 8007704:	680b      	ldr	r3, [r1, #0]
 8007706:	d82d      	bhi.n	8007764 <__ssputs_r+0x70>
 8007708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800770c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007710:	d026      	beq.n	8007760 <__ssputs_r+0x6c>
 8007712:	6965      	ldr	r5, [r4, #20]
 8007714:	6909      	ldr	r1, [r1, #16]
 8007716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800771a:	eba3 0901 	sub.w	r9, r3, r1
 800771e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007722:	1c7b      	adds	r3, r7, #1
 8007724:	444b      	add	r3, r9
 8007726:	106d      	asrs	r5, r5, #1
 8007728:	429d      	cmp	r5, r3
 800772a:	bf38      	it	cc
 800772c:	461d      	movcc	r5, r3
 800772e:	0553      	lsls	r3, r2, #21
 8007730:	d527      	bpl.n	8007782 <__ssputs_r+0x8e>
 8007732:	4629      	mov	r1, r5
 8007734:	f7ff ff52 	bl	80075dc <_malloc_r>
 8007738:	4606      	mov	r6, r0
 800773a:	b360      	cbz	r0, 8007796 <__ssputs_r+0xa2>
 800773c:	464a      	mov	r2, r9
 800773e:	6921      	ldr	r1, [r4, #16]
 8007740:	f000 faf8 	bl	8007d34 <memcpy>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800774a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800774e:	81a3      	strh	r3, [r4, #12]
 8007750:	6126      	str	r6, [r4, #16]
 8007752:	444e      	add	r6, r9
 8007754:	6026      	str	r6, [r4, #0]
 8007756:	463e      	mov	r6, r7
 8007758:	6165      	str	r5, [r4, #20]
 800775a:	eba5 0509 	sub.w	r5, r5, r9
 800775e:	60a5      	str	r5, [r4, #8]
 8007760:	42be      	cmp	r6, r7
 8007762:	d900      	bls.n	8007766 <__ssputs_r+0x72>
 8007764:	463e      	mov	r6, r7
 8007766:	4632      	mov	r2, r6
 8007768:	4641      	mov	r1, r8
 800776a:	6820      	ldr	r0, [r4, #0]
 800776c:	f000 faaa 	bl	8007cc4 <memmove>
 8007770:	2000      	movs	r0, #0
 8007772:	68a3      	ldr	r3, [r4, #8]
 8007774:	1b9b      	subs	r3, r3, r6
 8007776:	60a3      	str	r3, [r4, #8]
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	4433      	add	r3, r6
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007782:	462a      	mov	r2, r5
 8007784:	f000 fae4 	bl	8007d50 <_realloc_r>
 8007788:	4606      	mov	r6, r0
 800778a:	2800      	cmp	r0, #0
 800778c:	d1e0      	bne.n	8007750 <__ssputs_r+0x5c>
 800778e:	4650      	mov	r0, sl
 8007790:	6921      	ldr	r1, [r4, #16]
 8007792:	f7ff feb9 	bl	8007508 <_free_r>
 8007796:	230c      	movs	r3, #12
 8007798:	f8ca 3000 	str.w	r3, [sl]
 800779c:	89a3      	ldrh	r3, [r4, #12]
 800779e:	f04f 30ff 	mov.w	r0, #4294967295
 80077a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	e7e9      	b.n	800777e <__ssputs_r+0x8a>
	...

080077ac <_svfiprintf_r>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	4698      	mov	r8, r3
 80077b2:	898b      	ldrh	r3, [r1, #12]
 80077b4:	4607      	mov	r7, r0
 80077b6:	061b      	lsls	r3, r3, #24
 80077b8:	460d      	mov	r5, r1
 80077ba:	4614      	mov	r4, r2
 80077bc:	b09d      	sub	sp, #116	@ 0x74
 80077be:	d510      	bpl.n	80077e2 <_svfiprintf_r+0x36>
 80077c0:	690b      	ldr	r3, [r1, #16]
 80077c2:	b973      	cbnz	r3, 80077e2 <_svfiprintf_r+0x36>
 80077c4:	2140      	movs	r1, #64	@ 0x40
 80077c6:	f7ff ff09 	bl	80075dc <_malloc_r>
 80077ca:	6028      	str	r0, [r5, #0]
 80077cc:	6128      	str	r0, [r5, #16]
 80077ce:	b930      	cbnz	r0, 80077de <_svfiprintf_r+0x32>
 80077d0:	230c      	movs	r3, #12
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	b01d      	add	sp, #116	@ 0x74
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077de:	2340      	movs	r3, #64	@ 0x40
 80077e0:	616b      	str	r3, [r5, #20]
 80077e2:	2300      	movs	r3, #0
 80077e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e6:	2320      	movs	r3, #32
 80077e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077ec:	2330      	movs	r3, #48	@ 0x30
 80077ee:	f04f 0901 	mov.w	r9, #1
 80077f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007990 <_svfiprintf_r+0x1e4>
 80077fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077fe:	4623      	mov	r3, r4
 8007800:	469a      	mov	sl, r3
 8007802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007806:	b10a      	cbz	r2, 800780c <_svfiprintf_r+0x60>
 8007808:	2a25      	cmp	r2, #37	@ 0x25
 800780a:	d1f9      	bne.n	8007800 <_svfiprintf_r+0x54>
 800780c:	ebba 0b04 	subs.w	fp, sl, r4
 8007810:	d00b      	beq.n	800782a <_svfiprintf_r+0x7e>
 8007812:	465b      	mov	r3, fp
 8007814:	4622      	mov	r2, r4
 8007816:	4629      	mov	r1, r5
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ff6b 	bl	80076f4 <__ssputs_r>
 800781e:	3001      	adds	r0, #1
 8007820:	f000 80a7 	beq.w	8007972 <_svfiprintf_r+0x1c6>
 8007824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007826:	445a      	add	r2, fp
 8007828:	9209      	str	r2, [sp, #36]	@ 0x24
 800782a:	f89a 3000 	ldrb.w	r3, [sl]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 809f 	beq.w	8007972 <_svfiprintf_r+0x1c6>
 8007834:	2300      	movs	r3, #0
 8007836:	f04f 32ff 	mov.w	r2, #4294967295
 800783a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800783e:	f10a 0a01 	add.w	sl, sl, #1
 8007842:	9304      	str	r3, [sp, #16]
 8007844:	9307      	str	r3, [sp, #28]
 8007846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800784a:	931a      	str	r3, [sp, #104]	@ 0x68
 800784c:	4654      	mov	r4, sl
 800784e:	2205      	movs	r2, #5
 8007850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007854:	484e      	ldr	r0, [pc, #312]	@ (8007990 <_svfiprintf_r+0x1e4>)
 8007856:	f000 fa5f 	bl	8007d18 <memchr>
 800785a:	9a04      	ldr	r2, [sp, #16]
 800785c:	b9d8      	cbnz	r0, 8007896 <_svfiprintf_r+0xea>
 800785e:	06d0      	lsls	r0, r2, #27
 8007860:	bf44      	itt	mi
 8007862:	2320      	movmi	r3, #32
 8007864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007868:	0711      	lsls	r1, r2, #28
 800786a:	bf44      	itt	mi
 800786c:	232b      	movmi	r3, #43	@ 0x2b
 800786e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007872:	f89a 3000 	ldrb.w	r3, [sl]
 8007876:	2b2a      	cmp	r3, #42	@ 0x2a
 8007878:	d015      	beq.n	80078a6 <_svfiprintf_r+0xfa>
 800787a:	4654      	mov	r4, sl
 800787c:	2000      	movs	r0, #0
 800787e:	f04f 0c0a 	mov.w	ip, #10
 8007882:	9a07      	ldr	r2, [sp, #28]
 8007884:	4621      	mov	r1, r4
 8007886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800788a:	3b30      	subs	r3, #48	@ 0x30
 800788c:	2b09      	cmp	r3, #9
 800788e:	d94b      	bls.n	8007928 <_svfiprintf_r+0x17c>
 8007890:	b1b0      	cbz	r0, 80078c0 <_svfiprintf_r+0x114>
 8007892:	9207      	str	r2, [sp, #28]
 8007894:	e014      	b.n	80078c0 <_svfiprintf_r+0x114>
 8007896:	eba0 0308 	sub.w	r3, r0, r8
 800789a:	fa09 f303 	lsl.w	r3, r9, r3
 800789e:	4313      	orrs	r3, r2
 80078a0:	46a2      	mov	sl, r4
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	e7d2      	b.n	800784c <_svfiprintf_r+0xa0>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	1d19      	adds	r1, r3, #4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	9103      	str	r1, [sp, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bfbb      	ittet	lt
 80078b2:	425b      	neglt	r3, r3
 80078b4:	f042 0202 	orrlt.w	r2, r2, #2
 80078b8:	9307      	strge	r3, [sp, #28]
 80078ba:	9307      	strlt	r3, [sp, #28]
 80078bc:	bfb8      	it	lt
 80078be:	9204      	strlt	r2, [sp, #16]
 80078c0:	7823      	ldrb	r3, [r4, #0]
 80078c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80078c4:	d10a      	bne.n	80078dc <_svfiprintf_r+0x130>
 80078c6:	7863      	ldrb	r3, [r4, #1]
 80078c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ca:	d132      	bne.n	8007932 <_svfiprintf_r+0x186>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	3402      	adds	r4, #2
 80078d0:	1d1a      	adds	r2, r3, #4
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	9203      	str	r2, [sp, #12]
 80078d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007994 <_svfiprintf_r+0x1e8>
 80078e0:	2203      	movs	r2, #3
 80078e2:	4650      	mov	r0, sl
 80078e4:	7821      	ldrb	r1, [r4, #0]
 80078e6:	f000 fa17 	bl	8007d18 <memchr>
 80078ea:	b138      	cbz	r0, 80078fc <_svfiprintf_r+0x150>
 80078ec:	2240      	movs	r2, #64	@ 0x40
 80078ee:	9b04      	ldr	r3, [sp, #16]
 80078f0:	eba0 000a 	sub.w	r0, r0, sl
 80078f4:	4082      	lsls	r2, r0
 80078f6:	4313      	orrs	r3, r2
 80078f8:	3401      	adds	r4, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007900:	2206      	movs	r2, #6
 8007902:	4825      	ldr	r0, [pc, #148]	@ (8007998 <_svfiprintf_r+0x1ec>)
 8007904:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007908:	f000 fa06 	bl	8007d18 <memchr>
 800790c:	2800      	cmp	r0, #0
 800790e:	d036      	beq.n	800797e <_svfiprintf_r+0x1d2>
 8007910:	4b22      	ldr	r3, [pc, #136]	@ (800799c <_svfiprintf_r+0x1f0>)
 8007912:	bb1b      	cbnz	r3, 800795c <_svfiprintf_r+0x1b0>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	3307      	adds	r3, #7
 8007918:	f023 0307 	bic.w	r3, r3, #7
 800791c:	3308      	adds	r3, #8
 800791e:	9303      	str	r3, [sp, #12]
 8007920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007922:	4433      	add	r3, r6
 8007924:	9309      	str	r3, [sp, #36]	@ 0x24
 8007926:	e76a      	b.n	80077fe <_svfiprintf_r+0x52>
 8007928:	460c      	mov	r4, r1
 800792a:	2001      	movs	r0, #1
 800792c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007930:	e7a8      	b.n	8007884 <_svfiprintf_r+0xd8>
 8007932:	2300      	movs	r3, #0
 8007934:	f04f 0c0a 	mov.w	ip, #10
 8007938:	4619      	mov	r1, r3
 800793a:	3401      	adds	r4, #1
 800793c:	9305      	str	r3, [sp, #20]
 800793e:	4620      	mov	r0, r4
 8007940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007944:	3a30      	subs	r2, #48	@ 0x30
 8007946:	2a09      	cmp	r2, #9
 8007948:	d903      	bls.n	8007952 <_svfiprintf_r+0x1a6>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0c6      	beq.n	80078dc <_svfiprintf_r+0x130>
 800794e:	9105      	str	r1, [sp, #20]
 8007950:	e7c4      	b.n	80078dc <_svfiprintf_r+0x130>
 8007952:	4604      	mov	r4, r0
 8007954:	2301      	movs	r3, #1
 8007956:	fb0c 2101 	mla	r1, ip, r1, r2
 800795a:	e7f0      	b.n	800793e <_svfiprintf_r+0x192>
 800795c:	ab03      	add	r3, sp, #12
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	462a      	mov	r2, r5
 8007962:	4638      	mov	r0, r7
 8007964:	4b0e      	ldr	r3, [pc, #56]	@ (80079a0 <_svfiprintf_r+0x1f4>)
 8007966:	a904      	add	r1, sp, #16
 8007968:	f3af 8000 	nop.w
 800796c:	1c42      	adds	r2, r0, #1
 800796e:	4606      	mov	r6, r0
 8007970:	d1d6      	bne.n	8007920 <_svfiprintf_r+0x174>
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	065b      	lsls	r3, r3, #25
 8007976:	f53f af2d 	bmi.w	80077d4 <_svfiprintf_r+0x28>
 800797a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800797c:	e72c      	b.n	80077d8 <_svfiprintf_r+0x2c>
 800797e:	ab03      	add	r3, sp, #12
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	462a      	mov	r2, r5
 8007984:	4638      	mov	r0, r7
 8007986:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <_svfiprintf_r+0x1f4>)
 8007988:	a904      	add	r1, sp, #16
 800798a:	f000 f87d 	bl	8007a88 <_printf_i>
 800798e:	e7ed      	b.n	800796c <_svfiprintf_r+0x1c0>
 8007990:	080084c1 	.word	0x080084c1
 8007994:	080084c7 	.word	0x080084c7
 8007998:	080084cb 	.word	0x080084cb
 800799c:	00000000 	.word	0x00000000
 80079a0:	080076f5 	.word	0x080076f5

080079a4 <_printf_common>:
 80079a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a8:	4616      	mov	r6, r2
 80079aa:	4698      	mov	r8, r3
 80079ac:	688a      	ldr	r2, [r1, #8]
 80079ae:	690b      	ldr	r3, [r1, #16]
 80079b0:	4607      	mov	r7, r0
 80079b2:	4293      	cmp	r3, r2
 80079b4:	bfb8      	it	lt
 80079b6:	4613      	movlt	r3, r2
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079be:	460c      	mov	r4, r1
 80079c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079c4:	b10a      	cbz	r2, 80079ca <_printf_common+0x26>
 80079c6:	3301      	adds	r3, #1
 80079c8:	6033      	str	r3, [r6, #0]
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	0699      	lsls	r1, r3, #26
 80079ce:	bf42      	ittt	mi
 80079d0:	6833      	ldrmi	r3, [r6, #0]
 80079d2:	3302      	addmi	r3, #2
 80079d4:	6033      	strmi	r3, [r6, #0]
 80079d6:	6825      	ldr	r5, [r4, #0]
 80079d8:	f015 0506 	ands.w	r5, r5, #6
 80079dc:	d106      	bne.n	80079ec <_printf_common+0x48>
 80079de:	f104 0a19 	add.w	sl, r4, #25
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	6832      	ldr	r2, [r6, #0]
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	dc2b      	bgt.n	8007a44 <_printf_common+0xa0>
 80079ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079f0:	6822      	ldr	r2, [r4, #0]
 80079f2:	3b00      	subs	r3, #0
 80079f4:	bf18      	it	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	0692      	lsls	r2, r2, #26
 80079fa:	d430      	bmi.n	8007a5e <_printf_common+0xba>
 80079fc:	4641      	mov	r1, r8
 80079fe:	4638      	mov	r0, r7
 8007a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a04:	47c8      	blx	r9
 8007a06:	3001      	adds	r0, #1
 8007a08:	d023      	beq.n	8007a52 <_printf_common+0xae>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	6922      	ldr	r2, [r4, #16]
 8007a0e:	f003 0306 	and.w	r3, r3, #6
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	bf14      	ite	ne
 8007a16:	2500      	movne	r5, #0
 8007a18:	6833      	ldreq	r3, [r6, #0]
 8007a1a:	f04f 0600 	mov.w	r6, #0
 8007a1e:	bf08      	it	eq
 8007a20:	68e5      	ldreq	r5, [r4, #12]
 8007a22:	f104 041a 	add.w	r4, r4, #26
 8007a26:	bf08      	it	eq
 8007a28:	1aed      	subeq	r5, r5, r3
 8007a2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007a2e:	bf08      	it	eq
 8007a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bfc4      	itt	gt
 8007a38:	1a9b      	subgt	r3, r3, r2
 8007a3a:	18ed      	addgt	r5, r5, r3
 8007a3c:	42b5      	cmp	r5, r6
 8007a3e:	d11a      	bne.n	8007a76 <_printf_common+0xd2>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e008      	b.n	8007a56 <_printf_common+0xb2>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4652      	mov	r2, sl
 8007a48:	4641      	mov	r1, r8
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	47c8      	blx	r9
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d103      	bne.n	8007a5a <_printf_common+0xb6>
 8007a52:	f04f 30ff 	mov.w	r0, #4294967295
 8007a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5a:	3501      	adds	r5, #1
 8007a5c:	e7c1      	b.n	80079e2 <_printf_common+0x3e>
 8007a5e:	2030      	movs	r0, #48	@ 0x30
 8007a60:	18e1      	adds	r1, r4, r3
 8007a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a6c:	4422      	add	r2, r4
 8007a6e:	3302      	adds	r3, #2
 8007a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a74:	e7c2      	b.n	80079fc <_printf_common+0x58>
 8007a76:	2301      	movs	r3, #1
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	47c8      	blx	r9
 8007a80:	3001      	adds	r0, #1
 8007a82:	d0e6      	beq.n	8007a52 <_printf_common+0xae>
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7d9      	b.n	8007a3c <_printf_common+0x98>

08007a88 <_printf_i>:
 8007a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	7e0f      	ldrb	r7, [r1, #24]
 8007a8e:	4691      	mov	r9, r2
 8007a90:	2f78      	cmp	r7, #120	@ 0x78
 8007a92:	4680      	mov	r8, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	469a      	mov	sl, r3
 8007a98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a9e:	d807      	bhi.n	8007ab0 <_printf_i+0x28>
 8007aa0:	2f62      	cmp	r7, #98	@ 0x62
 8007aa2:	d80a      	bhi.n	8007aba <_printf_i+0x32>
 8007aa4:	2f00      	cmp	r7, #0
 8007aa6:	f000 80d1 	beq.w	8007c4c <_printf_i+0x1c4>
 8007aaa:	2f58      	cmp	r7, #88	@ 0x58
 8007aac:	f000 80b8 	beq.w	8007c20 <_printf_i+0x198>
 8007ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ab8:	e03a      	b.n	8007b30 <_printf_i+0xa8>
 8007aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007abe:	2b15      	cmp	r3, #21
 8007ac0:	d8f6      	bhi.n	8007ab0 <_printf_i+0x28>
 8007ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ac8 <_printf_i+0x40>)
 8007ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ac8:	08007b21 	.word	0x08007b21
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007ab1 	.word	0x08007ab1
 8007ad4:	08007ab1 	.word	0x08007ab1
 8007ad8:	08007ab1 	.word	0x08007ab1
 8007adc:	08007ab1 	.word	0x08007ab1
 8007ae0:	08007b35 	.word	0x08007b35
 8007ae4:	08007ab1 	.word	0x08007ab1
 8007ae8:	08007ab1 	.word	0x08007ab1
 8007aec:	08007ab1 	.word	0x08007ab1
 8007af0:	08007ab1 	.word	0x08007ab1
 8007af4:	08007c33 	.word	0x08007c33
 8007af8:	08007b5f 	.word	0x08007b5f
 8007afc:	08007bed 	.word	0x08007bed
 8007b00:	08007ab1 	.word	0x08007ab1
 8007b04:	08007ab1 	.word	0x08007ab1
 8007b08:	08007c55 	.word	0x08007c55
 8007b0c:	08007ab1 	.word	0x08007ab1
 8007b10:	08007b5f 	.word	0x08007b5f
 8007b14:	08007ab1 	.word	0x08007ab1
 8007b18:	08007ab1 	.word	0x08007ab1
 8007b1c:	08007bf5 	.word	0x08007bf5
 8007b20:	6833      	ldr	r3, [r6, #0]
 8007b22:	1d1a      	adds	r2, r3, #4
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6032      	str	r2, [r6, #0]
 8007b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b30:	2301      	movs	r3, #1
 8007b32:	e09c      	b.n	8007c6e <_printf_i+0x1e6>
 8007b34:	6833      	ldr	r3, [r6, #0]
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	6031      	str	r1, [r6, #0]
 8007b3c:	0606      	lsls	r6, r0, #24
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0xbc>
 8007b40:	681d      	ldr	r5, [r3, #0]
 8007b42:	e003      	b.n	8007b4c <_printf_i+0xc4>
 8007b44:	0645      	lsls	r5, r0, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0xb8>
 8007b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	da03      	bge.n	8007b58 <_printf_i+0xd0>
 8007b50:	232d      	movs	r3, #45	@ 0x2d
 8007b52:	426d      	negs	r5, r5
 8007b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b58:	230a      	movs	r3, #10
 8007b5a:	4858      	ldr	r0, [pc, #352]	@ (8007cbc <_printf_i+0x234>)
 8007b5c:	e011      	b.n	8007b82 <_printf_i+0xfa>
 8007b5e:	6821      	ldr	r1, [r4, #0]
 8007b60:	6833      	ldr	r3, [r6, #0]
 8007b62:	0608      	lsls	r0, r1, #24
 8007b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b68:	d402      	bmi.n	8007b70 <_printf_i+0xe8>
 8007b6a:	0649      	lsls	r1, r1, #25
 8007b6c:	bf48      	it	mi
 8007b6e:	b2ad      	uxthmi	r5, r5
 8007b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	bf14      	ite	ne
 8007b76:	230a      	movne	r3, #10
 8007b78:	2308      	moveq	r3, #8
 8007b7a:	4850      	ldr	r0, [pc, #320]	@ (8007cbc <_printf_i+0x234>)
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b82:	6866      	ldr	r6, [r4, #4]
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	60a6      	str	r6, [r4, #8]
 8007b88:	db05      	blt.n	8007b96 <_printf_i+0x10e>
 8007b8a:	6821      	ldr	r1, [r4, #0]
 8007b8c:	432e      	orrs	r6, r5
 8007b8e:	f021 0104 	bic.w	r1, r1, #4
 8007b92:	6021      	str	r1, [r4, #0]
 8007b94:	d04b      	beq.n	8007c2e <_printf_i+0x1a6>
 8007b96:	4616      	mov	r6, r2
 8007b98:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b9c:	fb03 5711 	mls	r7, r3, r1, r5
 8007ba0:	5dc7      	ldrb	r7, [r0, r7]
 8007ba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ba6:	462f      	mov	r7, r5
 8007ba8:	42bb      	cmp	r3, r7
 8007baa:	460d      	mov	r5, r1
 8007bac:	d9f4      	bls.n	8007b98 <_printf_i+0x110>
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d10b      	bne.n	8007bca <_printf_i+0x142>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	07df      	lsls	r7, r3, #31
 8007bb6:	d508      	bpl.n	8007bca <_printf_i+0x142>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	6861      	ldr	r1, [r4, #4]
 8007bbc:	4299      	cmp	r1, r3
 8007bbe:	bfde      	ittt	le
 8007bc0:	2330      	movle	r3, #48	@ 0x30
 8007bc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bca:	1b92      	subs	r2, r2, r6
 8007bcc:	6122      	str	r2, [r4, #16]
 8007bce:	464b      	mov	r3, r9
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	f8cd a000 	str.w	sl, [sp]
 8007bd8:	aa03      	add	r2, sp, #12
 8007bda:	f7ff fee3 	bl	80079a4 <_printf_common>
 8007bde:	3001      	adds	r0, #1
 8007be0:	d14a      	bne.n	8007c78 <_printf_i+0x1f0>
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295
 8007be6:	b004      	add	sp, #16
 8007be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	f043 0320 	orr.w	r3, r3, #32
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	2778      	movs	r7, #120	@ 0x78
 8007bf6:	4832      	ldr	r0, [pc, #200]	@ (8007cc0 <_printf_i+0x238>)
 8007bf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	6831      	ldr	r1, [r6, #0]
 8007c00:	061f      	lsls	r7, r3, #24
 8007c02:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c06:	d402      	bmi.n	8007c0e <_printf_i+0x186>
 8007c08:	065f      	lsls	r7, r3, #25
 8007c0a:	bf48      	it	mi
 8007c0c:	b2ad      	uxthmi	r5, r5
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	07d9      	lsls	r1, r3, #31
 8007c12:	bf44      	itt	mi
 8007c14:	f043 0320 	orrmi.w	r3, r3, #32
 8007c18:	6023      	strmi	r3, [r4, #0]
 8007c1a:	b11d      	cbz	r5, 8007c24 <_printf_i+0x19c>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	e7ad      	b.n	8007b7c <_printf_i+0xf4>
 8007c20:	4826      	ldr	r0, [pc, #152]	@ (8007cbc <_printf_i+0x234>)
 8007c22:	e7e9      	b.n	8007bf8 <_printf_i+0x170>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	f023 0320 	bic.w	r3, r3, #32
 8007c2a:	6023      	str	r3, [r4, #0]
 8007c2c:	e7f6      	b.n	8007c1c <_printf_i+0x194>
 8007c2e:	4616      	mov	r6, r2
 8007c30:	e7bd      	b.n	8007bae <_printf_i+0x126>
 8007c32:	6833      	ldr	r3, [r6, #0]
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	1d18      	adds	r0, r3, #4
 8007c38:	6961      	ldr	r1, [r4, #20]
 8007c3a:	6030      	str	r0, [r6, #0]
 8007c3c:	062e      	lsls	r6, r5, #24
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	d501      	bpl.n	8007c46 <_printf_i+0x1be>
 8007c42:	6019      	str	r1, [r3, #0]
 8007c44:	e002      	b.n	8007c4c <_printf_i+0x1c4>
 8007c46:	0668      	lsls	r0, r5, #25
 8007c48:	d5fb      	bpl.n	8007c42 <_printf_i+0x1ba>
 8007c4a:	8019      	strh	r1, [r3, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4616      	mov	r6, r2
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	e7bc      	b.n	8007bce <_printf_i+0x146>
 8007c54:	6833      	ldr	r3, [r6, #0]
 8007c56:	2100      	movs	r1, #0
 8007c58:	1d1a      	adds	r2, r3, #4
 8007c5a:	6032      	str	r2, [r6, #0]
 8007c5c:	681e      	ldr	r6, [r3, #0]
 8007c5e:	6862      	ldr	r2, [r4, #4]
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 f859 	bl	8007d18 <memchr>
 8007c66:	b108      	cbz	r0, 8007c6c <_printf_i+0x1e4>
 8007c68:	1b80      	subs	r0, r0, r6
 8007c6a:	6060      	str	r0, [r4, #4]
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	2300      	movs	r3, #0
 8007c72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c76:	e7aa      	b.n	8007bce <_printf_i+0x146>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	47d0      	blx	sl
 8007c82:	3001      	adds	r0, #1
 8007c84:	d0ad      	beq.n	8007be2 <_printf_i+0x15a>
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	079b      	lsls	r3, r3, #30
 8007c8a:	d413      	bmi.n	8007cb4 <_printf_i+0x22c>
 8007c8c:	68e0      	ldr	r0, [r4, #12]
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	4298      	cmp	r0, r3
 8007c92:	bfb8      	it	lt
 8007c94:	4618      	movlt	r0, r3
 8007c96:	e7a6      	b.n	8007be6 <_printf_i+0x15e>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	47d0      	blx	sl
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d09d      	beq.n	8007be2 <_printf_i+0x15a>
 8007ca6:	3501      	adds	r5, #1
 8007ca8:	68e3      	ldr	r3, [r4, #12]
 8007caa:	9903      	ldr	r1, [sp, #12]
 8007cac:	1a5b      	subs	r3, r3, r1
 8007cae:	42ab      	cmp	r3, r5
 8007cb0:	dcf2      	bgt.n	8007c98 <_printf_i+0x210>
 8007cb2:	e7eb      	b.n	8007c8c <_printf_i+0x204>
 8007cb4:	2500      	movs	r5, #0
 8007cb6:	f104 0619 	add.w	r6, r4, #25
 8007cba:	e7f5      	b.n	8007ca8 <_printf_i+0x220>
 8007cbc:	080084d2 	.word	0x080084d2
 8007cc0:	080084e3 	.word	0x080084e3

08007cc4 <memmove>:
 8007cc4:	4288      	cmp	r0, r1
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	eb01 0402 	add.w	r4, r1, r2
 8007ccc:	d902      	bls.n	8007cd4 <memmove+0x10>
 8007cce:	4284      	cmp	r4, r0
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	d807      	bhi.n	8007ce4 <memmove+0x20>
 8007cd4:	1e43      	subs	r3, r0, #1
 8007cd6:	42a1      	cmp	r1, r4
 8007cd8:	d008      	beq.n	8007cec <memmove+0x28>
 8007cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ce2:	e7f8      	b.n	8007cd6 <memmove+0x12>
 8007ce4:	4601      	mov	r1, r0
 8007ce6:	4402      	add	r2, r0
 8007ce8:	428a      	cmp	r2, r1
 8007cea:	d100      	bne.n	8007cee <memmove+0x2a>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cf6:	e7f7      	b.n	8007ce8 <memmove+0x24>

08007cf8 <_sbrk_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	4d05      	ldr	r5, [pc, #20]	@ (8007d14 <_sbrk_r+0x1c>)
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f7f9 f9a6 	bl	8001054 <_sbrk>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_sbrk_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_sbrk_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	200004b0 	.word	0x200004b0

08007d18 <memchr>:
 8007d18:	4603      	mov	r3, r0
 8007d1a:	b510      	push	{r4, lr}
 8007d1c:	b2c9      	uxtb	r1, r1
 8007d1e:	4402      	add	r2, r0
 8007d20:	4293      	cmp	r3, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	d101      	bne.n	8007d2a <memchr+0x12>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e003      	b.n	8007d32 <memchr+0x1a>
 8007d2a:	7804      	ldrb	r4, [r0, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	428c      	cmp	r4, r1
 8007d30:	d1f6      	bne.n	8007d20 <memchr+0x8>
 8007d32:	bd10      	pop	{r4, pc}

08007d34 <memcpy>:
 8007d34:	440a      	add	r2, r1
 8007d36:	4291      	cmp	r1, r2
 8007d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d3c:	d100      	bne.n	8007d40 <memcpy+0xc>
 8007d3e:	4770      	bx	lr
 8007d40:	b510      	push	{r4, lr}
 8007d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d46:	4291      	cmp	r1, r2
 8007d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4c:	d1f9      	bne.n	8007d42 <memcpy+0xe>
 8007d4e:	bd10      	pop	{r4, pc}

08007d50 <_realloc_r>:
 8007d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d54:	4607      	mov	r7, r0
 8007d56:	4614      	mov	r4, r2
 8007d58:	460d      	mov	r5, r1
 8007d5a:	b921      	cbnz	r1, 8007d66 <_realloc_r+0x16>
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d62:	f7ff bc3b 	b.w	80075dc <_malloc_r>
 8007d66:	b92a      	cbnz	r2, 8007d74 <_realloc_r+0x24>
 8007d68:	f7ff fbce 	bl	8007508 <_free_r>
 8007d6c:	4625      	mov	r5, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	f000 f81a 	bl	8007dac <_malloc_usable_size_r>
 8007d78:	4284      	cmp	r4, r0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	d802      	bhi.n	8007d84 <_realloc_r+0x34>
 8007d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d82:	d8f4      	bhi.n	8007d6e <_realloc_r+0x1e>
 8007d84:	4621      	mov	r1, r4
 8007d86:	4638      	mov	r0, r7
 8007d88:	f7ff fc28 	bl	80075dc <_malloc_r>
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	b908      	cbnz	r0, 8007d94 <_realloc_r+0x44>
 8007d90:	4645      	mov	r5, r8
 8007d92:	e7ec      	b.n	8007d6e <_realloc_r+0x1e>
 8007d94:	42b4      	cmp	r4, r6
 8007d96:	4622      	mov	r2, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	bf28      	it	cs
 8007d9c:	4632      	movcs	r2, r6
 8007d9e:	f7ff ffc9 	bl	8007d34 <memcpy>
 8007da2:	4629      	mov	r1, r5
 8007da4:	4638      	mov	r0, r7
 8007da6:	f7ff fbaf 	bl	8007508 <_free_r>
 8007daa:	e7f1      	b.n	8007d90 <_realloc_r+0x40>

08007dac <_malloc_usable_size_r>:
 8007dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db0:	1f18      	subs	r0, r3, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bfbc      	itt	lt
 8007db6:	580b      	ldrlt	r3, [r1, r0]
 8007db8:	18c0      	addlt	r0, r0, r3
 8007dba:	4770      	bx	lr

08007dbc <_init>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr

08007dc8 <_fini>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr
