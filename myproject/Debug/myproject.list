
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08005b30  08005b30  00006b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  000081f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ff8  08005ff8  00006ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  000081f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006004  08006004  00007004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08006008  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001f8  08006200  000081f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08006200  00008370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001895  00000000  00000000  00008221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aa5  00000000  00000000  00009ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  0000a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000234  00000000  00000000  0000a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cb2  00000000  00000000  0000aacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049b7  00000000  00000000  0000e77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bdd0  00000000  00000000  00013135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001ef05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d20  00000000  00000000  0001ef48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00020c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f8 	.word	0x200001f8
 800014c:	00000000 	.word	0x00000000
 8000150:	08005b14 	.word	0x08005b14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001fc 	.word	0x200001fc
 800016c:	08005b14 	.word	0x08005b14

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__aeabi_f2iz>:
 8001004:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001008:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800100c:	d30f      	bcc.n	800102e <__aeabi_f2iz+0x2a>
 800100e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001012:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001016:	d90d      	bls.n	8001034 <__aeabi_f2iz+0x30>
 8001018:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800101c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001020:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001024:	fa23 f002 	lsr.w	r0, r3, r2
 8001028:	bf18      	it	ne
 800102a:	4240      	negne	r0, r0
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr
 8001034:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001038:	d101      	bne.n	800103e <__aeabi_f2iz+0x3a>
 800103a:	0242      	lsls	r2, r0, #9
 800103c:	d105      	bne.n	800104a <__aeabi_f2iz+0x46>
 800103e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001042:	bf08      	it	eq
 8001044:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001048:	4770      	bx	lr
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4770      	bx	lr

08001050 <adc_config>:
 *      Author: P.HIEU
 */

#include "adc.h"

void adc_config(void){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
	// turn on clock for GPIOA and ADC1
	RCC_APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <adc_config+0x98>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <adc_config+0x98>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6013      	str	r3, [r2, #0]

	//configure PA1 to analog mode
	GPIOA_CRL &= ~(0xF << (1 * 4));
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <adc_config+0x9c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <adc_config+0x9c>)
 8001068:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800106c:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (GPIO_CRL_CNF_MODE_1 << (1 * 4));
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <adc_config+0x9c>)
 8001070:	4a1e      	ldr	r2, [pc, #120]	@ (80010ec <adc_config+0x9c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6013      	str	r3, [r2, #0]

	ADC1_CR2 |= ADC_CR2_EXTSEL;
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <adc_config+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1d      	ldr	r2, [pc, #116]	@ (80010f0 <adc_config+0xa0>)
 800107c:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8001080:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <adc_config+0x98>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a18      	ldr	r2, [pc, #96]	@ (80010e8 <adc_config+0x98>)
 8001088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108c:	6013      	str	r3, [r2, #0]
	//configure ADC1
	ADC1_SMPR2 |= ADC_SMPR2_SMP1;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <adc_config+0xa4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <adc_config+0xa4>)
 8001094:	f043 0318 	orr.w	r3, r3, #24
 8001098:	6013      	str	r3, [r2, #0]
	ADC1_SQR1 |= ADC_SQR1_L;
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <adc_config+0xa8>)
 800109c:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <adc_config+0xa8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6013      	str	r3, [r2, #0]
	ADC1_SQR3 |= ADC_SQR3_SQ1;
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <adc_config+0xac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <adc_config+0xac>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6013      	str	r3, [r2, #0]
//	ADC1_CR2 |= ADC_CR2_CONT;
	ADC1_CR2 |= ADC_CR2_ADON;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <adc_config+0xa0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <adc_config+0xa0>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]
	for (volatile int i = 0; i < 10000; i++);
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	e002      	b.n	80010c6 <adc_config+0x76>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010cc:	4293      	cmp	r3, r2
 80010ce:	ddf7      	ble.n	80010c0 <adc_config+0x70>
	ADC1_CR2 |= ADC_CR2_ADON;
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <adc_config+0xa0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <adc_config+0xa0>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021018 	.word	0x40021018
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40012408 	.word	0x40012408
 80010f4:	40012410 	.word	0x40012410
 80010f8:	4001242c 	.word	0x4001242c
 80010fc:	40012434 	.word	0x40012434

08001100 <adc_read>:
uint16_t adc_read(void){
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	ADC1_CR2 |= ADC_CR2_ADON;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <adc_read+0x38>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <adc_read+0x38>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]
	ADC1_CR2 |= ADC_CR2_SWSTART;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <adc_read+0x38>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <adc_read+0x38>)
 8001116:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800111a:	6013      	str	r3, [r2, #0]
	while(!(ADC1_SR & ADC_SR_EOC));
 800111c:	bf00      	nop
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <adc_read+0x3c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f9      	beq.n	800111e <adc_read+0x1e>
	return ADC1_DR;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <adc_read+0x40>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40012408 	.word	0x40012408
 800113c:	40012400 	.word	0x40012400
 8001140:	4001244c 	.word	0x4001244c
 8001144:	00000000 	.word	0x00000000

08001148 <calculate_temperature>:
float calculate_temperature(void){
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
	uint16_t adc_value = adc_read();
 800114e:	f7ff ffd7 	bl	8001100 <adc_read>
 8001152:	4603      	mov	r3, r0
 8001154:	81fb      	strh	r3, [r7, #14]
	float Vout = (float)(adc_value * Vcc) / 4095;
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f963 	bl	8000424 <__aeabi_i2d>
 800115e:	a33c      	add	r3, pc, #240	@ (adr r3, 8001250 <calculate_temperature+0x108>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff f9c8 	bl	80004f8 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fc9a 	bl	8000aa8 <__aeabi_d2f>
 8001174:	4603      	mov	r3, r0
 8001176:	4940      	ldr	r1, [pc, #256]	@ (8001278 <calculate_temperature+0x130>)
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fea7 	bl	8000ecc <__aeabi_fdiv>
 800117e:	4603      	mov	r3, r0
 8001180:	60bb      	str	r3, [r7, #8]
	float Rntc = (R1 * (Vcc - Vout)) / Vout;
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f7ff f960 	bl	8000448 <__aeabi_f2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	a130      	add	r1, pc, #192	@ (adr r1, 8001250 <calculate_temperature+0x108>)
 800118e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001192:	f7fe fff9 	bl	8000188 <__aeabi_dsub>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	a32e      	add	r3, pc, #184	@ (adr r3, 8001258 <calculate_temperature+0x110>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff f9a8 	bl	80004f8 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
 80011b0:	68b8      	ldr	r0, [r7, #8]
 80011b2:	f7ff f949 	bl	8000448 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fac5 	bl	800074c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc6d 	bl	8000aa8 <__aeabi_d2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	607b      	str	r3, [r7, #4]
	float T = 1 / ((log(Rntc/R0) / beta) + (1 / (T0 + 273.15)));
 80011d2:	492a      	ldr	r1, [pc, #168]	@ (800127c <calculate_temperature+0x134>)
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fe79 	bl	8000ecc <__aeabi_fdiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f933 	bl	8000448 <__aeabi_f2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f004 faa9 	bl	8005740 <log>
 80011ee:	a31c      	add	r3, pc, #112	@ (adr r3, 8001260 <calculate_temperature+0x118>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff faaa 	bl	800074c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	a319      	add	r3, pc, #100	@ (adr r3, 8001268 <calculate_temperature+0x120>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7fe ffc1 	bl	800018c <__adddf3>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	491b      	ldr	r1, [pc, #108]	@ (8001280 <calculate_temperature+0x138>)
 8001214:	f7ff fa9a 	bl	800074c <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc42 	bl	8000aa8 <__aeabi_d2f>
 8001224:	4603      	mov	r3, r0
 8001226:	603b      	str	r3, [r7, #0]
	return T - 273.15;
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f7ff f90d 	bl	8000448 <__aeabi_f2d>
 800122e:	a310      	add	r3, pc, #64	@ (adr r3, 8001270 <calculate_temperature+0x128>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7fe ffa8 	bl	8000188 <__aeabi_dsub>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fc32 	bl	8000aa8 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bdb0      	pop	{r4, r5, r7, pc}
 800124e:	bf00      	nop
 8001250:	66666666 	.word	0x66666666
 8001254:	400a6666 	.word	0x400a6666
 8001258:	00000000 	.word	0x00000000
 800125c:	40c38800 	.word	0x40c38800
 8001260:	00000000 	.word	0x00000000
 8001264:	40aa6800 	.word	0x40aa6800
 8001268:	dcb5db83 	.word	0xdcb5db83
 800126c:	3f6b79e1 	.word	0x3f6b79e1
 8001270:	66666666 	.word	0x66666666
 8001274:	40711266 	.word	0x40711266
 8001278:	457ff000 	.word	0x457ff000
 800127c:	461c4000 	.word	0x461c4000
 8001280:	3ff00000 	.word	0x3ff00000

08001284 <core_clock_config>:
 *  Created on: Mar 21, 2025
 *      Author: P.HIEU
 */
#include "core_clock.h"

void core_clock_config(void){
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	//Enable HSI
	RCC_CR |= RCC_CR_HSION;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <core_clock_config+0x50>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	@ (80012d4 <core_clock_config+0x50>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]
	while (!(RCC_CR & RCC_CR_HSIRDY));
 8001294:	bf00      	nop
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <core_clock_config+0x50>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f9      	beq.n	8001296 <core_clock_config+0x12>
	//Configure HSI as Sysclk, HCLK = 8mhz
	RCC_CFGR &= ~(3 << 0 | 0xF << 4 | 7 << 8 | 7 << 11); //clear SW and HPRE and PPRE1
 80012a2:	4b0d      	ldr	r3, [pc, #52]	@ (80012d8 <core_clock_config+0x54>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <core_clock_config+0x54>)
 80012a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80012ac:	f023 0333 	bic.w	r3, r3, #51	@ 0x33
 80012b0:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= RCC_CFGR_SW; // SW = 00: HSI as sysclk
 80012b2:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <core_clock_config+0x54>)
 80012b4:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <core_clock_config+0x54>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6013      	str	r3, [r2, #0]
	while ((RCC_CFGR & (3 << 2)) != RCC_CFGR_SWS); // wait for SWS = 00
 80012ba:	bf00      	nop
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <core_clock_config+0x54>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f9      	bne.n	80012bc <core_clock_config+0x38>
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40021004 	.word	0x40021004

080012dc <Flash_Unlock>:
 *      Author: P.HIEU
 */

#include "flash.h"

void Flash_Unlock(void){
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	if (FLASH_CR & FLASH_CR_LOCK){
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <Flash_Unlock+0x34>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <Flash_Unlock+0x2a>
		FLASH_KEYR = FLASH_KEY1;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <Flash_Unlock+0x38>)
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <Flash_Unlock+0x3c>)
 80012f0:	601a      	str	r2, [r3, #0]
		FLASH_KEYR = FLASH_KEY2;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <Flash_Unlock+0x38>)
 80012f4:	4a09      	ldr	r2, [pc, #36]	@ (800131c <Flash_Unlock+0x40>)
 80012f6:	601a      	str	r2, [r3, #0]
		while(FLASH_CR & FLASH_CR_LOCK);
 80012f8:	bf00      	nop
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <Flash_Unlock+0x34>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <Flash_Unlock+0x1e>
	}
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40022010 	.word	0x40022010
 8001314:	40022004 	.word	0x40022004
 8001318:	45670123 	.word	0x45670123
 800131c:	cdef89ab 	.word	0xcdef89ab

08001320 <Flash_Lock>:

void Flash_Lock(void){
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	FLASH_CR |= FLASH_CR_LOCK;
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <Flash_Lock+0x18>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a03      	ldr	r2, [pc, #12]	@ (8001338 <Flash_Lock+0x18>)
 800132a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40022010 	.word	0x40022010

0800133c <Flash_ErasePage>:

void Flash_ErasePage(uint32_t page){
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	while(FLASH_CR & FLASH_CR_LOCK);
 8001344:	bf00      	nop
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <Flash_ErasePage+0x58>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <Flash_ErasePage+0xa>
	FLASH_CR |= FLASH_CR_PER;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <Flash_ErasePage+0x58>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <Flash_ErasePage+0x58>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6013      	str	r3, [r2, #0]
	FLASH_AR = page;
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <Flash_ErasePage+0x5c>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
	FLASH_CR |= FLASH_CR_STRT;
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <Flash_ErasePage+0x58>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <Flash_ErasePage+0x58>)
 800136a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136e:	6013      	str	r3, [r2, #0]
	while(FLASH_SR & FLASH_SR_BSY);
 8001370:	bf00      	nop
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <Flash_ErasePage+0x60>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <Flash_ErasePage+0x36>
	FLASH_CR &= ~FLASH_CR_PER;
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <Flash_ErasePage+0x58>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <Flash_ErasePage+0x58>)
 8001384:	f023 0302 	bic.w	r3, r3, #2
 8001388:	6013      	str	r3, [r2, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40022010 	.word	0x40022010
 8001398:	40022014 	.word	0x40022014
 800139c:	4002200c 	.word	0x4002200c

080013a0 <Flash_Write>:

void Flash_Write(uint32_t address, uint16_t data){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
	while(FLASH_CR & FLASH_CR_LOCK);
 80013ac:	bf00      	nop
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <Flash_Write+0x50>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f9      	bne.n	80013ae <Flash_Write+0xe>
	FLASH_CR |= FLASH_CR_PG;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <Flash_Write+0x50>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <Flash_Write+0x50>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]
	*(volatile uint16_t *)address = data;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	801a      	strh	r2, [r3, #0]
	while(FLASH_SR & FLASH_SR_BSY);
 80013cc:	bf00      	nop
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <Flash_Write+0x54>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <Flash_Write+0x2e>
	FLASH_CR &= ~FLASH_CR_PG;
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <Flash_Write+0x50>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <Flash_Write+0x50>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40022010 	.word	0x40022010
 80013f4:	4002200c 	.word	0x4002200c

080013f8 <Flash_WriteString>:

void Flash_WriteString(uint32_t address, const char* str) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	FLASH_ACR &= ~FLASH_ACR_LATENCY;
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <Flash_WriteString+0x7c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <Flash_WriteString+0x7c>)
 8001408:	f023 0307 	bic.w	r3, r3, #7
 800140c:	6013      	str	r3, [r2, #0]
    uint16_t data;
    uint32_t i;
    uint32_t len = strlen(str) + 1;
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f7fe feae 	bl	8000170 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	3301      	adds	r3, #1
 8001418:	613b      	str	r3, [r7, #16]

    Flash_Unlock();
 800141a:	f7ff ff5f 	bl	80012dc <Flash_Unlock>
    Flash_ErasePage(address);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff8c 	bl	800133c <Flash_ErasePage>

    for (i = 0; i < len; i += 2) {
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e01a      	b.n	8001460 <Flash_WriteString+0x68>
        data = str[i] | (str[i + 1] << 8);
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b21a      	sxth	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3301      	adds	r3, #1
 8001438:	6839      	ldr	r1, [r7, #0]
 800143a:	440b      	add	r3, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b21b      	sxth	r3, r3
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	81fb      	strh	r3, [r7, #14]
        Flash_Write(address + i, data);
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4413      	add	r3, r2
 8001450:	89fa      	ldrh	r2, [r7, #14]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ffa3 	bl	80013a0 <Flash_Write>
    for (i = 0; i < len; i += 2) {
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3302      	adds	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3e0      	bcc.n	800142a <Flash_WriteString+0x32>
    }

    Flash_Lock();
 8001468:	f7ff ff5a 	bl	8001320 <Flash_Lock>
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40022000 	.word	0x40022000

08001478 <Timer3_Init>:
void EXTI0_Init(void){
	EXTI_IMR |= (1 << 0);
	NVIC_ISER0 |= (1 << 6);
}

void Timer3_Init(void) {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
    RCC_APB1ENR |= RCC_APB1ENR_TIM3EN;  // turn on clock for TIM3
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <Timer3_Init+0x60>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <Timer3_Init+0x60>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6013      	str	r3, [r2, #0]

    TIM3_PSC = 8000 - 1;    // divide into 1kHz
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <Timer3_Init+0x64>)
 800148a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800148e:	601a      	str	r2, [r3, #0]
    TIM3_ARR = 1000 - 1;    //1s
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <Timer3_Init+0x68>)
 8001492:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001496:	601a      	str	r2, [r3, #0]
    TIM3_CNT = 0;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <Timer3_Init+0x6c>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
    TIM3_DIER |= TIM3_DIER_UIE;
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <Timer3_Init+0x70>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <Timer3_Init+0x70>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]
    TIM3_SR &= ~(1 << 0);
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <Timer3_Init+0x74>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <Timer3_Init+0x74>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6013      	str	r3, [r2, #0]
    NVIC_ISER0 |= (1 << 29);
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <Timer3_Init+0x78>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <Timer3_Init+0x78>)
 80014bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014c0:	6013      	str	r3, [r2, #0]
//    NVIC_IPR7 |= (1 << (1 * 8 + 4));
    TIM3_CR1 |= TIM3_CR1_CEN; // start Timer
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <Timer3_Init+0x7c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <Timer3_Init+0x7c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	4002101c 	.word	0x4002101c
 80014dc:	40000428 	.word	0x40000428
 80014e0:	4000042c 	.word	0x4000042c
 80014e4:	40000424 	.word	0x40000424
 80014e8:	4000040c 	.word	0x4000040c
 80014ec:	40000410 	.word	0x40000410
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	40000400 	.word	0x40000400

080014f8 <Timer4_Init>:

void Timer4_Init(void) {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
	GPIOA_CRL &= ~(0xF << 4 * 4);
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <Timer4_Init+0x84>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1e      	ldr	r2, [pc, #120]	@ (800157c <Timer4_Init+0x84>)
 8001502:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001506:	6013      	str	r3, [r2, #0]
	GPIOA_CRL &= ~(0xF << 5 * 4);
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <Timer4_Init+0x84>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1b      	ldr	r2, [pc, #108]	@ (800157c <Timer4_Init+0x84>)
 800150e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001512:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (1 << 4 * 4);
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <Timer4_Init+0x84>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <Timer4_Init+0x84>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800151e:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (1 << 5 * 4);
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <Timer4_Init+0x84>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a15      	ldr	r2, [pc, #84]	@ (800157c <Timer4_Init+0x84>)
 8001526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800152a:	6013      	str	r3, [r2, #0]
    RCC_APB1ENR |= RCC_APB1ENR_TIM4EN;  // turn on clock for TIM4
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <Timer4_Init+0x88>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <Timer4_Init+0x88>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6013      	str	r3, [r2, #0]
    TIM4_PSC = 8000 - 1;    // divide into 1kHz
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <Timer4_Init+0x8c>)
 800153a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800153e:	601a      	str	r2, [r3, #0]
    TIM4_ARR = 1000 - 1;    //1s
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <Timer4_Init+0x90>)
 8001542:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001546:	601a      	str	r2, [r3, #0]
    TIM4_CNT = 0;
 8001548:	4b10      	ldr	r3, [pc, #64]	@ (800158c <Timer4_Init+0x94>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    TIM4_DIER |= TIM4_DIER_UIE;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <Timer4_Init+0x98>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <Timer4_Init+0x98>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]
    TIM4_SR &= ~(1 << 0);
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <Timer4_Init+0x9c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <Timer4_Init+0x9c>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]
//    NVIC_IPR7 |= (10 << (2 * 8 + 4));
    NVIC_ISER0 |= (1 << 30);
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <Timer4_Init+0xa0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <Timer4_Init+0xa0>)
 800156c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001570:	6013      	str	r3, [r2, #0]

//    TIM4_CR1 |= TIM4_CR1_CEN; // start Timer
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40010800 	.word	0x40010800
 8001580:	4002101c 	.word	0x4002101c
 8001584:	40000828 	.word	0x40000828
 8001588:	4000082c 	.word	0x4000082c
 800158c:	40000824 	.word	0x40000824
 8001590:	4000080c 	.word	0x4000080c
 8001594:	40000810 	.word	0x40000810
 8001598:	e000e100 	.word	0xe000e100

0800159c <Timer1_Init>:

void Timer1_Init(void) {
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
    RCC_APB2ENR |= RCC_APB2ENR_TIM1EN;  // turn on TIM5
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <Timer1_Init+0x3c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <Timer1_Init+0x3c>)
 80015a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015aa:	6013      	str	r3, [r2, #0]

    TIM1_PSC = 8000 - 1;    // divide into 1kHz
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <Timer1_Init+0x40>)
 80015ae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80015b2:	601a      	str	r2, [r3, #0]
    TIM1_ARR = 5000 - 1;    //5s
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <Timer1_Init+0x44>)
 80015b6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80015ba:	601a      	str	r2, [r3, #0]
    TIM1_CNT = 0;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <Timer1_Init+0x48>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    TIM1_SR &= ~(1 << 0);
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <Timer1_Init+0x4c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <Timer1_Init+0x4c>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6013      	str	r3, [r2, #0]
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021018 	.word	0x40021018
 80015dc:	40012c28 	.word	0x40012c28
 80015e0:	40012c2c 	.word	0x40012c2c
 80015e4:	40012c24 	.word	0x40012c24
 80015e8:	40012c10 	.word	0x40012c10

080015ec <delay_ms>:
#define LCD_D4      11
#define LCD_D5      12
#define LCD_D6      13
#define LCD_D7      14

void delay_ms(uint32_t ms) {
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < (2000 * ms); i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e002      	b.n	8001600 <delay_ms+0x14>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d3f4      	bcc.n	80015fa <delay_ms+0xe>
    }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <gpio_writebit>:

void gpio_writebit(int pin, uint8_t State){
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	70fb      	strb	r3, [r7, #3]
	if (State) {
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00a      	beq.n	8001644 <gpio_writebit+0x28>
	        GPIOA_ODR |= (1 << pin);
 800162e:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <gpio_writebit+0x48>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2101      	movs	r1, #1
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	fa01 f202 	lsl.w	r2, r1, r2
 800163a:	4611      	mov	r1, r2
 800163c:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <gpio_writebit+0x48>)
 800163e:	430b      	orrs	r3, r1
 8001640:	6013      	str	r3, [r2, #0]
	} else {
	        GPIOA_ODR &= ~(1 << pin);
	}
}
 8001642:	e00a      	b.n	800165a <gpio_writebit+0x3e>
	        GPIOA_ODR &= ~(1 << pin);
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <gpio_writebit+0x48>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	fa01 f202 	lsl.w	r2, r1, r2
 8001650:	43d2      	mvns	r2, r2
 8001652:	4611      	mov	r1, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <gpio_writebit+0x48>)
 8001656:	400b      	ands	r3, r1
 8001658:	6013      	str	r3, [r2, #0]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	4001080c 	.word	0x4001080c

08001668 <GPIO_LCD_Config>:

void GPIO_LCD_Config(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	//configure GPIOA
	RCC_APB2ENR |= RCC_APB2ENR_IOPAEN;
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <GPIO_LCD_Config+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <GPIO_LCD_Config+0x64>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)) | (0xF << (2 * 4)) | (0xF << (3 * 4))
 8001678:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <GPIO_LCD_Config+0x68>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <GPIO_LCD_Config+0x68>)
 800167e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001682:	6013      	str	r3, [r2, #0]
			     | (0xF << (4 * 4)) | (0xF << (5 * 4)) | (0xF << (6 * 4)));
	GPIOA_CRH |= ((0x1 << (0 * 4)) | (0x1 << (1 * 4)) | (0x1 << (2 * 4)) | (0x1 << (3 * 4))
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <GPIO_LCD_Config+0x68>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4911      	ldr	r1, [pc, #68]	@ (80016d0 <GPIO_LCD_Config+0x68>)
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <GPIO_LCD_Config+0x6c>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
				     | (0x1 << (4 * 4)) | (0x1 << (5 * 4)) | (0x1 << (6 * 4)));

    /*Configure GPIO pin Output Level */
    gpio_writebit(LCD_D4, 0);
 8001690:	2100      	movs	r1, #0
 8001692:	200b      	movs	r0, #11
 8001694:	f7ff ffc2 	bl	800161c <gpio_writebit>
    gpio_writebit(LCD_D5, 0);
 8001698:	2100      	movs	r1, #0
 800169a:	200c      	movs	r0, #12
 800169c:	f7ff ffbe 	bl	800161c <gpio_writebit>
    gpio_writebit(LCD_D6, 0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	200d      	movs	r0, #13
 80016a4:	f7ff ffba 	bl	800161c <gpio_writebit>
    gpio_writebit(LCD_D7, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	200e      	movs	r0, #14
 80016ac:	f7ff ffb6 	bl	800161c <gpio_writebit>
    gpio_writebit(LCD_RS, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2008      	movs	r0, #8
 80016b4:	f7ff ffb2 	bl	800161c <gpio_writebit>
    gpio_writebit(LCD_RW, 0);
 80016b8:	2100      	movs	r1, #0
 80016ba:	2009      	movs	r0, #9
 80016bc:	f7ff ffae 	bl	800161c <gpio_writebit>
    gpio_writebit(LCD_EN, 0);
 80016c0:	2100      	movs	r1, #0
 80016c2:	200a      	movs	r0, #10
 80016c4:	f7ff ffaa 	bl	800161c <gpio_writebit>

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021018 	.word	0x40021018
 80016d0:	40010804 	.word	0x40010804
 80016d4:	01111111 	.word	0x01111111

080016d8 <LCD_Enable>:
void LCD_Enable(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    gpio_writebit(LCD_EN, 1);
 80016dc:	2101      	movs	r1, #1
 80016de:	200a      	movs	r0, #10
 80016e0:	f7ff ff9c 	bl	800161c <gpio_writebit>
//    delay_ms(1);
    gpio_writebit(LCD_EN, 0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	200a      	movs	r0, #10
 80016e8:	f7ff ff98 	bl	800161c <gpio_writebit>
//    delay_ms(1);
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <LCD_Send4Bit>:


void LCD_Send4Bit(unsigned char Data)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  gpio_writebit(LCD_D4, Data & 0x01);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	200b      	movs	r0, #11
 8001706:	f7ff ff89 	bl	800161c <gpio_writebit>
  gpio_writebit(LCD_D5, (Data>>1)&1);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	4619      	mov	r1, r3
 8001718:	200c      	movs	r0, #12
 800171a:	f7ff ff7f 	bl	800161c <gpio_writebit>
  gpio_writebit(LCD_D6, (Data>>2)&1);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4619      	mov	r1, r3
 800172c:	200d      	movs	r0, #13
 800172e:	f7ff ff75 	bl	800161c <gpio_writebit>
  gpio_writebit(LCD_D7, (Data>>3)&1);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	200e      	movs	r0, #14
 8001742:	f7ff ff6b 	bl	800161c <gpio_writebit>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <LCD_SendCommand>:


void LCD_SendCommand(unsigned char command)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  LCD_Send4Bit(command >> 4);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffc6 	bl	80016f0 <LCD_Send4Bit>
  LCD_Enable();
 8001764:	f7ff ffb8 	bl	80016d8 <LCD_Enable>
  LCD_Send4Bit(command);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffc0 	bl	80016f0 <LCD_Send4Bit>
  LCD_Enable();
 8001770:	f7ff ffb2 	bl	80016d8 <LCD_Enable>


}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <LCD_Clear>:


void LCD_Clear()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  LCD_SendCommand(0x01);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff ffe4 	bl	800174e <LCD_SendCommand>
  delay_ms(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff ff30 	bl	80015ec <delay_ms>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <LCD_Init>:


void LCD_Init()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  GPIO_LCD_Config();
 8001794:	f7ff ff68 	bl	8001668 <GPIO_LCD_Config>
  LCD_Send4Bit(0x00);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff ffa9 	bl	80016f0 <LCD_Send4Bit>
  gpio_writebit(LCD_RS, 0);
 800179e:	2100      	movs	r1, #0
 80017a0:	2008      	movs	r0, #8
 80017a2:	f7ff ff3b 	bl	800161c <gpio_writebit>
  LCD_Send4Bit(0x03);
 80017a6:	2003      	movs	r0, #3
 80017a8:	f7ff ffa2 	bl	80016f0 <LCD_Send4Bit>
  LCD_Enable();
 80017ac:	f7ff ff94 	bl	80016d8 <LCD_Enable>
  LCD_Enable();
 80017b0:	f7ff ff92 	bl	80016d8 <LCD_Enable>
  LCD_Enable();
 80017b4:	f7ff ff90 	bl	80016d8 <LCD_Enable>
  LCD_Send4Bit(0x02);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff ff99 	bl	80016f0 <LCD_Send4Bit>
  LCD_Enable();
 80017be:	f7ff ff8b 	bl	80016d8 <LCD_Enable>
  LCD_SendCommand(0x28); //turn  on 4 bits protocol
 80017c2:	2028      	movs	r0, #40	@ 0x28
 80017c4:	f7ff ffc3 	bl	800174e <LCD_SendCommand>
  LCD_SendCommand(0x0E); //enable display
 80017c8:	200e      	movs	r0, #14
 80017ca:	f7ff ffc0 	bl	800174e <LCD_SendCommand>
  LCD_SendCommand(0x06);
 80017ce:	2006      	movs	r0, #6
 80017d0:	f7ff ffbd 	bl	800174e <LCD_SendCommand>
  LCD_SendCommand(0x01); // clear all
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff ffba 	bl	800174e <LCD_SendCommand>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}

080017de <LCD_Gotoxy>:


void LCD_Gotoxy(unsigned char x, unsigned char y)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	460a      	mov	r2, r1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	4613      	mov	r3, r2
 80017ec:	71bb      	strb	r3, [r7, #6]
  unsigned char address;
  if(y == 0)address=(0x80+x);
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <LCD_Gotoxy+0x1e>
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	3b80      	subs	r3, #128	@ 0x80
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e013      	b.n	8001824 <LCD_Gotoxy+0x46>
  else if(y == 1) address=(0xc0+x);
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d103      	bne.n	800180a <LCD_Gotoxy+0x2c>
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	3b40      	subs	r3, #64	@ 0x40
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e00c      	b.n	8001824 <LCD_Gotoxy+0x46>
  else if(y == 2) address=(0x94+x);
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d103      	bne.n	8001818 <LCD_Gotoxy+0x3a>
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	3b6c      	subs	r3, #108	@ 0x6c
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e005      	b.n	8001824 <LCD_Gotoxy+0x46>
  else if(y == 3) address=(0xD4+x);
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d102      	bne.n	8001824 <LCD_Gotoxy+0x46>
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	3b2c      	subs	r3, #44	@ 0x2c
 8001822:	73fb      	strb	r3, [r7, #15]
  LCD_SendCommand(address);
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff91 	bl	800174e <LCD_SendCommand>
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <LCD_PutChar>:


void LCD_PutChar(unsigned char Data)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  gpio_writebit(LCD_RS, 1);
 800183e:	2101      	movs	r1, #1
 8001840:	2008      	movs	r0, #8
 8001842:	f7ff feeb 	bl	800161c <gpio_writebit>
  LCD_SendCommand(Data);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff80 	bl	800174e <LCD_SendCommand>
  gpio_writebit(LCD_RS, 0);
 800184e:	2100      	movs	r1, #0
 8001850:	2008      	movs	r0, #8
 8001852:	f7ff fee3 	bl	800161c <gpio_writebit>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <LCD_Puts>:


void LCD_Puts(char *s)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  while (*s)
 8001866:	e007      	b.n	8001878 <LCD_Puts+0x1a>
  {
    LCD_PutChar(*s);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ffe1 	bl	8001834 <LCD_PutChar>
    s++;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  while (*s)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f3      	bne.n	8001868 <LCD_Puts+0xa>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <LCD_Menu>:

void LCD_Menu (int a){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	LCD_Clear();
 8001894:	f7ff ff72 	bl	800177c <LCD_Clear>
	LCD_Puts("--------Menu--------");
 8001898:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <LCD_Menu+0x5c>)
 800189a:	f7ff ffe0 	bl	800185e <LCD_Puts>
	LCD_Gotoxy(1,1);
 800189e:	2101      	movs	r1, #1
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff ff9c 	bl	80017de <LCD_Gotoxy>
	LCD_Puts("Change S1, T1");
 80018a6:	4811      	ldr	r0, [pc, #68]	@ (80018ec <LCD_Menu+0x60>)
 80018a8:	f7ff ffd9 	bl	800185e <LCD_Puts>
	LCD_Gotoxy(1,2);
 80018ac:	2102      	movs	r1, #2
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff ff95 	bl	80017de <LCD_Gotoxy>
	LCD_Puts("Change S2, T2");
 80018b4:	480e      	ldr	r0, [pc, #56]	@ (80018f0 <LCD_Menu+0x64>)
 80018b6:	f7ff ffd2 	bl	800185e <LCD_Puts>
	LCD_Gotoxy(1,3);
 80018ba:	2103      	movs	r1, #3
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff ff8e 	bl	80017de <LCD_Gotoxy>
	LCD_Puts("Change password");
 80018c2:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <LCD_Menu+0x68>)
 80018c4:	f7ff ffcb 	bl	800185e <LCD_Puts>
	LCD_Gotoxy(0,1+a);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4619      	mov	r1, r3
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff ff83 	bl	80017de <LCD_Gotoxy>
	LCD_PutChar('>');
 80018d8:	203e      	movs	r0, #62	@ 0x3e
 80018da:	f7ff ffab 	bl	8001834 <LCD_PutChar>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	08005b30 	.word	0x08005b30
 80018ec:	08005b48 	.word	0x08005b48
 80018f0:	08005b58 	.word	0x08005b58
 80018f4:	08005b68 	.word	0x08005b68

080018f8 <Enter_Number>:
char checkpass[4];
int value[4] = {100, 5, 50, 8};// s1, t1, s2, t2
int new_value[4] = {100, 5, 50, 8};// s1, t1, s2, t2
float T = 25.0;

char Enter_Number(char *cache){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	int j = 8;
 8001900:	2308      	movs	r3, #8
 8001902:	617b      	str	r3, [r7, #20]
	char new = read_keypad();
 8001904:	f000 fcc6 	bl	8002294 <read_keypad>
 8001908:	4603      	mov	r3, r0
 800190a:	74fb      	strb	r3, [r7, #19]
	while ((new != '=') && (new != 'C')){
 800190c:	e029      	b.n	8001962 <Enter_Number+0x6a>
		new = read_keypad();
 800190e:	f000 fcc1 	bl	8002294 <read_keypad>
 8001912:	4603      	mov	r3, r0
 8001914:	74fb      	strb	r3, [r7, #19]
		if (new >= '0' && new <= '9'){
 8001916:	7cfb      	ldrb	r3, [r7, #19]
 8001918:	2b2f      	cmp	r3, #47	@ 0x2f
 800191a:	d922      	bls.n	8001962 <Enter_Number+0x6a>
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	2b39      	cmp	r3, #57	@ 0x39
 8001920:	d81f      	bhi.n	8001962 <Enter_Number+0x6a>
			LCD_PutChar(new);
 8001922:	7cfb      	ldrb	r3, [r7, #19]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff85 	bl	8001834 <LCD_PutChar>
			if (j<8) {
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b07      	cmp	r3, #7
 800192e:	dc11      	bgt.n	8001954 <Enter_Number+0x5c>
				for (int i = 1; i <= 8; i++){
 8001930:	2301      	movs	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e00b      	b.n	800194e <Enter_Number+0x56>
					cache[i-1] = cache[i];
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	441a      	add	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3b01      	subs	r3, #1
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	440b      	add	r3, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	701a      	strb	r2, [r3, #0]
				for (int i = 1; i <= 8; i++){
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b08      	cmp	r3, #8
 8001952:	ddf0      	ble.n	8001936 <Enter_Number+0x3e>
				}
			}
			cache[8] = new;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3308      	adds	r3, #8
 8001958:	7cfa      	ldrb	r2, [r7, #19]
 800195a:	701a      	strb	r2, [r3, #0]
			j--;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3b01      	subs	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
	while ((new != '=') && (new != 'C')){
 8001962:	7cfb      	ldrb	r3, [r7, #19]
 8001964:	2b3d      	cmp	r3, #61	@ 0x3d
 8001966:	d002      	beq.n	800196e <Enter_Number+0x76>
 8001968:	7cfb      	ldrb	r3, [r7, #19]
 800196a:	2b43      	cmp	r3, #67	@ 0x43
 800196c:	d1cf      	bne.n	800190e <Enter_Number+0x16>
		}
	}
	return new;
 800196e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <Display_Data>:

void Display_Data(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	b090      	sub	sp, #64	@ 0x40
 800197c:	af04      	add	r7, sp, #16
	LCD_Gotoxy(0,0);
 800197e:	2100      	movs	r1, #0
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff ff2c 	bl	80017de <LCD_Gotoxy>
	char buffer[25];
	int S1 = (int)value[0];
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <Display_Data+0x64>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int T1 = (int)value[1];
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <Display_Data+0x64>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
	int S2 = (int)value[2];
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <Display_Data+0x64>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
	int T2 = (int)value[3];
 8001998:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <Display_Data+0x64>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	623b      	str	r3, [r7, #32]
	sprintf(buffer, "%d, %d, %d, %d, %.2f", S1, T1, S2, T2, T);
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <Display_Data+0x68>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fd50 	bl	8000448 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	1d38      	adds	r0, r7, #4
 80019ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019be:	4909      	ldr	r1, [pc, #36]	@ (80019e4 <Display_Data+0x6c>)
 80019c0:	f001 fd80 	bl	80034c4 <siprintf>
	LCD_SendCommand(0x0C);
 80019c4:	200c      	movs	r0, #12
 80019c6:	f7ff fec2 	bl	800174e <LCD_SendCommand>
	LCD_Puts(buffer);
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff46 	bl	800185e <LCD_Puts>
}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	@ 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000028 	.word	0x20000028
 80019e4:	08005b78 	.word	0x08005b78

080019e8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	b091      	sub	sp, #68	@ 0x44
 80019ec:	af02      	add	r7, sp, #8
	if (TIM3_SR & (1 << 0)){
 80019ee:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <TIM3_IRQHandler+0xb4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d04c      	beq.n	8001a94 <TIM3_IRQHandler+0xac>
		T = calculate_temperature();
 80019fa:	f7ff fba5 	bl	8001148 <calculate_temperature>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a27      	ldr	r2, [pc, #156]	@ (8001aa0 <TIM3_IRQHandler+0xb8>)
 8001a02:	6013      	str	r3, [r2, #0]
		char buffer1[20];
		int S1 = (int)value[0];
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <TIM3_IRQHandler+0xbc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
		int T1 = (int)value[1];
 8001a0a:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <TIM3_IRQHandler+0xbc>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
		int S2 = (int)value[2];
 8001a10:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <TIM3_IRQHandler+0xbc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int T2 = (int)value[3];
 8001a16:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <TIM3_IRQHandler+0xbc>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
		sprintf(buffer1, "%d, %d, %d, %d, ", S1, T1, S2, T2);
 8001a1c:	f107 000c 	add.w	r0, r7, #12
 8001a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a2c:	491e      	ldr	r1, [pc, #120]	@ (8001aa8 <TIM3_IRQHandler+0xc0>)
 8001a2e:	f001 fd49 	bl	80034c4 <siprintf>
		char buffer[10];
		int intPart = (int)T;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <TIM3_IRQHandler+0xb8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fae4 	bl	8001004 <__aeabi_f2iz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
		int decimalPart = (int)((T - intPart) * 100);
 8001a40:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <TIM3_IRQHandler+0xb8>)
 8001a42:	681c      	ldr	r4, [r3, #0]
 8001a44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a46:	f7ff f939 	bl	8000cbc <__aeabi_i2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f7ff f87e 	bl	8000b50 <__aeabi_fsub>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4915      	ldr	r1, [pc, #84]	@ (8001aac <TIM3_IRQHandler+0xc4>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f983 	bl	8000d64 <__aeabi_fmul>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff facf 	bl	8001004 <__aeabi_f2iz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	623b      	str	r3, [r7, #32]
		sprintf(buffer, "%d.%02d, \r\n", intPart, decimalPart);
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	490f      	ldr	r1, [pc, #60]	@ (8001ab0 <TIM3_IRQHandler+0xc8>)
 8001a72:	f001 fd27 	bl	80034c4 <siprintf>
		uart_sendstring(buffer1);
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 ff3e 	bl	80028fc <uart_sendstring>
		uart_sendstring(buffer);
 8001a80:	463b      	mov	r3, r7
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 ff3a 	bl	80028fc <uart_sendstring>
		TIM3_SR &= ~(1 << 0);
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <TIM3_IRQHandler+0xb4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a03      	ldr	r2, [pc, #12]	@ (8001a9c <TIM3_IRQHandler+0xb4>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
	}
}
 8001a94:	bf00      	nop
 8001a96:	373c      	adds	r7, #60	@ 0x3c
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	40000410 	.word	0x40000410
 8001aa0:	20000028 	.word	0x20000028
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	08005b90 	.word	0x08005b90
 8001aac:	42c80000 	.word	0x42c80000
 8001ab0:	08005ba4 	.word	0x08005ba4

08001ab4 <TIM4_IRQHandler>:

int count = -1;
int x = 0;
void TIM4_IRQHandler(void){
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	if (TIM4_SR & (1 << 0)){
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <TIM4_IRQHandler+0xbc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d050      	beq.n	8001b66 <TIM4_IRQHandler+0xb2>
		count ++;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <TIM4_IRQHandler+0xc0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a2a      	ldr	r2, [pc, #168]	@ (8001b74 <TIM4_IRQHandler+0xc0>)
 8001acc:	6013      	str	r3, [r2, #0]
		if (count == value[1]){
 8001ace:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <TIM4_IRQHandler+0xc4>)
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <TIM4_IRQHandler+0xc0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d119      	bne.n	8001b0e <TIM4_IRQHandler+0x5a>
			GPIOA_ODR |= (1 << 4);
 8001ada:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	6013      	str	r3, [r2, #0]
			GPIOA_ODR &= ~(1 << 5);
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a24      	ldr	r2, [pc, #144]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001aec:	f023 0320 	bic.w	r3, r3, #32
 8001af0:	6013      	str	r3, [r2, #0]
			TIM2_CCR1 = 1000 * (value[2] / 100);
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <TIM4_IRQHandler+0xc4>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4a22      	ldr	r2, [pc, #136]	@ (8001b80 <TIM4_IRQHandler+0xcc>)
 8001af8:	fb82 1203 	smull	r1, r2, r2, r3
 8001afc:	1152      	asrs	r2, r2, #5
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b06:	fb03 f202 	mul.w	r2, r3, r2
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <TIM4_IRQHandler+0xd0>)
 8001b0c:	601a      	str	r2, [r3, #0]
		}
		if (count == (value[1] + value[3])){
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <TIM4_IRQHandler+0xc4>)
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <TIM4_IRQHandler+0xc4>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	441a      	add	r2, r3
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <TIM4_IRQHandler+0xc0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d11c      	bne.n	8001b5a <TIM4_IRQHandler+0xa6>
			GPIOA_ODR |= (1 << 5);
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001b26:	f043 0320 	orr.w	r3, r3, #32
 8001b2a:	6013      	str	r3, [r2, #0]
			GPIOA_ODR &= ~(1 << 4);
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <TIM4_IRQHandler+0xc8>)
 8001b32:	f023 0310 	bic.w	r3, r3, #16
 8001b36:	6013      	str	r3, [r2, #0]
			TIM2_CCR1 = 1000 * (value[0] / 100);
 8001b38:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <TIM4_IRQHandler+0xc4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <TIM4_IRQHandler+0xcc>)
 8001b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b42:	1152      	asrs	r2, r2, #5
 8001b44:	17db      	asrs	r3, r3, #31
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b4c:	fb03 f202 	mul.w	r2, r3, r2
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <TIM4_IRQHandler+0xd0>)
 8001b52:	601a      	str	r2, [r3, #0]
			count = 0;
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <TIM4_IRQHandler+0xc0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
		}
		TIM4_SR &= ~(1 << 0);
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <TIM4_IRQHandler+0xbc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <TIM4_IRQHandler+0xbc>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]
	}
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40000810 	.word	0x40000810
 8001b74:	2000002c 	.word	0x2000002c
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	4001080c 	.word	0x4001080c
 8001b80:	51eb851f 	.word	0x51eb851f
 8001b84:	40000034 	.word	0x40000034

08001b88 <main>:

int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0a4      	sub	sp, #144	@ 0x90
 8001b8c:	af04      	add	r7, sp, #16
	core_clock_config();
 8001b8e:	f7ff fb79 	bl	8001284 <core_clock_config>
	uart2_config();
 8001b92:	f000 fe3b 	bl	800280c <uart2_config>
	uart2_gpio();
 8001b96:	f000 fe69 	bl	800286c <uart2_gpio>
	adc_config();
 8001b9a:	f7ff fa59 	bl	8001050 <adc_config>
	LCD_Init();
 8001b9e:	f7ff fdf7 	bl	8001790 <LCD_Init>
	matrix_key_init();
 8001ba2:	f000 fb49 	bl	8002238 <matrix_key_init>
	pwm_init();
 8001ba6:	f000 fd0b 	bl	80025c0 <pwm_init>
	Timer3_Init();
 8001baa:	f7ff fc65 	bl	8001478 <Timer3_Init>
	Timer4_Init();
 8001bae:	f7ff fca3 	bl	80014f8 <Timer4_Init>
	Timer1_Init();
 8001bb2:	f7ff fcf3 	bl	800159c <Timer1_Init>
	GPIOA_ODR |= (1 << 5);//select direction of rotation
 8001bb6:	4bae      	ldr	r3, [pc, #696]	@ (8001e70 <main+0x2e8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4aad      	ldr	r2, [pc, #692]	@ (8001e70 <main+0x2e8>)
 8001bbc:	f043 0320 	orr.w	r3, r3, #32
 8001bc0:	6013      	str	r3, [r2, #0]
	GPIOA_ODR &= ~(1 << 4);//select direction of rotation
 8001bc2:	4bab      	ldr	r3, [pc, #684]	@ (8001e70 <main+0x2e8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4aaa      	ldr	r2, [pc, #680]	@ (8001e70 <main+0x2e8>)
 8001bc8:	f023 0310 	bic.w	r3, r3, #16
 8001bcc:	6013      	str	r3, [r2, #0]
	TIM2_CCR1 = 1000 * (value[0] / 100);      // PWM
 8001bce:	4ba9      	ldr	r3, [pc, #676]	@ (8001e74 <main+0x2ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4aa9      	ldr	r2, [pc, #676]	@ (8001e78 <main+0x2f0>)
 8001bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bd8:	1152      	asrs	r2, r2, #5
 8001bda:	17db      	asrs	r3, r3, #31
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001be2:	fb03 f202 	mul.w	r2, r3, r2
 8001be6:	4ba5      	ldr	r3, [pc, #660]	@ (8001e7c <main+0x2f4>)
 8001be8:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |= TIM2_CR1_CEN; // start Timer2
 8001bea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6013      	str	r3, [r2, #0]
	TIM4_CR1 |= TIM4_CR1_CEN; // start Timer4
 8001bfa:	4ba1      	ldr	r3, [pc, #644]	@ (8001e80 <main+0x2f8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4aa0      	ldr	r2, [pc, #640]	@ (8001e80 <main+0x2f8>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6013      	str	r3, [r2, #0]
    /* Loop forever */
	Display_Data();
 8001c06:	f7ff feb7 	bl	8001978 <Display_Data>
	while(1){
		//enter 'C' and '=' to go to password
		char data = read_keypad();
 8001c0a:	f000 fb43 	bl	8002294 <read_keypad>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		if (data == 'C'){
 8001c14:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001c18:	2b43      	cmp	r3, #67	@ 0x43
 8001c1a:	f040 82a8 	bne.w	800216e <main+0x5e6>
			TIM1_CNT = 0;
 8001c1e:	4b99      	ldr	r3, [pc, #612]	@ (8001e84 <main+0x2fc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
			TIM1_CR1 |=  TIM1_CR1_CEN;
 8001c24:	4b98      	ldr	r3, [pc, #608]	@ (8001e88 <main+0x300>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a97      	ldr	r2, [pc, #604]	@ (8001e88 <main+0x300>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]
			TIM1_SR &= ~(1 << 0);
 8001c30:	4b96      	ldr	r3, [pc, #600]	@ (8001e8c <main+0x304>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a95      	ldr	r2, [pc, #596]	@ (8001e8c <main+0x304>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]
			char data = read_keypad();
 8001c3c:	f000 fb2a 	bl	8002294 <read_keypad>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			while ((!(TIM1_SR & (1 << 0))) && (data == 0x01)){
 8001c46:	e004      	b.n	8001c52 <main+0xca>
				data = read_keypad();
 8001c48:	f000 fb24 	bl	8002294 <read_keypad>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			while ((!(TIM1_SR & (1 << 0))) && (data == 0x01)){
 8001c52:	4b8e      	ldr	r3, [pc, #568]	@ (8001e8c <main+0x304>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <main+0xde>
 8001c5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d0f0      	beq.n	8001c48 <main+0xc0>
			}
			TIM1_CR1 &= ~TIM1_CR1_CEN;
 8001c66:	4b88      	ldr	r3, [pc, #544]	@ (8001e88 <main+0x300>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a87      	ldr	r2, [pc, #540]	@ (8001e88 <main+0x300>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6013      	str	r3, [r2, #0]
			if (data == '='){
 8001c72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c76:	2b3d      	cmp	r3, #61	@ 0x3d
 8001c78:	f040 8279 	bne.w	800216e <main+0x5e6>

				//enter password
				LCD_SendCommand(0x0E);
 8001c7c:	200e      	movs	r0, #14
 8001c7e:	f7ff fd66 	bl	800174e <LCD_SendCommand>
				LCD_Clear();
 8001c82:	f7ff fd7b 	bl	800177c <LCD_Clear>
				LCD_Gotoxy(0,0);
 8001c86:	2100      	movs	r1, #0
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fda8 	bl	80017de <LCD_Gotoxy>
				LCD_Puts("Enter Password:");
 8001c8e:	4880      	ldr	r0, [pc, #512]	@ (8001e90 <main+0x308>)
 8001c90:	f7ff fde5 	bl	800185e <LCD_Puts>
				bool password = false;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
				while (password == false){
 8001c9a:	e049      	b.n	8001d30 <main+0x1a8>
					LCD_Gotoxy(0,1);
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fd9d 	bl	80017de <LCD_Gotoxy>
					int i = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
					while (i < 4){
 8001ca8:	e01e      	b.n	8001ce8 <main+0x160>
						char entered_pass = read_keypad();
 8001caa:	f000 faf3 	bl	8002294 <read_keypad>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
						if (entered_pass != 0x01){
 8001cb4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d015      	beq.n	8001ce8 <main+0x160>
							checkpass[i] = entered_pass;
 8001cbc:	4a75      	ldr	r2, [pc, #468]	@ (8001e94 <main+0x30c>)
 8001cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8001cc6:	701a      	strb	r2, [r3, #0]
							LCD_PutChar(entered_pass);
 8001cc8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fdb1 	bl	8001834 <LCD_PutChar>
							LCD_Gotoxy(i+1,1);
 8001cd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fd7e 	bl	80017de <LCD_Gotoxy>
							i++;
 8001ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
					while (i < 4){
 8001ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	dddd      	ble.n	8001caa <main+0x122>
						}
					}
					if ((pass[0]==checkpass[0]) && (pass[1]==checkpass[1])
 8001cee:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <main+0x310>)
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	4b68      	ldr	r3, [pc, #416]	@ (8001e94 <main+0x30c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d115      	bne.n	8001d26 <main+0x19e>
 8001cfa:	4b67      	ldr	r3, [pc, #412]	@ (8001e98 <main+0x310>)
 8001cfc:	785a      	ldrb	r2, [r3, #1]
 8001cfe:	4b65      	ldr	r3, [pc, #404]	@ (8001e94 <main+0x30c>)
 8001d00:	785b      	ldrb	r3, [r3, #1]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d10f      	bne.n	8001d26 <main+0x19e>
							&& (pass[2]==checkpass[2]) && (pass[3]==checkpass[3])){
 8001d06:	4b64      	ldr	r3, [pc, #400]	@ (8001e98 <main+0x310>)
 8001d08:	789a      	ldrb	r2, [r3, #2]
 8001d0a:	4b62      	ldr	r3, [pc, #392]	@ (8001e94 <main+0x30c>)
 8001d0c:	789b      	ldrb	r3, [r3, #2]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d109      	bne.n	8001d26 <main+0x19e>
 8001d12:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <main+0x310>)
 8001d14:	78da      	ldrb	r2, [r3, #3]
 8001d16:	4b5f      	ldr	r3, [pc, #380]	@ (8001e94 <main+0x30c>)
 8001d18:	78db      	ldrb	r3, [r3, #3]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d103      	bne.n	8001d26 <main+0x19e>
						password = true;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8001d24:	e004      	b.n	8001d30 <main+0x1a8>
					}
					else {
						LCD_Clear();
 8001d26:	f7ff fd29 	bl	800177c <LCD_Clear>
						LCD_Puts("incorrect, again:");
 8001d2a:	485c      	ldr	r0, [pc, #368]	@ (8001e9c <main+0x314>)
 8001d2c:	f7ff fd97 	bl	800185e <LCD_Puts>
				while (password == false){
 8001d30:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ae      	bne.n	8001c9c <main+0x114>
					}
				}

				//go to menu
				LCD_Menu(0);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fda4 	bl	800188c <LCD_Menu>
				char new_data;
				int a = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	673b      	str	r3, [r7, #112]	@ 0x70
				while (new_data != '='){
 8001d48:	e180      	b.n	800204c <main+0x4c4>
					new_data = read_keypad();
 8001d4a:	f000 faa3 	bl	8002294 <read_keypad>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
					if ((a>=0) && (a<=1) && (new_data == 'X')){
 8001d54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0c      	blt.n	8001d74 <main+0x1ec>
 8001d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	dc09      	bgt.n	8001d74 <main+0x1ec>
 8001d60:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001d64:	2b58      	cmp	r3, #88	@ 0x58
 8001d66:	d105      	bne.n	8001d74 <main+0x1ec>
						a++;
 8001d68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	673b      	str	r3, [r7, #112]	@ 0x70
						LCD_Menu(a);
 8001d6e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001d70:	f7ff fd8c 	bl	800188c <LCD_Menu>
					}
					if ((a>=1) && (a<=2) && (new_data == '%')){
 8001d74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	dd0c      	ble.n	8001d94 <main+0x20c>
 8001d7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	dc09      	bgt.n	8001d94 <main+0x20c>
 8001d80:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001d84:	2b25      	cmp	r3, #37	@ 0x25
 8001d86:	d105      	bne.n	8001d94 <main+0x20c>
						a--;
 8001d88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	673b      	str	r3, [r7, #112]	@ 0x70
						LCD_Menu(a);
 8001d8e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001d90:	f7ff fd7c 	bl	800188c <LCD_Menu>
					}
					if (new_data == '+'){
 8001d94:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001d98:	2b2b      	cmp	r3, #43	@ 0x2b
 8001d9a:	f040 8157 	bne.w	800204c <main+0x4c4>
						if (a == 0){
 8001d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8087 	bne.w	8001eb4 <main+0x32c>

							//change values of S1 and T1
							char cache[10] = {'0','0','0','0','0','0','0','0','0','\0'};
 8001da6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea0 <main+0x318>)
 8001da8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dae:	c303      	stmia	r3!, {r0, r1}
 8001db0:	801a      	strh	r2, [r3, #0]
							char cache1[10] = {'0','0','0','0','0','0','0','0','0','\0'};
 8001db2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea0 <main+0x318>)
 8001db4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dba:	c303      	stmia	r3!, {r0, r1}
 8001dbc:	801a      	strh	r2, [r3, #0]
							LCD_Clear();
 8001dbe:	f7ff fcdd 	bl	800177c <LCD_Clear>
							LCD_Gotoxy(0,0);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fd0a 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("+ Enter new value:");
 8001dca:	4836      	ldr	r0, [pc, #216]	@ (8001ea4 <main+0x31c>)
 8001dcc:	f7ff fd47 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(0,1);
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fd03 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("S1:");
 8001dd8:	4833      	ldr	r0, [pc, #204]	@ (8001ea8 <main+0x320>)
 8001dda:	f7ff fd40 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(0,2);
 8001dde:	2102      	movs	r1, #2
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fcfc 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("T1:");
 8001de6:	4831      	ldr	r0, [pc, #196]	@ (8001eac <main+0x324>)
 8001de8:	f7ff fd39 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(3,1);
 8001dec:	2101      	movs	r1, #1
 8001dee:	2003      	movs	r0, #3
 8001df0:	f7ff fcf5 	bl	80017de <LCD_Gotoxy>
							char new = read_keypad();
 8001df4:	f000 fa4e 	bl	8002294 <read_keypad>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

							while (1){
								new = Enter_Number(cache);
 8001dfe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd78 	bl	80018f8 <Enter_Number>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
								if (new == '='){
 8001e0e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001e12:	2b3d      	cmp	r3, #61	@ 0x3d
 8001e14:	d123      	bne.n	8001e5e <main+0x2d6>
									LCD_Gotoxy(3,2);
 8001e16:	2102      	movs	r1, #2
 8001e18:	2003      	movs	r0, #3
 8001e1a:	f7ff fce0 	bl	80017de <LCD_Gotoxy>
									new = Enter_Number(cache1);
 8001e1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fd68 	bl	80018f8 <Enter_Number>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
									if (new == '=') {
 8001e2e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001e32:	2b3d      	cmp	r3, #61	@ 0x3d
 8001e34:	d113      	bne.n	8001e5e <main+0x2d6>
										new_value[0] = atoi(cache);
 8001e36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fd9d 	bl	800297a <atoi>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <main+0x328>)
 8001e44:	6013      	str	r3, [r2, #0]
										new_value[1] = atoi(cache1);
 8001e46:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fd95 	bl	800297a <atoi>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <main+0x328>)
 8001e54:	6053      	str	r3, [r2, #4]
										LCD_Menu(a);
 8001e56:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001e58:	f7ff fd18 	bl	800188c <LCD_Menu>
										break;
 8001e5c:	e0f6      	b.n	800204c <main+0x4c4>
									}
								}

								if (new == 'C') {
 8001e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001e62:	2b43      	cmp	r3, #67	@ 0x43
 8001e64:	d1cb      	bne.n	8001dfe <main+0x276>
									LCD_Menu(a);
 8001e66:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001e68:	f7ff fd10 	bl	800188c <LCD_Menu>
									break;
 8001e6c:	e0ee      	b.n	800204c <main+0x4c4>
 8001e6e:	bf00      	nop
 8001e70:	4001080c 	.word	0x4001080c
 8001e74:	20000008 	.word	0x20000008
 8001e78:	51eb851f 	.word	0x51eb851f
 8001e7c:	40000034 	.word	0x40000034
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40012c24 	.word	0x40012c24
 8001e88:	40012c00 	.word	0x40012c00
 8001e8c:	40012c10 	.word	0x40012c10
 8001e90:	08005bb0 	.word	0x08005bb0
 8001e94:	20000214 	.word	0x20000214
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	08005bc0 	.word	0x08005bc0
 8001ea0:	08005c7c 	.word	0x08005c7c
 8001ea4:	08005bd4 	.word	0x08005bd4
 8001ea8:	08005be8 	.word	0x08005be8
 8001eac:	08005bec 	.word	0x08005bec
 8001eb0:	20000018 	.word	0x20000018
								}
							}
						}
						else if (a == 1){
 8001eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d163      	bne.n	8001f82 <main+0x3fa>

							//change values of S2, T2
							char cache[10] = {'0','0','0','0','0','0','0','0','0','\0'};
 8001eba:	4aae      	ldr	r2, [pc, #696]	@ (8002174 <main+0x5ec>)
 8001ebc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec2:	c303      	stmia	r3!, {r0, r1}
 8001ec4:	801a      	strh	r2, [r3, #0]
							char cache1[10] = {'0','0','0','0','0','0','0','0','0','\0'};
 8001ec6:	4aab      	ldr	r2, [pc, #684]	@ (8002174 <main+0x5ec>)
 8001ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ecc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ece:	c303      	stmia	r3!, {r0, r1}
 8001ed0:	801a      	strh	r2, [r3, #0]
							LCD_Clear();
 8001ed2:	f7ff fc53 	bl	800177c <LCD_Clear>
							LCD_Gotoxy(0,0);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff fc80 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("+ Enter new value:");
 8001ede:	48a6      	ldr	r0, [pc, #664]	@ (8002178 <main+0x5f0>)
 8001ee0:	f7ff fcbd 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(0,1);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fc79 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("S2:");
 8001eec:	48a3      	ldr	r0, [pc, #652]	@ (800217c <main+0x5f4>)
 8001eee:	f7ff fcb6 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(0,2);
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fc72 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("T2:");
 8001efa:	48a1      	ldr	r0, [pc, #644]	@ (8002180 <main+0x5f8>)
 8001efc:	f7ff fcaf 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(3,1);
 8001f00:	2101      	movs	r1, #1
 8001f02:	2003      	movs	r0, #3
 8001f04:	f7ff fc6b 	bl	80017de <LCD_Gotoxy>
							char new = read_keypad();
 8001f08:	f000 f9c4 	bl	8002294 <read_keypad>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

							while (1){
								new = Enter_Number(cache);
 8001f12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fcee 	bl	80018f8 <Enter_Number>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
								if (new == '='){
 8001f22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001f26:	2b3d      	cmp	r3, #61	@ 0x3d
 8001f28:	d123      	bne.n	8001f72 <main+0x3ea>
									LCD_Gotoxy(3,2);
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f7ff fc56 	bl	80017de <LCD_Gotoxy>
									new = Enter_Number(cache1);
 8001f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fcde 	bl	80018f8 <Enter_Number>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
									if (new == '=') {
 8001f42:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001f46:	2b3d      	cmp	r3, #61	@ 0x3d
 8001f48:	d113      	bne.n	8001f72 <main+0x3ea>
										new_value[2] = atoi(cache);
 8001f4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fd13 	bl	800297a <atoi>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a8b      	ldr	r2, [pc, #556]	@ (8002184 <main+0x5fc>)
 8001f58:	6093      	str	r3, [r2, #8]
										new_value[3] = atoi(cache1);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fd0b 	bl	800297a <atoi>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4a87      	ldr	r2, [pc, #540]	@ (8002184 <main+0x5fc>)
 8001f68:	60d3      	str	r3, [r2, #12]
										LCD_Menu(a);
 8001f6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f6c:	f7ff fc8e 	bl	800188c <LCD_Menu>
										break;
 8001f70:	e06c      	b.n	800204c <main+0x4c4>
									}
								}
								if (new == 'C') {
 8001f72:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001f76:	2b43      	cmp	r3, #67	@ 0x43
 8001f78:	d1cb      	bne.n	8001f12 <main+0x38a>
									LCD_Menu(a);
 8001f7a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001f7c:	f7ff fc86 	bl	800188c <LCD_Menu>
									break;
 8001f80:	e064      	b.n	800204c <main+0x4c4>
							}
						}
						else{

							//change password
							bool format = false;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
							LCD_Clear();
 8001f88:	f7ff fbf8 	bl	800177c <LCD_Clear>
							LCD_Gotoxy(0,0);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fc25 	bl	80017de <LCD_Gotoxy>
							LCD_Puts("Enter new password:");
 8001f94:	487c      	ldr	r0, [pc, #496]	@ (8002188 <main+0x600>)
 8001f96:	f7ff fc62 	bl	800185e <LCD_Puts>
							LCD_Gotoxy(0,1);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fc1e 	bl	80017de <LCD_Gotoxy>
							while (format == false){
 8001fa2:	e04c      	b.n	800203e <main+0x4b6>
								char cache[10] = {'0','0','0','0','0','0','0','0','0','\0'};
 8001fa4:	4a73      	ldr	r2, [pc, #460]	@ (8002174 <main+0x5ec>)
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fac:	c303      	stmia	r3!, {r0, r1}
 8001fae:	801a      	strh	r2, [r3, #0]
								char new = read_keypad();
 8001fb0:	f000 f970 	bl	8002294 <read_keypad>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
								new = Enter_Number(cache);
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc9a 	bl	80018f8 <Enter_Number>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
								if (new == '='){
 8001fca:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001fce:	2b3d      	cmp	r3, #61	@ 0x3d
 8001fd0:	d12e      	bne.n	8002030 <main+0x4a8>
									if (cache[4] == '0'){
 8001fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fd6:	2b30      	cmp	r3, #48	@ 0x30
 8001fd8:	d116      	bne.n	8002008 <main+0x480>
										new_pass[0] = cache[5];
 8001fda:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001fde:	4b6b      	ldr	r3, [pc, #428]	@ (800218c <main+0x604>)
 8001fe0:	701a      	strb	r2, [r3, #0]
										new_pass[1] = cache[6];
 8001fe2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001fe6:	4b69      	ldr	r3, [pc, #420]	@ (800218c <main+0x604>)
 8001fe8:	705a      	strb	r2, [r3, #1]
										new_pass[2] = cache[7];
 8001fea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001fee:	4b67      	ldr	r3, [pc, #412]	@ (800218c <main+0x604>)
 8001ff0:	709a      	strb	r2, [r3, #2]
										new_pass[3] = cache[8];
 8001ff2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001ff6:	4b65      	ldr	r3, [pc, #404]	@ (800218c <main+0x604>)
 8001ff8:	70da      	strb	r2, [r3, #3]
										LCD_Menu(a);
 8001ffa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001ffc:	f7ff fc46 	bl	800188c <LCD_Menu>
										format = true;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8002006:	e013      	b.n	8002030 <main+0x4a8>
									}
									else{
										LCD_Clear();
 8002008:	f7ff fbb8 	bl	800177c <LCD_Clear>
										LCD_Gotoxy(0,0);
 800200c:	2100      	movs	r1, #0
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fbe5 	bl	80017de <LCD_Gotoxy>
										LCD_Puts("Enter password again");
 8002014:	485e      	ldr	r0, [pc, #376]	@ (8002190 <main+0x608>)
 8002016:	f7ff fc22 	bl	800185e <LCD_Puts>
										LCD_Gotoxy(0,1);
 800201a:	2101      	movs	r1, #1
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff fbde 	bl	80017de <LCD_Gotoxy>
										LCD_Puts("(only 4 characters!)");
 8002022:	485c      	ldr	r0, [pc, #368]	@ (8002194 <main+0x60c>)
 8002024:	f7ff fc1b 	bl	800185e <LCD_Puts>
										LCD_Gotoxy(0,2);
 8002028:	2102      	movs	r1, #2
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff fbd7 	bl	80017de <LCD_Gotoxy>
									}
								}
								if (new == 'C') LCD_Menu(a);
 8002030:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002034:	2b43      	cmp	r3, #67	@ 0x43
 8002036:	d102      	bne.n	800203e <main+0x4b6>
 8002038:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800203a:	f7ff fc27 	bl	800188c <LCD_Menu>
							while (format == false){
 800203e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ab      	bne.n	8001fa4 <main+0x41c>
				while (new_data != '='){
 800204c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002050:	2b3d      	cmp	r3, #61	@ 0x3d
 8002052:	f47f ae7a 	bne.w	8001d4a <main+0x1c2>
							}
						}
					}
				}
				if (new_data == '=') {
 8002056:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800205a:	2b3d      	cmp	r3, #61	@ 0x3d
 800205c:	f040 8085 	bne.w	800216a <main+0x5e2>
					//save to flash memory
					LCD_Clear();
 8002060:	f7ff fb8c 	bl	800177c <LCD_Clear>
					LCD_Gotoxy(0,0);
 8002064:	2100      	movs	r1, #0
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fbb9 	bl	80017de <LCD_Gotoxy>
					LCD_Puts("Save the old values");
 800206c:	484a      	ldr	r0, [pc, #296]	@ (8002198 <main+0x610>)
 800206e:	f7ff fbf6 	bl	800185e <LCD_Puts>
					LCD_Gotoxy(0,1);
 8002072:	2101      	movs	r1, #1
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff fbb2 	bl	80017de <LCD_Gotoxy>
					LCD_Puts("to flash memory:");
 800207a:	4848      	ldr	r0, [pc, #288]	@ (800219c <main+0x614>)
 800207c:	f7ff fbef 	bl	800185e <LCD_Puts>
					LCD_Gotoxy(0,2);
 8002080:	2102      	movs	r1, #2
 8002082:	2000      	movs	r0, #0
 8002084:	f7ff fbab 	bl	80017de <LCD_Gotoxy>
					LCD_Puts("1: Save");
 8002088:	4845      	ldr	r0, [pc, #276]	@ (80021a0 <main+0x618>)
 800208a:	f7ff fbe8 	bl	800185e <LCD_Puts>
					LCD_Gotoxy(0,3);
 800208e:	2103      	movs	r1, #3
 8002090:	2000      	movs	r0, #0
 8002092:	f7ff fba4 	bl	80017de <LCD_Gotoxy>
					LCD_Puts("2: Do not save");
 8002096:	4843      	ldr	r0, [pc, #268]	@ (80021a4 <main+0x61c>)
 8002098:	f7ff fbe1 	bl	800185e <LCD_Puts>
					while ((new_data != '1') && (new_data != '2')){
 800209c:	e004      	b.n	80020a8 <main+0x520>
						new_data = read_keypad();
 800209e:	f000 f8f9 	bl	8002294 <read_keypad>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
					while ((new_data != '1') && (new_data != '2')){
 80020a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020ac:	2b31      	cmp	r3, #49	@ 0x31
 80020ae:	d003      	beq.n	80020b8 <main+0x530>
 80020b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020b4:	2b32      	cmp	r3, #50	@ 0x32
 80020b6:	d1f2      	bne.n	800209e <main+0x516>
					}
					if (new_data == '1') {
 80020b8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80020bc:	2b31      	cmp	r3, #49	@ 0x31
 80020be:	d134      	bne.n	800212a <main+0x5a2>
						char buffer[25];
						int S1 = (int)value[0];
 80020c0:	4b39      	ldr	r3, [pc, #228]	@ (80021a8 <main+0x620>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	66bb      	str	r3, [r7, #104]	@ 0x68
						int T1 = (int)value[1];
 80020c6:	4b38      	ldr	r3, [pc, #224]	@ (80021a8 <main+0x620>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	667b      	str	r3, [r7, #100]	@ 0x64
						int S2 = (int)value[2];
 80020cc:	4b36      	ldr	r3, [pc, #216]	@ (80021a8 <main+0x620>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	663b      	str	r3, [r7, #96]	@ 0x60
						int T2 = (int)value[3];
 80020d2:	4b35      	ldr	r3, [pc, #212]	@ (80021a8 <main+0x620>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
						sprintf(buffer, "%d, %d, %d, %d, %.2f", S1, T1, S2, T2, T);
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <main+0x624>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9b3 	bl	8000448 <__aeabi_f2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	1d38      	adds	r0, r7, #4
 80020e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80020f8:	492d      	ldr	r1, [pc, #180]	@ (80021b0 <main+0x628>)
 80020fa:	f001 f9e3 	bl	80034c4 <siprintf>
						Flash_WriteString(0x0800FC00 + 25 * x, buffer);
 80020fe:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <main+0x62c>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009a      	lsls	r2, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8002110:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 8002114:	461a      	mov	r2, r3
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f7ff f96c 	bl	80013f8 <Flash_WriteString>
						x ++;
 8002120:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <main+0x62c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a23      	ldr	r2, [pc, #140]	@ (80021b4 <main+0x62c>)
 8002128:	6013      	str	r3, [r2, #0]
					}
					value[0] = new_value[0];
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <main+0x5fc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1e      	ldr	r2, [pc, #120]	@ (80021a8 <main+0x620>)
 8002130:	6013      	str	r3, [r2, #0]
					value[1] = new_value[1];
 8002132:	4b14      	ldr	r3, [pc, #80]	@ (8002184 <main+0x5fc>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <main+0x620>)
 8002138:	6053      	str	r3, [r2, #4]
					value[2] = new_value[2];
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <main+0x5fc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a1a      	ldr	r2, [pc, #104]	@ (80021a8 <main+0x620>)
 8002140:	6093      	str	r3, [r2, #8]
					value[3] = new_value[3];
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <main+0x5fc>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <main+0x620>)
 8002148:	60d3      	str	r3, [r2, #12]
					pass[0] = new_pass[0];
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <main+0x604>)
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <main+0x630>)
 8002150:	701a      	strb	r2, [r3, #0]
					pass[1] = new_pass[1];
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <main+0x604>)
 8002154:	785a      	ldrb	r2, [r3, #1]
 8002156:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <main+0x630>)
 8002158:	705a      	strb	r2, [r3, #1]
					pass[2] = new_pass[2];
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <main+0x604>)
 800215c:	789a      	ldrb	r2, [r3, #2]
 800215e:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <main+0x630>)
 8002160:	709a      	strb	r2, [r3, #2]
					pass[3] = new_pass[3];
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <main+0x604>)
 8002164:	78da      	ldrb	r2, [r3, #3]
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <main+0x630>)
 8002168:	70da      	strb	r2, [r3, #3]
				}
				LCD_Clear();
 800216a:	f7ff fb07 	bl	800177c <LCD_Clear>
			}
		}
		Display_Data();
 800216e:	f7ff fc03 	bl	8001978 <Display_Data>
	while(1){
 8002172:	e54a      	b.n	8001c0a <main+0x82>
 8002174:	08005c7c 	.word	0x08005c7c
 8002178:	08005bd4 	.word	0x08005bd4
 800217c:	08005bf0 	.word	0x08005bf0
 8002180:	08005bf4 	.word	0x08005bf4
 8002184:	20000018 	.word	0x20000018
 8002188:	08005bf8 	.word	0x08005bf8
 800218c:	20000004 	.word	0x20000004
 8002190:	08005c0c 	.word	0x08005c0c
 8002194:	08005c24 	.word	0x08005c24
 8002198:	08005c3c 	.word	0x08005c3c
 800219c:	08005c50 	.word	0x08005c50
 80021a0:	08005c64 	.word	0x08005c64
 80021a4:	08005c6c 	.word	0x08005c6c
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000028 	.word	0x20000028
 80021b0:	08005b78 	.word	0x08005b78
 80021b4:	20000218 	.word	0x20000218
 80021b8:	20000000 	.word	0x20000000

080021bc <gpiob_writebit>:
#define COLUMN1   4
#define COLUMN2   5
#define COLUMN3   6
#define COLUMN4   7

void gpiob_writebit(int pin, uint8_t State){
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
	if (State) {
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <gpiob_writebit+0x28>
	        GPIOB_ODR |= (1 << pin);
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <gpiob_writebit+0x48>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	4611      	mov	r1, r2
 80021dc:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <gpiob_writebit+0x48>)
 80021de:	430b      	orrs	r3, r1
 80021e0:	6013      	str	r3, [r2, #0]
	} else {
	        GPIOB_ODR &= ~(1 << pin);
	}
}
 80021e2:	e00a      	b.n	80021fa <gpiob_writebit+0x3e>
	        GPIOB_ODR &= ~(1 << pin);
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <gpiob_writebit+0x48>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	43d2      	mvns	r2, r2
 80021f2:	4611      	mov	r1, r2
 80021f4:	4a03      	ldr	r2, [pc, #12]	@ (8002204 <gpiob_writebit+0x48>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	6013      	str	r3, [r2, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40010c0c 	.word	0x40010c0c

08002208 <gpiob_readbit>:

bool gpiob_readbit(int pin){
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if (GPIOB_IDR & (1 << pin)) {
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <gpiob_readbit+0x2c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2101      	movs	r1, #1
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <gpiob_readbit+0x1e>
	        return true;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <gpiob_readbit+0x20>
	} else {
	        return false;
 8002226:	2300      	movs	r3, #0
	}
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010c08 	.word	0x40010c08

08002238 <matrix_key_init>:

void matrix_key_init(void){
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	//Turn on clock for I2C1 and GPIOB
	RCC_APB2ENR |= RCC_APB2ENR_IOPBEN;
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <matrix_key_init+0x50>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a11      	ldr	r2, [pc, #68]	@ (8002288 <matrix_key_init+0x50>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6013      	str	r3, [r2, #0]

	//configure GPIOB
	GPIOB_CRL &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)) | (0xF << (2 * 4)) | (0xF << (3 * 4))
 8002248:	4b10      	ldr	r3, [pc, #64]	@ (800228c <matrix_key_init+0x54>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <matrix_key_init+0x54>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
				     | (0xF << (4 * 4)) | (0xF << (5 * 4)) | (0xF << (6 * 4)) | (0xF << (7 * 4)));
	GPIOB_CRL |= ((0x1 << (0 * 4)) | (0x1 << (1 * 4)) | (0x1 << (2 * 4)) | (0x1 << (3 * 4)));//output push_pull for rows
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <matrix_key_init+0x54>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <matrix_key_init+0x54>)
 8002258:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800225c:	f043 0311 	orr.w	r3, r3, #17
 8002260:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= ((0x8 << (4 * 4)) | (0x8 << (5 * 4)) | (0x8 << (6 * 4)) | (0x8 << (7 * 4)));//input for rows
 8002262:	4b0a      	ldr	r3, [pc, #40]	@ (800228c <matrix_key_init+0x54>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a09      	ldr	r2, [pc, #36]	@ (800228c <matrix_key_init+0x54>)
 8002268:	f043 4308 	orr.w	r3, r3, #2281701376	@ 0x88000000
 800226c:	f443 0308 	orr.w	r3, r3, #8912896	@ 0x880000
 8002270:	6013      	str	r3, [r2, #0]
	GPIOB_ODR |= ((0x1 << 4) | (0x1 << 5) | (0x1 << 6) | (0x1 << 7));//input with pull-up
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <matrix_key_init+0x58>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a06      	ldr	r2, [pc, #24]	@ (8002290 <matrix_key_init+0x58>)
 8002278:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800227c:	6013      	str	r3, [r2, #0]
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021018 	.word	0x40021018
 800228c:	40010c00 	.word	0x40010c00
 8002290:	40010c0c 	.word	0x40010c0c

08002294 <read_keypad>:

char read_keypad(void){
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	gpiob_writebit(ROW1, 0);
 8002298:	2100      	movs	r1, #0
 800229a:	2000      	movs	r0, #0
 800229c:	f7ff ff8e 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW2, 1);
 80022a0:	2101      	movs	r1, #1
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7ff ff8a 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW3, 1);
 80022a8:	2101      	movs	r1, #1
 80022aa:	2002      	movs	r0, #2
 80022ac:	f7ff ff86 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW4, 1);
 80022b0:	2101      	movs	r1, #1
 80022b2:	2003      	movs	r0, #3
 80022b4:	f7ff ff82 	bl	80021bc <gpiob_writebit>

	if (!(gpiob_readbit(COLUMN1)))   // if the Col 1 is low
 80022b8:	2004      	movs	r0, #4
 80022ba:	f7ff ffa5 	bl	8002208 <gpiob_readbit>
 80022be:	4603      	mov	r3, r0
 80022c0:	f083 0301 	eor.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <read_keypad+0x4e>
	{
		while (!(gpiob_readbit(COLUMN1)));   // wait till the button is pressed
 80022ca:	bf00      	nop
 80022cc:	2004      	movs	r0, #4
 80022ce:	f7ff ff9b 	bl	8002208 <gpiob_readbit>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f6      	bne.n	80022cc <read_keypad+0x38>
		return '7';
 80022de:	2337      	movs	r3, #55	@ 0x37
 80022e0:	e16b      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN2)))   // if the Col 2 is low
 80022e2:	2005      	movs	r0, #5
 80022e4:	f7ff ff90 	bl	8002208 <gpiob_readbit>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00b      	beq.n	800230c <read_keypad+0x78>
	{
		while (!(gpiob_readbit(COLUMN2)));   // wait till the button is pressed
 80022f4:	bf00      	nop
 80022f6:	2005      	movs	r0, #5
 80022f8:	f7ff ff86 	bl	8002208 <gpiob_readbit>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f6      	bne.n	80022f6 <read_keypad+0x62>
		return '8';
 8002308:	2338      	movs	r3, #56	@ 0x38
 800230a:	e156      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN3)))   // if the Col 3 is low
 800230c:	2006      	movs	r0, #6
 800230e:	f7ff ff7b 	bl	8002208 <gpiob_readbit>
 8002312:	4603      	mov	r3, r0
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <read_keypad+0xa2>
	{
		while (!(gpiob_readbit(COLUMN3)));   // wait till the button is pressed
 800231e:	bf00      	nop
 8002320:	2006      	movs	r0, #6
 8002322:	f7ff ff71 	bl	8002208 <gpiob_readbit>
 8002326:	4603      	mov	r3, r0
 8002328:	f083 0301 	eor.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f6      	bne.n	8002320 <read_keypad+0x8c>
		return '9';
 8002332:	2339      	movs	r3, #57	@ 0x39
 8002334:	e141      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN4)))   // if the Col 4 is low
 8002336:	2007      	movs	r0, #7
 8002338:	f7ff ff66 	bl	8002208 <gpiob_readbit>
 800233c:	4603      	mov	r3, r0
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <read_keypad+0xcc>
	{
		while (!(gpiob_readbit(COLUMN4)));   // wait till the button is pressed
 8002348:	bf00      	nop
 800234a:	2007      	movs	r0, #7
 800234c:	f7ff ff5c 	bl	8002208 <gpiob_readbit>
 8002350:	4603      	mov	r3, r0
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f6      	bne.n	800234a <read_keypad+0xb6>
		return '%';
 800235c:	2325      	movs	r3, #37	@ 0x25
 800235e:	e12c      	b.n	80025ba <read_keypad+0x326>
	}

	/* Make ROW 1 LOW and all other ROWs HIGH */
	gpiob_writebit(ROW1, 1);
 8002360:	2101      	movs	r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff ff2a 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW2, 0);
 8002368:	2100      	movs	r1, #0
 800236a:	2001      	movs	r0, #1
 800236c:	f7ff ff26 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW3, 1);
 8002370:	2101      	movs	r1, #1
 8002372:	2002      	movs	r0, #2
 8002374:	f7ff ff22 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW4, 1);
 8002378:	2101      	movs	r1, #1
 800237a:	2003      	movs	r0, #3
 800237c:	f7ff ff1e 	bl	80021bc <gpiob_writebit>

	if (!(gpiob_readbit(COLUMN1)))   // if the Col 1 is low
 8002380:	2004      	movs	r0, #4
 8002382:	f7ff ff41 	bl	8002208 <gpiob_readbit>
 8002386:	4603      	mov	r3, r0
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <read_keypad+0x116>
	{
		while (!(gpiob_readbit(COLUMN1)));   // wait till the button is pressed
 8002392:	bf00      	nop
 8002394:	2004      	movs	r0, #4
 8002396:	f7ff ff37 	bl	8002208 <gpiob_readbit>
 800239a:	4603      	mov	r3, r0
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f6      	bne.n	8002394 <read_keypad+0x100>
		return '4';
 80023a6:	2334      	movs	r3, #52	@ 0x34
 80023a8:	e107      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN2)))   // if the Col 2 is low
 80023aa:	2005      	movs	r0, #5
 80023ac:	f7ff ff2c 	bl	8002208 <gpiob_readbit>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f083 0301 	eor.w	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <read_keypad+0x140>
	{
		while (!(gpiob_readbit(COLUMN2)));   // wait till the button is pressed
 80023bc:	bf00      	nop
 80023be:	2005      	movs	r0, #5
 80023c0:	f7ff ff22 	bl	8002208 <gpiob_readbit>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f6      	bne.n	80023be <read_keypad+0x12a>
		return '5';
 80023d0:	2335      	movs	r3, #53	@ 0x35
 80023d2:	e0f2      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN3)))   // if the Col 3 is low
 80023d4:	2006      	movs	r0, #6
 80023d6:	f7ff ff17 	bl	8002208 <gpiob_readbit>
 80023da:	4603      	mov	r3, r0
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <read_keypad+0x16a>
	{
		while (!(gpiob_readbit(COLUMN3)));   // wait till the button is pressed
 80023e6:	bf00      	nop
 80023e8:	2006      	movs	r0, #6
 80023ea:	f7ff ff0d 	bl	8002208 <gpiob_readbit>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f6      	bne.n	80023e8 <read_keypad+0x154>
		return '6';
 80023fa:	2336      	movs	r3, #54	@ 0x36
 80023fc:	e0dd      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN4)))   // if the Col 4 is low
 80023fe:	2007      	movs	r0, #7
 8002400:	f7ff ff02 	bl	8002208 <gpiob_readbit>
 8002404:	4603      	mov	r3, r0
 8002406:	f083 0301 	eor.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <read_keypad+0x194>
	{
		while (!(gpiob_readbit(COLUMN4)));   // wait till the button is pressed
 8002410:	bf00      	nop
 8002412:	2007      	movs	r0, #7
 8002414:	f7ff fef8 	bl	8002208 <gpiob_readbit>
 8002418:	4603      	mov	r3, r0
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f6      	bne.n	8002412 <read_keypad+0x17e>
		return 'X';
 8002424:	2358      	movs	r3, #88	@ 0x58
 8002426:	e0c8      	b.n	80025ba <read_keypad+0x326>
	}

	/* Make ROW 1 LOW and all other ROWs HIGH */
	gpiob_writebit(ROW1, 1);
 8002428:	2101      	movs	r1, #1
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff fec6 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW2, 1);
 8002430:	2101      	movs	r1, #1
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff fec2 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW3, 0);
 8002438:	2100      	movs	r1, #0
 800243a:	2002      	movs	r0, #2
 800243c:	f7ff febe 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW4, 1);
 8002440:	2101      	movs	r1, #1
 8002442:	2003      	movs	r0, #3
 8002444:	f7ff feba 	bl	80021bc <gpiob_writebit>

	if (!(gpiob_readbit(COLUMN1)))   // if the Col 1 is low
 8002448:	2004      	movs	r0, #4
 800244a:	f7ff fedd 	bl	8002208 <gpiob_readbit>
 800244e:	4603      	mov	r3, r0
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <read_keypad+0x1de>
	{
		while (!(gpiob_readbit(COLUMN1)));   // wait till the button is pressed
 800245a:	bf00      	nop
 800245c:	2004      	movs	r0, #4
 800245e:	f7ff fed3 	bl	8002208 <gpiob_readbit>
 8002462:	4603      	mov	r3, r0
 8002464:	f083 0301 	eor.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f6      	bne.n	800245c <read_keypad+0x1c8>
		return '1';
 800246e:	2331      	movs	r3, #49	@ 0x31
 8002470:	e0a3      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN2)))   // if the Col 2 is low
 8002472:	2005      	movs	r0, #5
 8002474:	f7ff fec8 	bl	8002208 <gpiob_readbit>
 8002478:	4603      	mov	r3, r0
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00b      	beq.n	800249c <read_keypad+0x208>
	{
		while (!(gpiob_readbit(COLUMN2)));   // wait till the button is pressed
 8002484:	bf00      	nop
 8002486:	2005      	movs	r0, #5
 8002488:	f7ff febe 	bl	8002208 <gpiob_readbit>
 800248c:	4603      	mov	r3, r0
 800248e:	f083 0301 	eor.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f6      	bne.n	8002486 <read_keypad+0x1f2>
		return '2';
 8002498:	2332      	movs	r3, #50	@ 0x32
 800249a:	e08e      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN3)))   // if the Col 3 is low
 800249c:	2006      	movs	r0, #6
 800249e:	f7ff feb3 	bl	8002208 <gpiob_readbit>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <read_keypad+0x232>
	{
		while (!(gpiob_readbit(COLUMN3)));   // wait till the button is pressed
 80024ae:	bf00      	nop
 80024b0:	2006      	movs	r0, #6
 80024b2:	f7ff fea9 	bl	8002208 <gpiob_readbit>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f6      	bne.n	80024b0 <read_keypad+0x21c>
		return '3';
 80024c2:	2333      	movs	r3, #51	@ 0x33
 80024c4:	e079      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN4)))   // if the Col 4 is low
 80024c6:	2007      	movs	r0, #7
 80024c8:	f7ff fe9e 	bl	8002208 <gpiob_readbit>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00b      	beq.n	80024f0 <read_keypad+0x25c>
	{
		while (!(gpiob_readbit(COLUMN4)));   // wait till the button is pressed
 80024d8:	bf00      	nop
 80024da:	2007      	movs	r0, #7
 80024dc:	f7ff fe94 	bl	8002208 <gpiob_readbit>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f6      	bne.n	80024da <read_keypad+0x246>
		return '-';
 80024ec:	232d      	movs	r3, #45	@ 0x2d
 80024ee:	e064      	b.n	80025ba <read_keypad+0x326>
	}

	/* Make ROW 1 LOW and all other ROWs HIGH */
	gpiob_writebit(ROW1, 1);
 80024f0:	2101      	movs	r1, #1
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff fe62 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW2, 1);
 80024f8:	2101      	movs	r1, #1
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7ff fe5e 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW3, 1);
 8002500:	2101      	movs	r1, #1
 8002502:	2002      	movs	r0, #2
 8002504:	f7ff fe5a 	bl	80021bc <gpiob_writebit>
	gpiob_writebit(ROW4, 0);
 8002508:	2100      	movs	r1, #0
 800250a:	2003      	movs	r0, #3
 800250c:	f7ff fe56 	bl	80021bc <gpiob_writebit>

	if (!(gpiob_readbit(COLUMN1)))   // if the Col 1 is low
 8002510:	2004      	movs	r0, #4
 8002512:	f7ff fe79 	bl	8002208 <gpiob_readbit>
 8002516:	4603      	mov	r3, r0
 8002518:	f083 0301 	eor.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <read_keypad+0x2a6>
	{
		while (!(gpiob_readbit(COLUMN1)));   // wait till the button is pressed
 8002522:	bf00      	nop
 8002524:	2004      	movs	r0, #4
 8002526:	f7ff fe6f 	bl	8002208 <gpiob_readbit>
 800252a:	4603      	mov	r3, r0
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f6      	bne.n	8002524 <read_keypad+0x290>
		return 'C';
 8002536:	2343      	movs	r3, #67	@ 0x43
 8002538:	e03f      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN2)))   // if the Col 2 is low
 800253a:	2005      	movs	r0, #5
 800253c:	f7ff fe64 	bl	8002208 <gpiob_readbit>
 8002540:	4603      	mov	r3, r0
 8002542:	f083 0301 	eor.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <read_keypad+0x2d0>
	{
		while (!(gpiob_readbit(COLUMN2)));   // wait till the button is pressed
 800254c:	bf00      	nop
 800254e:	2005      	movs	r0, #5
 8002550:	f7ff fe5a 	bl	8002208 <gpiob_readbit>
 8002554:	4603      	mov	r3, r0
 8002556:	f083 0301 	eor.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f6      	bne.n	800254e <read_keypad+0x2ba>
		return '0';
 8002560:	2330      	movs	r3, #48	@ 0x30
 8002562:	e02a      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN3)))   // if the Col 3 is low
 8002564:	2006      	movs	r0, #6
 8002566:	f7ff fe4f 	bl	8002208 <gpiob_readbit>
 800256a:	4603      	mov	r3, r0
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <read_keypad+0x2fa>
	{
		while (!(gpiob_readbit(COLUMN3)));   // wait till the button is pressed
 8002576:	bf00      	nop
 8002578:	2006      	movs	r0, #6
 800257a:	f7ff fe45 	bl	8002208 <gpiob_readbit>
 800257e:	4603      	mov	r3, r0
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f6      	bne.n	8002578 <read_keypad+0x2e4>
		return '=';
 800258a:	233d      	movs	r3, #61	@ 0x3d
 800258c:	e015      	b.n	80025ba <read_keypad+0x326>
	}

	if (!(gpiob_readbit(COLUMN4)))   // if the Col 4 is low
 800258e:	2007      	movs	r0, #7
 8002590:	f7ff fe3a 	bl	8002208 <gpiob_readbit>
 8002594:	4603      	mov	r3, r0
 8002596:	f083 0301 	eor.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <read_keypad+0x324>
	{
		while (!(gpiob_readbit(COLUMN4)));   // wait till the button is pressed
 80025a0:	bf00      	nop
 80025a2:	2007      	movs	r0, #7
 80025a4:	f7ff fe30 	bl	8002208 <gpiob_readbit>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f6      	bne.n	80025a2 <read_keypad+0x30e>
		return '+';
 80025b4:	232b      	movs	r3, #43	@ 0x2b
 80025b6:	e000      	b.n	80025ba <read_keypad+0x326>
	}

	return 0x01;  // /if nothing is pressed
 80025b8:	2301      	movs	r3, #1
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <pwm_init>:
 *  Created on: Mar 26, 2025
 *      Author: P.HIEU
 */
#include "pwm.h"

void pwm_init(void) {
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

    RCC_APB1ENR |= RCC_APB1ENR_TIM2EN;  // turn on clock for TIM2
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <pwm_init+0x70>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a19      	ldr	r2, [pc, #100]	@ (8002630 <pwm_init+0x70>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= RCC_APB2ENR_IOPAEN; // turn on clock for GPIOA
 80025d0:	4b18      	ldr	r3, [pc, #96]	@ (8002634 <pwm_init+0x74>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <pwm_init+0x74>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6013      	str	r3, [r2, #0]

    //configure GPIO
    GPIOA_CRL &= ~(0xF << (0 * 4)); // delete old configuration
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <pwm_init+0x78>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <pwm_init+0x78>)
 80025e2:	f023 030f 	bic.w	r3, r3, #15
 80025e6:	6013      	str	r3, [r2, #0]
    GPIOA_CRL |= (0x9 << (0 * 4));  // setup PA0 (AF Push-Pull, max speed 50MHz)
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <pwm_init+0x78>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <pwm_init+0x78>)
 80025ee:	f043 0309 	orr.w	r3, r3, #9
 80025f2:	6013      	str	r3, [r2, #0]

    //configure TIM2
    TIM2_PSC = 160 - 1;    // divide clock into 50kHz
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <pwm_init+0x7c>)
 80025f6:	229f      	movs	r2, #159	@ 0x9f
 80025f8:	601a      	str	r2, [r3, #0]
    TIM2_ARR = 1000 - 1;  // (frequency: PWM = 50Hz)
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <pwm_init+0x80>)
 80025fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002600:	601a      	str	r2, [r3, #0]
//    TIM2_CCR1 = 1000;      // PWM: 100%

    //Select mode
    TIM2_CCMR1 |= TIM2_CCMR1_OC1M_Pos; // PWM: 1
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <pwm_init+0x84>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <pwm_init+0x84>)
 8002608:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800260c:	6013      	str	r3, [r2, #0]
    TIM2_CCMR1 |= TIM2_CCMR1_OC1PE; // turn on preload (CC1 is updated when CCR1register is reconfigure)
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <pwm_init+0x84>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a0c      	ldr	r2, [pc, #48]	@ (8002644 <pwm_init+0x84>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6013      	str	r3, [r2, #0]

   // turn on PWM
    TIM2_CCER |= TIM2_CCER_CC1E; // turn on PWM in CC1 channel
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <pwm_init+0x88>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <pwm_init+0x88>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6013      	str	r3, [r2, #0]

    //start Timer
//    TIM2_CR1 |= TIM2_CR1_CEN;
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	4002101c 	.word	0x4002101c
 8002634:	40021018 	.word	0x40021018
 8002638:	40010800 	.word	0x40010800
 800263c:	40000028 	.word	0x40000028
 8002640:	4000002c 	.word	0x4000002c
 8002644:	40000018 	.word	0x40000018
 8002648:	40000020 	.word	0x40000020

0800264c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return 1;
 8002650:	2301      	movs	r3, #1
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <_kill>:

int _kill(int pid, int sig)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002664:	f000 ffe6 	bl	8003634 <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	2216      	movs	r2, #22
 800266c:	601a      	str	r2, [r3, #0]
  return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_exit>:

void _exit (int status)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002682:	f04f 31ff 	mov.w	r1, #4294967295
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffe7 	bl	800265a <_kill>
  while (1) {}    /* Make sure we hang here */
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <_exit+0x12>

08002690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e00a      	b.n	80026b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a2:	f3af 8000 	nop.w
 80026a6:	4601      	mov	r1, r0
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	60ba      	str	r2, [r7, #8]
 80026ae:	b2ca      	uxtb	r2, r1
 80026b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbf0      	blt.n	80026a2 <_read+0x12>
  }

  return len;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e009      	b.n	80026f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbf1      	blt.n	80026dc <_write+0x12>
  }
  return len;
 80026f8:	687b      	ldr	r3, [r7, #4]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_close>:

int _close(int file)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002728:	605a      	str	r2, [r3, #4]
  return 0;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <_isatty>:

int _isatty(int file)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
	...

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002794:	f000 ff4e 	bl	8003634 <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	220c      	movs	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e009      	b.n	80027b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <_sbrk+0x64>)
 80027b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20005000 	.word	0x20005000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	2000021c 	.word	0x2000021c
 80027cc:	20000370 	.word	0x20000370

080027d0 <SysTick_Handler>:
	SYST_CSR |= SYST_CSR_TICKINT; //enable systick interrupt
	SYST_CSR |= SYST_CSR_CLKSOURCE; //clock = AHB = 8MHz
	SYST_CSR |= SYST_CSR_ENABLE;//enable systick
}

void SysTick_Handler(void){
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
	if (usTicks>0){
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <SysTick_Handler+0x34>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <SysTick_Handler+0x16>
		usTicks--;
 80027dc:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <SysTick_Handler+0x34>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <SysTick_Handler+0x34>)
 80027e4:	6013      	str	r3, [r2, #0]
	}
	if (usTicks == 0){
 80027e6:	4b07      	ldr	r3, [pc, #28]	@ (8002804 <SysTick_Handler+0x34>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <SysTick_Handler+0x2a>
		SYST_CSR &= ~SYST_CSR_ENABLE;//Disable Systick after Done
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <SysTick_Handler+0x38>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a05      	ldr	r2, [pc, #20]	@ (8002808 <SysTick_Handler+0x38>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
	}
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000220 	.word	0x20000220
 8002808:	e000e010 	.word	0xe000e010

0800280c <uart2_config>:
 *  Created on: Mar 21, 2025
 *      Author: P.HIEU
 */
# include "uart.h"

void uart2_config(void){
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
	//Enable clock for USART2
	RCC_APB1ENR |= RCC_APB1ENR_USART2EN; // USART2EN = 1
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <uart2_config+0x4c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a10      	ldr	r2, [pc, #64]	@ (8002858 <uart2_config+0x4c>)
 8002816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281a:	6013      	str	r3, [r2, #0]
	USART2_BRR = USART2_BRR_DIV_Mantissa | USART2_BRR_DIV_Fraction;
 800281c:	4b0f      	ldr	r3, [pc, #60]	@ (800285c <uart2_config+0x50>)
 800281e:	f240 3241 	movw	r2, #833	@ 0x341
 8002822:	601a      	str	r2, [r3, #0]

	//configure: 8bits, no parity, 1 stop bit
	USART2_CR1 = 0;
 8002824:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <uart2_config+0x54>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
	USART2_CR1 |= USART_CR1_TE | USART_CR1_UE;
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <uart2_config+0x54>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <uart2_config+0x54>)
 8002830:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6013      	str	r3, [r2, #0]

	USART2_CR2 = 0;
 800283a:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <uart2_config+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
	USART2_CR2 |= USART_CR2_STOP_1BIT;
 8002840:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <uart2_config+0x58>)
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <uart2_config+0x58>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6013      	str	r3, [r2, #0]

	USART2_CR3 = 0; // do not use hardware flow control
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <uart2_config+0x5c>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	4002101c 	.word	0x4002101c
 800285c:	40004408 	.word	0x40004408
 8002860:	4000440c 	.word	0x4000440c
 8002864:	40004410 	.word	0x40004410
 8002868:	40004414 	.word	0x40004414

0800286c <uart2_gpio>:

void uart2_gpio(void){
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002870:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <uart2_gpio+0x48>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0f      	ldr	r2, [pc, #60]	@ (80028b4 <uart2_gpio+0x48>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6013      	str	r3, [r2, #0]
	// PA2 (TX) and PA3 (RX) to Alternate Function
	GPIOA_CRL &= ~(15 << (2 * 4));
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <uart2_gpio+0x4c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <uart2_gpio+0x4c>)
 8002882:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002886:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (GPIO_CRL_CNF_MODE_2 << (2 * 4));
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <uart2_gpio+0x4c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <uart2_gpio+0x4c>)
 800288e:	f443 6320 	orr.w	r3, r3, #2560	@ 0xa00
 8002892:	6013      	str	r3, [r2, #0]
	GPIOA_CRL &= ~(15 << (3 * 4));
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <uart2_gpio+0x4c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <uart2_gpio+0x4c>)
 800289a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800289e:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (GPIO_CRL_CNF_MODE_3 << (3 * 4));
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <uart2_gpio+0x4c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <uart2_gpio+0x4c>)
 80028a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028aa:	6013      	str	r3, [r2, #0]

}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40021018 	.word	0x40021018
 80028b8:	40010800 	.word	0x40010800

080028bc <uart_sendchar>:

//send a char
void uart_sendchar(uint8_t data){
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
	while (!(USART2_SR & USART_SR_TXE));
 80028c6:	bf00      	nop
 80028c8:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <uart_sendchar+0x38>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f9      	beq.n	80028c8 <uart_sendchar+0xc>
	USART2_DR = data;
 80028d4:	4a08      	ldr	r2, [pc, #32]	@ (80028f8 <uart_sendchar+0x3c>)
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	6013      	str	r3, [r2, #0]
	while (!(USART2_SR & USART_SR_TC));
 80028da:	bf00      	nop
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <uart_sendchar+0x38>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f9      	beq.n	80028dc <uart_sendchar+0x20>
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40004404 	.word	0x40004404

080028fc <uart_sendstring>:

//send a string
void uart_sendstring(const char *str){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	while(*str){
 8002904:	e006      	b.n	8002914 <uart_sendstring+0x18>
		uart_sendchar(*str++);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ffd4 	bl	80028bc <uart_sendchar>
	while(*str){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f4      	bne.n	8002906 <uart_sendstring+0xa>
	}
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002928:	480d      	ldr	r0, [pc, #52]	@ (8002960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800292a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800292c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002930:	480c      	ldr	r0, [pc, #48]	@ (8002964 <LoopForever+0x6>)
  ldr r1, =_edata
 8002932:	490d      	ldr	r1, [pc, #52]	@ (8002968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002934:	4a0d      	ldr	r2, [pc, #52]	@ (800296c <LoopForever+0xe>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002948:	4c0a      	ldr	r4, [pc, #40]	@ (8002974 <LoopForever+0x16>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002956:	f000 fe73 	bl	8003640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295a:	f7ff f915 	bl	8001b88 <main>

0800295e <LoopForever>:

LoopForever:
  b LoopForever
 800295e:	e7fe      	b.n	800295e <LoopForever>
  ldr   r0, =_estack
 8002960:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002968:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800296c:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 8002970:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002974:	20000370 	.word	0x20000370

08002978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002978:	e7fe      	b.n	8002978 <ADC1_2_IRQHandler>

0800297a <atoi>:
 800297a:	220a      	movs	r2, #10
 800297c:	2100      	movs	r1, #0
 800297e:	f000 b87b 	b.w	8002a78 <strtol>
	...

08002984 <_strtol_l.isra.0>:
 8002984:	2b24      	cmp	r3, #36	@ 0x24
 8002986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298a:	4686      	mov	lr, r0
 800298c:	4690      	mov	r8, r2
 800298e:	d801      	bhi.n	8002994 <_strtol_l.isra.0+0x10>
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <_strtol_l.isra.0+0x1e>
 8002994:	f000 fe4e 	bl	8003634 <__errno>
 8002998:	2316      	movs	r3, #22
 800299a:	6003      	str	r3, [r0, #0]
 800299c:	2000      	movs	r0, #0
 800299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a2:	460d      	mov	r5, r1
 80029a4:	4833      	ldr	r0, [pc, #204]	@ (8002a74 <_strtol_l.isra.0+0xf0>)
 80029a6:	462a      	mov	r2, r5
 80029a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80029ac:	5d06      	ldrb	r6, [r0, r4]
 80029ae:	f016 0608 	ands.w	r6, r6, #8
 80029b2:	d1f8      	bne.n	80029a6 <_strtol_l.isra.0+0x22>
 80029b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80029b6:	d110      	bne.n	80029da <_strtol_l.isra.0+0x56>
 80029b8:	2601      	movs	r6, #1
 80029ba:	782c      	ldrb	r4, [r5, #0]
 80029bc:	1c95      	adds	r5, r2, #2
 80029be:	f033 0210 	bics.w	r2, r3, #16
 80029c2:	d115      	bne.n	80029f0 <_strtol_l.isra.0+0x6c>
 80029c4:	2c30      	cmp	r4, #48	@ 0x30
 80029c6:	d10d      	bne.n	80029e4 <_strtol_l.isra.0+0x60>
 80029c8:	782a      	ldrb	r2, [r5, #0]
 80029ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80029ce:	2a58      	cmp	r2, #88	@ 0x58
 80029d0:	d108      	bne.n	80029e4 <_strtol_l.isra.0+0x60>
 80029d2:	786c      	ldrb	r4, [r5, #1]
 80029d4:	3502      	adds	r5, #2
 80029d6:	2310      	movs	r3, #16
 80029d8:	e00a      	b.n	80029f0 <_strtol_l.isra.0+0x6c>
 80029da:	2c2b      	cmp	r4, #43	@ 0x2b
 80029dc:	bf04      	itt	eq
 80029de:	782c      	ldrbeq	r4, [r5, #0]
 80029e0:	1c95      	addeq	r5, r2, #2
 80029e2:	e7ec      	b.n	80029be <_strtol_l.isra.0+0x3a>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f6      	bne.n	80029d6 <_strtol_l.isra.0+0x52>
 80029e8:	2c30      	cmp	r4, #48	@ 0x30
 80029ea:	bf14      	ite	ne
 80029ec:	230a      	movne	r3, #10
 80029ee:	2308      	moveq	r3, #8
 80029f0:	2200      	movs	r2, #0
 80029f2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80029f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80029fa:	fbbc f9f3 	udiv	r9, ip, r3
 80029fe:	4610      	mov	r0, r2
 8002a00:	fb03 ca19 	mls	sl, r3, r9, ip
 8002a04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002a08:	2f09      	cmp	r7, #9
 8002a0a:	d80f      	bhi.n	8002a2c <_strtol_l.isra.0+0xa8>
 8002a0c:	463c      	mov	r4, r7
 8002a0e:	42a3      	cmp	r3, r4
 8002a10:	dd1b      	ble.n	8002a4a <_strtol_l.isra.0+0xc6>
 8002a12:	1c57      	adds	r7, r2, #1
 8002a14:	d007      	beq.n	8002a26 <_strtol_l.isra.0+0xa2>
 8002a16:	4581      	cmp	r9, r0
 8002a18:	d314      	bcc.n	8002a44 <_strtol_l.isra.0+0xc0>
 8002a1a:	d101      	bne.n	8002a20 <_strtol_l.isra.0+0x9c>
 8002a1c:	45a2      	cmp	sl, r4
 8002a1e:	db11      	blt.n	8002a44 <_strtol_l.isra.0+0xc0>
 8002a20:	2201      	movs	r2, #1
 8002a22:	fb00 4003 	mla	r0, r0, r3, r4
 8002a26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a2a:	e7eb      	b.n	8002a04 <_strtol_l.isra.0+0x80>
 8002a2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002a30:	2f19      	cmp	r7, #25
 8002a32:	d801      	bhi.n	8002a38 <_strtol_l.isra.0+0xb4>
 8002a34:	3c37      	subs	r4, #55	@ 0x37
 8002a36:	e7ea      	b.n	8002a0e <_strtol_l.isra.0+0x8a>
 8002a38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002a3c:	2f19      	cmp	r7, #25
 8002a3e:	d804      	bhi.n	8002a4a <_strtol_l.isra.0+0xc6>
 8002a40:	3c57      	subs	r4, #87	@ 0x57
 8002a42:	e7e4      	b.n	8002a0e <_strtol_l.isra.0+0x8a>
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	e7ed      	b.n	8002a26 <_strtol_l.isra.0+0xa2>
 8002a4a:	1c53      	adds	r3, r2, #1
 8002a4c:	d108      	bne.n	8002a60 <_strtol_l.isra.0+0xdc>
 8002a4e:	2322      	movs	r3, #34	@ 0x22
 8002a50:	4660      	mov	r0, ip
 8002a52:	f8ce 3000 	str.w	r3, [lr]
 8002a56:	f1b8 0f00 	cmp.w	r8, #0
 8002a5a:	d0a0      	beq.n	800299e <_strtol_l.isra.0+0x1a>
 8002a5c:	1e69      	subs	r1, r5, #1
 8002a5e:	e006      	b.n	8002a6e <_strtol_l.isra.0+0xea>
 8002a60:	b106      	cbz	r6, 8002a64 <_strtol_l.isra.0+0xe0>
 8002a62:	4240      	negs	r0, r0
 8002a64:	f1b8 0f00 	cmp.w	r8, #0
 8002a68:	d099      	beq.n	800299e <_strtol_l.isra.0+0x1a>
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	d1f6      	bne.n	8002a5c <_strtol_l.isra.0+0xd8>
 8002a6e:	f8c8 1000 	str.w	r1, [r8]
 8002a72:	e794      	b.n	800299e <_strtol_l.isra.0+0x1a>
 8002a74:	08005c87 	.word	0x08005c87

08002a78 <strtol>:
 8002a78:	4613      	mov	r3, r2
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <strtol+0x10>)
 8002a80:	6800      	ldr	r0, [r0, #0]
 8002a82:	f7ff bf7f 	b.w	8002984 <_strtol_l.isra.0>
 8002a86:	bf00      	nop
 8002a88:	2000003c 	.word	0x2000003c

08002a8c <__cvt>:
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a92:	461d      	mov	r5, r3
 8002a94:	bfbb      	ittet	lt
 8002a96:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002a9a:	461d      	movlt	r5, r3
 8002a9c:	2300      	movge	r3, #0
 8002a9e:	232d      	movlt	r3, #45	@ 0x2d
 8002aa0:	b088      	sub	sp, #32
 8002aa2:	4614      	mov	r4, r2
 8002aa4:	bfb8      	it	lt
 8002aa6:	4614      	movlt	r4, r2
 8002aa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002aaa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002aac:	7013      	strb	r3, [r2, #0]
 8002aae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002ab0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ab4:	f023 0820 	bic.w	r8, r3, #32
 8002ab8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002abc:	d005      	beq.n	8002aca <__cvt+0x3e>
 8002abe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002ac2:	d100      	bne.n	8002ac6 <__cvt+0x3a>
 8002ac4:	3601      	adds	r6, #1
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e000      	b.n	8002acc <__cvt+0x40>
 8002aca:	2303      	movs	r3, #3
 8002acc:	aa07      	add	r2, sp, #28
 8002ace:	9204      	str	r2, [sp, #16]
 8002ad0:	aa06      	add	r2, sp, #24
 8002ad2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ad6:	e9cd 3600 	strd	r3, r6, [sp]
 8002ada:	4622      	mov	r2, r4
 8002adc:	462b      	mov	r3, r5
 8002ade:	f000 fe6f 	bl	80037c0 <_dtoa_r>
 8002ae2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ae6:	4607      	mov	r7, r0
 8002ae8:	d119      	bne.n	8002b1e <__cvt+0x92>
 8002aea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002aec:	07db      	lsls	r3, r3, #31
 8002aee:	d50e      	bpl.n	8002b0e <__cvt+0x82>
 8002af0:	eb00 0906 	add.w	r9, r0, r6
 8002af4:	2200      	movs	r2, #0
 8002af6:	2300      	movs	r3, #0
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd ff64 	bl	80009c8 <__aeabi_dcmpeq>
 8002b00:	b108      	cbz	r0, 8002b06 <__cvt+0x7a>
 8002b02:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b06:	2230      	movs	r2, #48	@ 0x30
 8002b08:	9b07      	ldr	r3, [sp, #28]
 8002b0a:	454b      	cmp	r3, r9
 8002b0c:	d31e      	bcc.n	8002b4c <__cvt+0xc0>
 8002b0e:	4638      	mov	r0, r7
 8002b10:	9b07      	ldr	r3, [sp, #28]
 8002b12:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002b14:	1bdb      	subs	r3, r3, r7
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	b008      	add	sp, #32
 8002b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002b22:	eb00 0906 	add.w	r9, r0, r6
 8002b26:	d1e5      	bne.n	8002af4 <__cvt+0x68>
 8002b28:	7803      	ldrb	r3, [r0, #0]
 8002b2a:	2b30      	cmp	r3, #48	@ 0x30
 8002b2c:	d10a      	bne.n	8002b44 <__cvt+0xb8>
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2300      	movs	r3, #0
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f7fd ff47 	bl	80009c8 <__aeabi_dcmpeq>
 8002b3a:	b918      	cbnz	r0, 8002b44 <__cvt+0xb8>
 8002b3c:	f1c6 0601 	rsb	r6, r6, #1
 8002b40:	f8ca 6000 	str.w	r6, [sl]
 8002b44:	f8da 3000 	ldr.w	r3, [sl]
 8002b48:	4499      	add	r9, r3
 8002b4a:	e7d3      	b.n	8002af4 <__cvt+0x68>
 8002b4c:	1c59      	adds	r1, r3, #1
 8002b4e:	9107      	str	r1, [sp, #28]
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e7d9      	b.n	8002b08 <__cvt+0x7c>

08002b54 <__exponent>:
 8002b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b56:	2900      	cmp	r1, #0
 8002b58:	bfb6      	itet	lt
 8002b5a:	232d      	movlt	r3, #45	@ 0x2d
 8002b5c:	232b      	movge	r3, #43	@ 0x2b
 8002b5e:	4249      	neglt	r1, r1
 8002b60:	2909      	cmp	r1, #9
 8002b62:	7002      	strb	r2, [r0, #0]
 8002b64:	7043      	strb	r3, [r0, #1]
 8002b66:	dd29      	ble.n	8002bbc <__exponent+0x68>
 8002b68:	f10d 0307 	add.w	r3, sp, #7
 8002b6c:	461d      	mov	r5, r3
 8002b6e:	270a      	movs	r7, #10
 8002b70:	fbb1 f6f7 	udiv	r6, r1, r7
 8002b74:	461a      	mov	r2, r3
 8002b76:	fb07 1416 	mls	r4, r7, r6, r1
 8002b7a:	3430      	adds	r4, #48	@ 0x30
 8002b7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002b80:	460c      	mov	r4, r1
 8002b82:	2c63      	cmp	r4, #99	@ 0x63
 8002b84:	4631      	mov	r1, r6
 8002b86:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b8a:	dcf1      	bgt.n	8002b70 <__exponent+0x1c>
 8002b8c:	3130      	adds	r1, #48	@ 0x30
 8002b8e:	1e94      	subs	r4, r2, #2
 8002b90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002b94:	4623      	mov	r3, r4
 8002b96:	1c41      	adds	r1, r0, #1
 8002b98:	42ab      	cmp	r3, r5
 8002b9a:	d30a      	bcc.n	8002bb2 <__exponent+0x5e>
 8002b9c:	f10d 0309 	add.w	r3, sp, #9
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	42ac      	cmp	r4, r5
 8002ba4:	bf88      	it	hi
 8002ba6:	2300      	movhi	r3, #0
 8002ba8:	3302      	adds	r3, #2
 8002baa:	4403      	add	r3, r0
 8002bac:	1a18      	subs	r0, r3, r0
 8002bae:	b003      	add	sp, #12
 8002bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002bb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002bba:	e7ed      	b.n	8002b98 <__exponent+0x44>
 8002bbc:	2330      	movs	r3, #48	@ 0x30
 8002bbe:	3130      	adds	r1, #48	@ 0x30
 8002bc0:	7083      	strb	r3, [r0, #2]
 8002bc2:	70c1      	strb	r1, [r0, #3]
 8002bc4:	1d03      	adds	r3, r0, #4
 8002bc6:	e7f1      	b.n	8002bac <__exponent+0x58>

08002bc8 <_printf_float>:
 8002bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	b091      	sub	sp, #68	@ 0x44
 8002bce:	460c      	mov	r4, r1
 8002bd0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002bd4:	4616      	mov	r6, r2
 8002bd6:	461f      	mov	r7, r3
 8002bd8:	4605      	mov	r5, r0
 8002bda:	f000 fce1 	bl	80035a0 <_localeconv_r>
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	9308      	str	r3, [sp, #32]
 8002be4:	f7fd fac4 	bl	8000170 <strlen>
 8002be8:	2300      	movs	r3, #0
 8002bea:	930e      	str	r3, [sp, #56]	@ 0x38
 8002bec:	f8d8 3000 	ldr.w	r3, [r8]
 8002bf0:	9009      	str	r0, [sp, #36]	@ 0x24
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	f103 0208 	add.w	r2, r3, #8
 8002bfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002c00:	f8d4 b000 	ldr.w	fp, [r4]
 8002c04:	f8c8 2000 	str.w	r2, [r8]
 8002c08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002c0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c12:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002c16:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002c22:	4b9c      	ldr	r3, [pc, #624]	@ (8002e94 <_printf_float+0x2cc>)
 8002c24:	f7fd ff02 	bl	8000a2c <__aeabi_dcmpun>
 8002c28:	bb70      	cbnz	r0, 8002c88 <_printf_float+0xc0>
 8002c2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c32:	4b98      	ldr	r3, [pc, #608]	@ (8002e94 <_printf_float+0x2cc>)
 8002c34:	f7fd fedc 	bl	80009f0 <__aeabi_dcmple>
 8002c38:	bb30      	cbnz	r0, 8002c88 <_printf_float+0xc0>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4640      	mov	r0, r8
 8002c40:	4649      	mov	r1, r9
 8002c42:	f7fd fecb 	bl	80009dc <__aeabi_dcmplt>
 8002c46:	b110      	cbz	r0, 8002c4e <_printf_float+0x86>
 8002c48:	232d      	movs	r3, #45	@ 0x2d
 8002c4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c4e:	4a92      	ldr	r2, [pc, #584]	@ (8002e98 <_printf_float+0x2d0>)
 8002c50:	4b92      	ldr	r3, [pc, #584]	@ (8002e9c <_printf_float+0x2d4>)
 8002c52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002c56:	bf8c      	ite	hi
 8002c58:	4690      	movhi	r8, r2
 8002c5a:	4698      	movls	r8, r3
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f04f 0900 	mov.w	r9, #0
 8002c62:	6123      	str	r3, [r4, #16]
 8002c64:	f02b 0304 	bic.w	r3, fp, #4
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	4633      	mov	r3, r6
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	4628      	mov	r0, r5
 8002c70:	9700      	str	r7, [sp, #0]
 8002c72:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002c74:	f000 f9d4 	bl	8003020 <_printf_common>
 8002c78:	3001      	adds	r0, #1
 8002c7a:	f040 8090 	bne.w	8002d9e <_printf_float+0x1d6>
 8002c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c82:	b011      	add	sp, #68	@ 0x44
 8002c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	4640      	mov	r0, r8
 8002c8e:	4649      	mov	r1, r9
 8002c90:	f7fd fecc 	bl	8000a2c <__aeabi_dcmpun>
 8002c94:	b148      	cbz	r0, 8002caa <_printf_float+0xe2>
 8002c96:	464b      	mov	r3, r9
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bfb8      	it	lt
 8002c9c:	232d      	movlt	r3, #45	@ 0x2d
 8002c9e:	4a80      	ldr	r2, [pc, #512]	@ (8002ea0 <_printf_float+0x2d8>)
 8002ca0:	bfb8      	it	lt
 8002ca2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea4 <_printf_float+0x2dc>)
 8002ca8:	e7d3      	b.n	8002c52 <_printf_float+0x8a>
 8002caa:	6863      	ldr	r3, [r4, #4]
 8002cac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	d13f      	bne.n	8002d34 <_printf_float+0x16c>
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	6063      	str	r3, [r4, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	9206      	str	r2, [sp, #24]
 8002cc2:	aa0e      	add	r2, sp, #56	@ 0x38
 8002cc4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002cc8:	aa0d      	add	r2, sp, #52	@ 0x34
 8002cca:	9203      	str	r2, [sp, #12]
 8002ccc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002cd0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002cd4:	6863      	ldr	r3, [r4, #4]
 8002cd6:	4642      	mov	r2, r8
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	4628      	mov	r0, r5
 8002cdc:	464b      	mov	r3, r9
 8002cde:	910a      	str	r1, [sp, #40]	@ 0x28
 8002ce0:	f7ff fed4 	bl	8002a8c <__cvt>
 8002ce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002ce6:	4680      	mov	r8, r0
 8002ce8:	2947      	cmp	r1, #71	@ 0x47
 8002cea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002cec:	d128      	bne.n	8002d40 <_printf_float+0x178>
 8002cee:	1cc8      	adds	r0, r1, #3
 8002cf0:	db02      	blt.n	8002cf8 <_printf_float+0x130>
 8002cf2:	6863      	ldr	r3, [r4, #4]
 8002cf4:	4299      	cmp	r1, r3
 8002cf6:	dd40      	ble.n	8002d7a <_printf_float+0x1b2>
 8002cf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8002cfc:	fa5f fa8a 	uxtb.w	sl, sl
 8002d00:	4652      	mov	r2, sl
 8002d02:	3901      	subs	r1, #1
 8002d04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002d08:	910d      	str	r1, [sp, #52]	@ 0x34
 8002d0a:	f7ff ff23 	bl	8002b54 <__exponent>
 8002d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d10:	4681      	mov	r9, r0
 8002d12:	1813      	adds	r3, r2, r0
 8002d14:	2a01      	cmp	r2, #1
 8002d16:	6123      	str	r3, [r4, #16]
 8002d18:	dc02      	bgt.n	8002d20 <_printf_float+0x158>
 8002d1a:	6822      	ldr	r2, [r4, #0]
 8002d1c:	07d2      	lsls	r2, r2, #31
 8002d1e:	d501      	bpl.n	8002d24 <_printf_float+0x15c>
 8002d20:	3301      	adds	r3, #1
 8002d22:	6123      	str	r3, [r4, #16]
 8002d24:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d09e      	beq.n	8002c6a <_printf_float+0xa2>
 8002d2c:	232d      	movs	r3, #45	@ 0x2d
 8002d2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d32:	e79a      	b.n	8002c6a <_printf_float+0xa2>
 8002d34:	2947      	cmp	r1, #71	@ 0x47
 8002d36:	d1bf      	bne.n	8002cb8 <_printf_float+0xf0>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1bd      	bne.n	8002cb8 <_printf_float+0xf0>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e7ba      	b.n	8002cb6 <_printf_float+0xee>
 8002d40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d44:	d9dc      	bls.n	8002d00 <_printf_float+0x138>
 8002d46:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002d4a:	d118      	bne.n	8002d7e <_printf_float+0x1b6>
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	6863      	ldr	r3, [r4, #4]
 8002d50:	dd0b      	ble.n	8002d6a <_printf_float+0x1a2>
 8002d52:	6121      	str	r1, [r4, #16]
 8002d54:	b913      	cbnz	r3, 8002d5c <_printf_float+0x194>
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	07d0      	lsls	r0, r2, #31
 8002d5a:	d502      	bpl.n	8002d62 <_printf_float+0x19a>
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	440b      	add	r3, r1
 8002d60:	6123      	str	r3, [r4, #16]
 8002d62:	f04f 0900 	mov.w	r9, #0
 8002d66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002d68:	e7dc      	b.n	8002d24 <_printf_float+0x15c>
 8002d6a:	b913      	cbnz	r3, 8002d72 <_printf_float+0x1aa>
 8002d6c:	6822      	ldr	r2, [r4, #0]
 8002d6e:	07d2      	lsls	r2, r2, #31
 8002d70:	d501      	bpl.n	8002d76 <_printf_float+0x1ae>
 8002d72:	3302      	adds	r3, #2
 8002d74:	e7f4      	b.n	8002d60 <_printf_float+0x198>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e7f2      	b.n	8002d60 <_printf_float+0x198>
 8002d7a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002d7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d80:	4299      	cmp	r1, r3
 8002d82:	db05      	blt.n	8002d90 <_printf_float+0x1c8>
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	6121      	str	r1, [r4, #16]
 8002d88:	07d8      	lsls	r0, r3, #31
 8002d8a:	d5ea      	bpl.n	8002d62 <_printf_float+0x19a>
 8002d8c:	1c4b      	adds	r3, r1, #1
 8002d8e:	e7e7      	b.n	8002d60 <_printf_float+0x198>
 8002d90:	2900      	cmp	r1, #0
 8002d92:	bfcc      	ite	gt
 8002d94:	2201      	movgt	r2, #1
 8002d96:	f1c1 0202 	rsble	r2, r1, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	e7e0      	b.n	8002d60 <_printf_float+0x198>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	055a      	lsls	r2, r3, #21
 8002da2:	d407      	bmi.n	8002db4 <_printf_float+0x1ec>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	4642      	mov	r2, r8
 8002da8:	4631      	mov	r1, r6
 8002daa:	4628      	mov	r0, r5
 8002dac:	47b8      	blx	r7
 8002dae:	3001      	adds	r0, #1
 8002db0:	d12b      	bne.n	8002e0a <_printf_float+0x242>
 8002db2:	e764      	b.n	8002c7e <_printf_float+0xb6>
 8002db4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002db8:	f240 80dc 	bls.w	8002f74 <_printf_float+0x3ac>
 8002dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f7fd fe00 	bl	80009c8 <__aeabi_dcmpeq>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d033      	beq.n	8002e34 <_printf_float+0x26c>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	4631      	mov	r1, r6
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	4a35      	ldr	r2, [pc, #212]	@ (8002ea8 <_printf_float+0x2e0>)
 8002dd4:	47b8      	blx	r7
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	f43f af51 	beq.w	8002c7e <_printf_float+0xb6>
 8002ddc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002de0:	4543      	cmp	r3, r8
 8002de2:	db02      	blt.n	8002dea <_printf_float+0x222>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	07d8      	lsls	r0, r3, #31
 8002de8:	d50f      	bpl.n	8002e0a <_printf_float+0x242>
 8002dea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002dee:	4631      	mov	r1, r6
 8002df0:	4628      	mov	r0, r5
 8002df2:	47b8      	blx	r7
 8002df4:	3001      	adds	r0, #1
 8002df6:	f43f af42 	beq.w	8002c7e <_printf_float+0xb6>
 8002dfa:	f04f 0900 	mov.w	r9, #0
 8002dfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8002e02:	f104 0a1a 	add.w	sl, r4, #26
 8002e06:	45c8      	cmp	r8, r9
 8002e08:	dc09      	bgt.n	8002e1e <_printf_float+0x256>
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	079b      	lsls	r3, r3, #30
 8002e0e:	f100 8102 	bmi.w	8003016 <_printf_float+0x44e>
 8002e12:	68e0      	ldr	r0, [r4, #12]
 8002e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002e16:	4298      	cmp	r0, r3
 8002e18:	bfb8      	it	lt
 8002e1a:	4618      	movlt	r0, r3
 8002e1c:	e731      	b.n	8002c82 <_printf_float+0xba>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	4652      	mov	r2, sl
 8002e22:	4631      	mov	r1, r6
 8002e24:	4628      	mov	r0, r5
 8002e26:	47b8      	blx	r7
 8002e28:	3001      	adds	r0, #1
 8002e2a:	f43f af28 	beq.w	8002c7e <_printf_float+0xb6>
 8002e2e:	f109 0901 	add.w	r9, r9, #1
 8002e32:	e7e8      	b.n	8002e06 <_printf_float+0x23e>
 8002e34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	dc38      	bgt.n	8002eac <_printf_float+0x2e4>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	4628      	mov	r0, r5
 8002e40:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <_printf_float+0x2e0>)
 8002e42:	47b8      	blx	r7
 8002e44:	3001      	adds	r0, #1
 8002e46:	f43f af1a 	beq.w	8002c7e <_printf_float+0xb6>
 8002e4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002e4e:	ea59 0303 	orrs.w	r3, r9, r3
 8002e52:	d102      	bne.n	8002e5a <_printf_float+0x292>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	07d9      	lsls	r1, r3, #31
 8002e58:	d5d7      	bpl.n	8002e0a <_printf_float+0x242>
 8002e5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4628      	mov	r0, r5
 8002e62:	47b8      	blx	r7
 8002e64:	3001      	adds	r0, #1
 8002e66:	f43f af0a 	beq.w	8002c7e <_printf_float+0xb6>
 8002e6a:	f04f 0a00 	mov.w	sl, #0
 8002e6e:	f104 0b1a 	add.w	fp, r4, #26
 8002e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e74:	425b      	negs	r3, r3
 8002e76:	4553      	cmp	r3, sl
 8002e78:	dc01      	bgt.n	8002e7e <_printf_float+0x2b6>
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	e793      	b.n	8002da6 <_printf_float+0x1de>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	465a      	mov	r2, fp
 8002e82:	4631      	mov	r1, r6
 8002e84:	4628      	mov	r0, r5
 8002e86:	47b8      	blx	r7
 8002e88:	3001      	adds	r0, #1
 8002e8a:	f43f aef8 	beq.w	8002c7e <_printf_float+0xb6>
 8002e8e:	f10a 0a01 	add.w	sl, sl, #1
 8002e92:	e7ee      	b.n	8002e72 <_printf_float+0x2aa>
 8002e94:	7fefffff 	.word	0x7fefffff
 8002e98:	08005d8b 	.word	0x08005d8b
 8002e9c:	08005d87 	.word	0x08005d87
 8002ea0:	08005d93 	.word	0x08005d93
 8002ea4:	08005d8f 	.word	0x08005d8f
 8002ea8:	08005d97 	.word	0x08005d97
 8002eac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002eae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002eb2:	4553      	cmp	r3, sl
 8002eb4:	bfa8      	it	ge
 8002eb6:	4653      	movge	r3, sl
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	4699      	mov	r9, r3
 8002ebc:	dc36      	bgt.n	8002f2c <_printf_float+0x364>
 8002ebe:	f04f 0b00 	mov.w	fp, #0
 8002ec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ec6:	f104 021a 	add.w	r2, r4, #26
 8002eca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ece:	eba3 0309 	sub.w	r3, r3, r9
 8002ed2:	455b      	cmp	r3, fp
 8002ed4:	dc31      	bgt.n	8002f3a <_printf_float+0x372>
 8002ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ed8:	459a      	cmp	sl, r3
 8002eda:	dc3a      	bgt.n	8002f52 <_printf_float+0x38a>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	07da      	lsls	r2, r3, #31
 8002ee0:	d437      	bmi.n	8002f52 <_printf_float+0x38a>
 8002ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ee4:	ebaa 0903 	sub.w	r9, sl, r3
 8002ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002eea:	ebaa 0303 	sub.w	r3, sl, r3
 8002eee:	4599      	cmp	r9, r3
 8002ef0:	bfa8      	it	ge
 8002ef2:	4699      	movge	r9, r3
 8002ef4:	f1b9 0f00 	cmp.w	r9, #0
 8002ef8:	dc33      	bgt.n	8002f62 <_printf_float+0x39a>
 8002efa:	f04f 0800 	mov.w	r8, #0
 8002efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f02:	f104 0b1a 	add.w	fp, r4, #26
 8002f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f08:	ebaa 0303 	sub.w	r3, sl, r3
 8002f0c:	eba3 0309 	sub.w	r3, r3, r9
 8002f10:	4543      	cmp	r3, r8
 8002f12:	f77f af7a 	ble.w	8002e0a <_printf_float+0x242>
 8002f16:	2301      	movs	r3, #1
 8002f18:	465a      	mov	r2, fp
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	47b8      	blx	r7
 8002f20:	3001      	adds	r0, #1
 8002f22:	f43f aeac 	beq.w	8002c7e <_printf_float+0xb6>
 8002f26:	f108 0801 	add.w	r8, r8, #1
 8002f2a:	e7ec      	b.n	8002f06 <_printf_float+0x33e>
 8002f2c:	4642      	mov	r2, r8
 8002f2e:	4631      	mov	r1, r6
 8002f30:	4628      	mov	r0, r5
 8002f32:	47b8      	blx	r7
 8002f34:	3001      	adds	r0, #1
 8002f36:	d1c2      	bne.n	8002ebe <_printf_float+0x2f6>
 8002f38:	e6a1      	b.n	8002c7e <_printf_float+0xb6>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	4631      	mov	r1, r6
 8002f3e:	4628      	mov	r0, r5
 8002f40:	920a      	str	r2, [sp, #40]	@ 0x28
 8002f42:	47b8      	blx	r7
 8002f44:	3001      	adds	r0, #1
 8002f46:	f43f ae9a 	beq.w	8002c7e <_printf_float+0xb6>
 8002f4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f4c:	f10b 0b01 	add.w	fp, fp, #1
 8002f50:	e7bb      	b.n	8002eca <_printf_float+0x302>
 8002f52:	4631      	mov	r1, r6
 8002f54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f58:	4628      	mov	r0, r5
 8002f5a:	47b8      	blx	r7
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d1c0      	bne.n	8002ee2 <_printf_float+0x31a>
 8002f60:	e68d      	b.n	8002c7e <_printf_float+0xb6>
 8002f62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f64:	464b      	mov	r3, r9
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	4442      	add	r2, r8
 8002f6c:	47b8      	blx	r7
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d1c3      	bne.n	8002efa <_printf_float+0x332>
 8002f72:	e684      	b.n	8002c7e <_printf_float+0xb6>
 8002f74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002f78:	f1ba 0f01 	cmp.w	sl, #1
 8002f7c:	dc01      	bgt.n	8002f82 <_printf_float+0x3ba>
 8002f7e:	07db      	lsls	r3, r3, #31
 8002f80:	d536      	bpl.n	8002ff0 <_printf_float+0x428>
 8002f82:	2301      	movs	r3, #1
 8002f84:	4642      	mov	r2, r8
 8002f86:	4631      	mov	r1, r6
 8002f88:	4628      	mov	r0, r5
 8002f8a:	47b8      	blx	r7
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	f43f ae76 	beq.w	8002c7e <_printf_float+0xb6>
 8002f92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f96:	4631      	mov	r1, r6
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	f43f ae6e 	beq.w	8002c7e <_printf_float+0xb6>
 8002fa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002fae:	f7fd fd0b 	bl	80009c8 <__aeabi_dcmpeq>
 8002fb2:	b9c0      	cbnz	r0, 8002fe6 <_printf_float+0x41e>
 8002fb4:	4653      	mov	r3, sl
 8002fb6:	f108 0201 	add.w	r2, r8, #1
 8002fba:	4631      	mov	r1, r6
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	47b8      	blx	r7
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	d10c      	bne.n	8002fde <_printf_float+0x416>
 8002fc4:	e65b      	b.n	8002c7e <_printf_float+0xb6>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	465a      	mov	r2, fp
 8002fca:	4631      	mov	r1, r6
 8002fcc:	4628      	mov	r0, r5
 8002fce:	47b8      	blx	r7
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	f43f ae54 	beq.w	8002c7e <_printf_float+0xb6>
 8002fd6:	f108 0801 	add.w	r8, r8, #1
 8002fda:	45d0      	cmp	r8, sl
 8002fdc:	dbf3      	blt.n	8002fc6 <_printf_float+0x3fe>
 8002fde:	464b      	mov	r3, r9
 8002fe0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002fe4:	e6e0      	b.n	8002da8 <_printf_float+0x1e0>
 8002fe6:	f04f 0800 	mov.w	r8, #0
 8002fea:	f104 0b1a 	add.w	fp, r4, #26
 8002fee:	e7f4      	b.n	8002fda <_printf_float+0x412>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	4642      	mov	r2, r8
 8002ff4:	e7e1      	b.n	8002fba <_printf_float+0x3f2>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	464a      	mov	r2, r9
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	47b8      	blx	r7
 8003000:	3001      	adds	r0, #1
 8003002:	f43f ae3c 	beq.w	8002c7e <_printf_float+0xb6>
 8003006:	f108 0801 	add.w	r8, r8, #1
 800300a:	68e3      	ldr	r3, [r4, #12]
 800300c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800300e:	1a5b      	subs	r3, r3, r1
 8003010:	4543      	cmp	r3, r8
 8003012:	dcf0      	bgt.n	8002ff6 <_printf_float+0x42e>
 8003014:	e6fd      	b.n	8002e12 <_printf_float+0x24a>
 8003016:	f04f 0800 	mov.w	r8, #0
 800301a:	f104 0919 	add.w	r9, r4, #25
 800301e:	e7f4      	b.n	800300a <_printf_float+0x442>

08003020 <_printf_common>:
 8003020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	4616      	mov	r6, r2
 8003026:	4698      	mov	r8, r3
 8003028:	688a      	ldr	r2, [r1, #8]
 800302a:	690b      	ldr	r3, [r1, #16]
 800302c:	4607      	mov	r7, r0
 800302e:	4293      	cmp	r3, r2
 8003030:	bfb8      	it	lt
 8003032:	4613      	movlt	r3, r2
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800303a:	460c      	mov	r4, r1
 800303c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003040:	b10a      	cbz	r2, 8003046 <_printf_common+0x26>
 8003042:	3301      	adds	r3, #1
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	0699      	lsls	r1, r3, #26
 800304a:	bf42      	ittt	mi
 800304c:	6833      	ldrmi	r3, [r6, #0]
 800304e:	3302      	addmi	r3, #2
 8003050:	6033      	strmi	r3, [r6, #0]
 8003052:	6825      	ldr	r5, [r4, #0]
 8003054:	f015 0506 	ands.w	r5, r5, #6
 8003058:	d106      	bne.n	8003068 <_printf_common+0x48>
 800305a:	f104 0a19 	add.w	sl, r4, #25
 800305e:	68e3      	ldr	r3, [r4, #12]
 8003060:	6832      	ldr	r2, [r6, #0]
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	42ab      	cmp	r3, r5
 8003066:	dc2b      	bgt.n	80030c0 <_printf_common+0xa0>
 8003068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800306c:	6822      	ldr	r2, [r4, #0]
 800306e:	3b00      	subs	r3, #0
 8003070:	bf18      	it	ne
 8003072:	2301      	movne	r3, #1
 8003074:	0692      	lsls	r2, r2, #26
 8003076:	d430      	bmi.n	80030da <_printf_common+0xba>
 8003078:	4641      	mov	r1, r8
 800307a:	4638      	mov	r0, r7
 800307c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003080:	47c8      	blx	r9
 8003082:	3001      	adds	r0, #1
 8003084:	d023      	beq.n	80030ce <_printf_common+0xae>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	6922      	ldr	r2, [r4, #16]
 800308a:	f003 0306 	and.w	r3, r3, #6
 800308e:	2b04      	cmp	r3, #4
 8003090:	bf14      	ite	ne
 8003092:	2500      	movne	r5, #0
 8003094:	6833      	ldreq	r3, [r6, #0]
 8003096:	f04f 0600 	mov.w	r6, #0
 800309a:	bf08      	it	eq
 800309c:	68e5      	ldreq	r5, [r4, #12]
 800309e:	f104 041a 	add.w	r4, r4, #26
 80030a2:	bf08      	it	eq
 80030a4:	1aed      	subeq	r5, r5, r3
 80030a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030aa:	bf08      	it	eq
 80030ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030b0:	4293      	cmp	r3, r2
 80030b2:	bfc4      	itt	gt
 80030b4:	1a9b      	subgt	r3, r3, r2
 80030b6:	18ed      	addgt	r5, r5, r3
 80030b8:	42b5      	cmp	r5, r6
 80030ba:	d11a      	bne.n	80030f2 <_printf_common+0xd2>
 80030bc:	2000      	movs	r0, #0
 80030be:	e008      	b.n	80030d2 <_printf_common+0xb2>
 80030c0:	2301      	movs	r3, #1
 80030c2:	4652      	mov	r2, sl
 80030c4:	4641      	mov	r1, r8
 80030c6:	4638      	mov	r0, r7
 80030c8:	47c8      	blx	r9
 80030ca:	3001      	adds	r0, #1
 80030cc:	d103      	bne.n	80030d6 <_printf_common+0xb6>
 80030ce:	f04f 30ff 	mov.w	r0, #4294967295
 80030d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d6:	3501      	adds	r5, #1
 80030d8:	e7c1      	b.n	800305e <_printf_common+0x3e>
 80030da:	2030      	movs	r0, #48	@ 0x30
 80030dc:	18e1      	adds	r1, r4, r3
 80030de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030e8:	4422      	add	r2, r4
 80030ea:	3302      	adds	r3, #2
 80030ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030f0:	e7c2      	b.n	8003078 <_printf_common+0x58>
 80030f2:	2301      	movs	r3, #1
 80030f4:	4622      	mov	r2, r4
 80030f6:	4641      	mov	r1, r8
 80030f8:	4638      	mov	r0, r7
 80030fa:	47c8      	blx	r9
 80030fc:	3001      	adds	r0, #1
 80030fe:	d0e6      	beq.n	80030ce <_printf_common+0xae>
 8003100:	3601      	adds	r6, #1
 8003102:	e7d9      	b.n	80030b8 <_printf_common+0x98>

08003104 <_printf_i>:
 8003104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003108:	7e0f      	ldrb	r7, [r1, #24]
 800310a:	4691      	mov	r9, r2
 800310c:	2f78      	cmp	r7, #120	@ 0x78
 800310e:	4680      	mov	r8, r0
 8003110:	460c      	mov	r4, r1
 8003112:	469a      	mov	sl, r3
 8003114:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800311a:	d807      	bhi.n	800312c <_printf_i+0x28>
 800311c:	2f62      	cmp	r7, #98	@ 0x62
 800311e:	d80a      	bhi.n	8003136 <_printf_i+0x32>
 8003120:	2f00      	cmp	r7, #0
 8003122:	f000 80d1 	beq.w	80032c8 <_printf_i+0x1c4>
 8003126:	2f58      	cmp	r7, #88	@ 0x58
 8003128:	f000 80b8 	beq.w	800329c <_printf_i+0x198>
 800312c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003134:	e03a      	b.n	80031ac <_printf_i+0xa8>
 8003136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800313a:	2b15      	cmp	r3, #21
 800313c:	d8f6      	bhi.n	800312c <_printf_i+0x28>
 800313e:	a101      	add	r1, pc, #4	@ (adr r1, 8003144 <_printf_i+0x40>)
 8003140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003144:	0800319d 	.word	0x0800319d
 8003148:	080031b1 	.word	0x080031b1
 800314c:	0800312d 	.word	0x0800312d
 8003150:	0800312d 	.word	0x0800312d
 8003154:	0800312d 	.word	0x0800312d
 8003158:	0800312d 	.word	0x0800312d
 800315c:	080031b1 	.word	0x080031b1
 8003160:	0800312d 	.word	0x0800312d
 8003164:	0800312d 	.word	0x0800312d
 8003168:	0800312d 	.word	0x0800312d
 800316c:	0800312d 	.word	0x0800312d
 8003170:	080032af 	.word	0x080032af
 8003174:	080031db 	.word	0x080031db
 8003178:	08003269 	.word	0x08003269
 800317c:	0800312d 	.word	0x0800312d
 8003180:	0800312d 	.word	0x0800312d
 8003184:	080032d1 	.word	0x080032d1
 8003188:	0800312d 	.word	0x0800312d
 800318c:	080031db 	.word	0x080031db
 8003190:	0800312d 	.word	0x0800312d
 8003194:	0800312d 	.word	0x0800312d
 8003198:	08003271 	.word	0x08003271
 800319c:	6833      	ldr	r3, [r6, #0]
 800319e:	1d1a      	adds	r2, r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6032      	str	r2, [r6, #0]
 80031a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031ac:	2301      	movs	r3, #1
 80031ae:	e09c      	b.n	80032ea <_printf_i+0x1e6>
 80031b0:	6833      	ldr	r3, [r6, #0]
 80031b2:	6820      	ldr	r0, [r4, #0]
 80031b4:	1d19      	adds	r1, r3, #4
 80031b6:	6031      	str	r1, [r6, #0]
 80031b8:	0606      	lsls	r6, r0, #24
 80031ba:	d501      	bpl.n	80031c0 <_printf_i+0xbc>
 80031bc:	681d      	ldr	r5, [r3, #0]
 80031be:	e003      	b.n	80031c8 <_printf_i+0xc4>
 80031c0:	0645      	lsls	r5, r0, #25
 80031c2:	d5fb      	bpl.n	80031bc <_printf_i+0xb8>
 80031c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	da03      	bge.n	80031d4 <_printf_i+0xd0>
 80031cc:	232d      	movs	r3, #45	@ 0x2d
 80031ce:	426d      	negs	r5, r5
 80031d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031d4:	230a      	movs	r3, #10
 80031d6:	4858      	ldr	r0, [pc, #352]	@ (8003338 <_printf_i+0x234>)
 80031d8:	e011      	b.n	80031fe <_printf_i+0xfa>
 80031da:	6821      	ldr	r1, [r4, #0]
 80031dc:	6833      	ldr	r3, [r6, #0]
 80031de:	0608      	lsls	r0, r1, #24
 80031e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80031e4:	d402      	bmi.n	80031ec <_printf_i+0xe8>
 80031e6:	0649      	lsls	r1, r1, #25
 80031e8:	bf48      	it	mi
 80031ea:	b2ad      	uxthmi	r5, r5
 80031ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ee:	6033      	str	r3, [r6, #0]
 80031f0:	bf14      	ite	ne
 80031f2:	230a      	movne	r3, #10
 80031f4:	2308      	moveq	r3, #8
 80031f6:	4850      	ldr	r0, [pc, #320]	@ (8003338 <_printf_i+0x234>)
 80031f8:	2100      	movs	r1, #0
 80031fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031fe:	6866      	ldr	r6, [r4, #4]
 8003200:	2e00      	cmp	r6, #0
 8003202:	60a6      	str	r6, [r4, #8]
 8003204:	db05      	blt.n	8003212 <_printf_i+0x10e>
 8003206:	6821      	ldr	r1, [r4, #0]
 8003208:	432e      	orrs	r6, r5
 800320a:	f021 0104 	bic.w	r1, r1, #4
 800320e:	6021      	str	r1, [r4, #0]
 8003210:	d04b      	beq.n	80032aa <_printf_i+0x1a6>
 8003212:	4616      	mov	r6, r2
 8003214:	fbb5 f1f3 	udiv	r1, r5, r3
 8003218:	fb03 5711 	mls	r7, r3, r1, r5
 800321c:	5dc7      	ldrb	r7, [r0, r7]
 800321e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003222:	462f      	mov	r7, r5
 8003224:	42bb      	cmp	r3, r7
 8003226:	460d      	mov	r5, r1
 8003228:	d9f4      	bls.n	8003214 <_printf_i+0x110>
 800322a:	2b08      	cmp	r3, #8
 800322c:	d10b      	bne.n	8003246 <_printf_i+0x142>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	07df      	lsls	r7, r3, #31
 8003232:	d508      	bpl.n	8003246 <_printf_i+0x142>
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	6861      	ldr	r1, [r4, #4]
 8003238:	4299      	cmp	r1, r3
 800323a:	bfde      	ittt	le
 800323c:	2330      	movle	r3, #48	@ 0x30
 800323e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003242:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003246:	1b92      	subs	r2, r2, r6
 8003248:	6122      	str	r2, [r4, #16]
 800324a:	464b      	mov	r3, r9
 800324c:	4621      	mov	r1, r4
 800324e:	4640      	mov	r0, r8
 8003250:	f8cd a000 	str.w	sl, [sp]
 8003254:	aa03      	add	r2, sp, #12
 8003256:	f7ff fee3 	bl	8003020 <_printf_common>
 800325a:	3001      	adds	r0, #1
 800325c:	d14a      	bne.n	80032f4 <_printf_i+0x1f0>
 800325e:	f04f 30ff 	mov.w	r0, #4294967295
 8003262:	b004      	add	sp, #16
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	6023      	str	r3, [r4, #0]
 8003270:	2778      	movs	r7, #120	@ 0x78
 8003272:	4832      	ldr	r0, [pc, #200]	@ (800333c <_printf_i+0x238>)
 8003274:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	6831      	ldr	r1, [r6, #0]
 800327c:	061f      	lsls	r7, r3, #24
 800327e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003282:	d402      	bmi.n	800328a <_printf_i+0x186>
 8003284:	065f      	lsls	r7, r3, #25
 8003286:	bf48      	it	mi
 8003288:	b2ad      	uxthmi	r5, r5
 800328a:	6031      	str	r1, [r6, #0]
 800328c:	07d9      	lsls	r1, r3, #31
 800328e:	bf44      	itt	mi
 8003290:	f043 0320 	orrmi.w	r3, r3, #32
 8003294:	6023      	strmi	r3, [r4, #0]
 8003296:	b11d      	cbz	r5, 80032a0 <_printf_i+0x19c>
 8003298:	2310      	movs	r3, #16
 800329a:	e7ad      	b.n	80031f8 <_printf_i+0xf4>
 800329c:	4826      	ldr	r0, [pc, #152]	@ (8003338 <_printf_i+0x234>)
 800329e:	e7e9      	b.n	8003274 <_printf_i+0x170>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	f023 0320 	bic.w	r3, r3, #32
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	e7f6      	b.n	8003298 <_printf_i+0x194>
 80032aa:	4616      	mov	r6, r2
 80032ac:	e7bd      	b.n	800322a <_printf_i+0x126>
 80032ae:	6833      	ldr	r3, [r6, #0]
 80032b0:	6825      	ldr	r5, [r4, #0]
 80032b2:	1d18      	adds	r0, r3, #4
 80032b4:	6961      	ldr	r1, [r4, #20]
 80032b6:	6030      	str	r0, [r6, #0]
 80032b8:	062e      	lsls	r6, r5, #24
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	d501      	bpl.n	80032c2 <_printf_i+0x1be>
 80032be:	6019      	str	r1, [r3, #0]
 80032c0:	e002      	b.n	80032c8 <_printf_i+0x1c4>
 80032c2:	0668      	lsls	r0, r5, #25
 80032c4:	d5fb      	bpl.n	80032be <_printf_i+0x1ba>
 80032c6:	8019      	strh	r1, [r3, #0]
 80032c8:	2300      	movs	r3, #0
 80032ca:	4616      	mov	r6, r2
 80032cc:	6123      	str	r3, [r4, #16]
 80032ce:	e7bc      	b.n	800324a <_printf_i+0x146>
 80032d0:	6833      	ldr	r3, [r6, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	1d1a      	adds	r2, r3, #4
 80032d6:	6032      	str	r2, [r6, #0]
 80032d8:	681e      	ldr	r6, [r3, #0]
 80032da:	6862      	ldr	r2, [r4, #4]
 80032dc:	4630      	mov	r0, r6
 80032de:	f000 f9d6 	bl	800368e <memchr>
 80032e2:	b108      	cbz	r0, 80032e8 <_printf_i+0x1e4>
 80032e4:	1b80      	subs	r0, r0, r6
 80032e6:	6060      	str	r0, [r4, #4]
 80032e8:	6863      	ldr	r3, [r4, #4]
 80032ea:	6123      	str	r3, [r4, #16]
 80032ec:	2300      	movs	r3, #0
 80032ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032f2:	e7aa      	b.n	800324a <_printf_i+0x146>
 80032f4:	4632      	mov	r2, r6
 80032f6:	4649      	mov	r1, r9
 80032f8:	4640      	mov	r0, r8
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	47d0      	blx	sl
 80032fe:	3001      	adds	r0, #1
 8003300:	d0ad      	beq.n	800325e <_printf_i+0x15a>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	079b      	lsls	r3, r3, #30
 8003306:	d413      	bmi.n	8003330 <_printf_i+0x22c>
 8003308:	68e0      	ldr	r0, [r4, #12]
 800330a:	9b03      	ldr	r3, [sp, #12]
 800330c:	4298      	cmp	r0, r3
 800330e:	bfb8      	it	lt
 8003310:	4618      	movlt	r0, r3
 8003312:	e7a6      	b.n	8003262 <_printf_i+0x15e>
 8003314:	2301      	movs	r3, #1
 8003316:	4632      	mov	r2, r6
 8003318:	4649      	mov	r1, r9
 800331a:	4640      	mov	r0, r8
 800331c:	47d0      	blx	sl
 800331e:	3001      	adds	r0, #1
 8003320:	d09d      	beq.n	800325e <_printf_i+0x15a>
 8003322:	3501      	adds	r5, #1
 8003324:	68e3      	ldr	r3, [r4, #12]
 8003326:	9903      	ldr	r1, [sp, #12]
 8003328:	1a5b      	subs	r3, r3, r1
 800332a:	42ab      	cmp	r3, r5
 800332c:	dcf2      	bgt.n	8003314 <_printf_i+0x210>
 800332e:	e7eb      	b.n	8003308 <_printf_i+0x204>
 8003330:	2500      	movs	r5, #0
 8003332:	f104 0619 	add.w	r6, r4, #25
 8003336:	e7f5      	b.n	8003324 <_printf_i+0x220>
 8003338:	08005d99 	.word	0x08005d99
 800333c:	08005daa 	.word	0x08005daa

08003340 <std>:
 8003340:	2300      	movs	r3, #0
 8003342:	b510      	push	{r4, lr}
 8003344:	4604      	mov	r4, r0
 8003346:	e9c0 3300 	strd	r3, r3, [r0]
 800334a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800334e:	6083      	str	r3, [r0, #8]
 8003350:	8181      	strh	r1, [r0, #12]
 8003352:	6643      	str	r3, [r0, #100]	@ 0x64
 8003354:	81c2      	strh	r2, [r0, #14]
 8003356:	6183      	str	r3, [r0, #24]
 8003358:	4619      	mov	r1, r3
 800335a:	2208      	movs	r2, #8
 800335c:	305c      	adds	r0, #92	@ 0x5c
 800335e:	f000 f916 	bl	800358e <memset>
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <std+0x58>)
 8003364:	6224      	str	r4, [r4, #32]
 8003366:	6263      	str	r3, [r4, #36]	@ 0x24
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <std+0x5c>)
 800336a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <std+0x60>)
 800336e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <std+0x64>)
 8003372:	6323      	str	r3, [r4, #48]	@ 0x30
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <std+0x68>)
 8003376:	429c      	cmp	r4, r3
 8003378:	d006      	beq.n	8003388 <std+0x48>
 800337a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800337e:	4294      	cmp	r4, r2
 8003380:	d002      	beq.n	8003388 <std+0x48>
 8003382:	33d0      	adds	r3, #208	@ 0xd0
 8003384:	429c      	cmp	r4, r3
 8003386:	d105      	bne.n	8003394 <std+0x54>
 8003388:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003390:	f000 b97a 	b.w	8003688 <__retarget_lock_init_recursive>
 8003394:	bd10      	pop	{r4, pc}
 8003396:	bf00      	nop
 8003398:	08003509 	.word	0x08003509
 800339c:	0800352b 	.word	0x0800352b
 80033a0:	08003563 	.word	0x08003563
 80033a4:	08003587 	.word	0x08003587
 80033a8:	20000224 	.word	0x20000224

080033ac <stdio_exit_handler>:
 80033ac:	4a02      	ldr	r2, [pc, #8]	@ (80033b8 <stdio_exit_handler+0xc>)
 80033ae:	4903      	ldr	r1, [pc, #12]	@ (80033bc <stdio_exit_handler+0x10>)
 80033b0:	4803      	ldr	r0, [pc, #12]	@ (80033c0 <stdio_exit_handler+0x14>)
 80033b2:	f000 b869 	b.w	8003488 <_fwalk_sglue>
 80033b6:	bf00      	nop
 80033b8:	20000030 	.word	0x20000030
 80033bc:	08005009 	.word	0x08005009
 80033c0:	20000040 	.word	0x20000040

080033c4 <cleanup_stdio>:
 80033c4:	6841      	ldr	r1, [r0, #4]
 80033c6:	4b0c      	ldr	r3, [pc, #48]	@ (80033f8 <cleanup_stdio+0x34>)
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4299      	cmp	r1, r3
 80033cc:	4604      	mov	r4, r0
 80033ce:	d001      	beq.n	80033d4 <cleanup_stdio+0x10>
 80033d0:	f001 fe1a 	bl	8005008 <_fflush_r>
 80033d4:	68a1      	ldr	r1, [r4, #8]
 80033d6:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <cleanup_stdio+0x38>)
 80033d8:	4299      	cmp	r1, r3
 80033da:	d002      	beq.n	80033e2 <cleanup_stdio+0x1e>
 80033dc:	4620      	mov	r0, r4
 80033de:	f001 fe13 	bl	8005008 <_fflush_r>
 80033e2:	68e1      	ldr	r1, [r4, #12]
 80033e4:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <cleanup_stdio+0x3c>)
 80033e6:	4299      	cmp	r1, r3
 80033e8:	d004      	beq.n	80033f4 <cleanup_stdio+0x30>
 80033ea:	4620      	mov	r0, r4
 80033ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f0:	f001 be0a 	b.w	8005008 <_fflush_r>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	bf00      	nop
 80033f8:	20000224 	.word	0x20000224
 80033fc:	2000028c 	.word	0x2000028c
 8003400:	200002f4 	.word	0x200002f4

08003404 <global_stdio_init.part.0>:
 8003404:	b510      	push	{r4, lr}
 8003406:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <global_stdio_init.part.0+0x30>)
 8003408:	4c0b      	ldr	r4, [pc, #44]	@ (8003438 <global_stdio_init.part.0+0x34>)
 800340a:	4a0c      	ldr	r2, [pc, #48]	@ (800343c <global_stdio_init.part.0+0x38>)
 800340c:	4620      	mov	r0, r4
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	2104      	movs	r1, #4
 8003412:	2200      	movs	r2, #0
 8003414:	f7ff ff94 	bl	8003340 <std>
 8003418:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800341c:	2201      	movs	r2, #1
 800341e:	2109      	movs	r1, #9
 8003420:	f7ff ff8e 	bl	8003340 <std>
 8003424:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003428:	2202      	movs	r2, #2
 800342a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342e:	2112      	movs	r1, #18
 8003430:	f7ff bf86 	b.w	8003340 <std>
 8003434:	2000035c 	.word	0x2000035c
 8003438:	20000224 	.word	0x20000224
 800343c:	080033ad 	.word	0x080033ad

08003440 <__sfp_lock_acquire>:
 8003440:	4801      	ldr	r0, [pc, #4]	@ (8003448 <__sfp_lock_acquire+0x8>)
 8003442:	f000 b922 	b.w	800368a <__retarget_lock_acquire_recursive>
 8003446:	bf00      	nop
 8003448:	20000365 	.word	0x20000365

0800344c <__sfp_lock_release>:
 800344c:	4801      	ldr	r0, [pc, #4]	@ (8003454 <__sfp_lock_release+0x8>)
 800344e:	f000 b91d 	b.w	800368c <__retarget_lock_release_recursive>
 8003452:	bf00      	nop
 8003454:	20000365 	.word	0x20000365

08003458 <__sinit>:
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	f7ff fff0 	bl	8003440 <__sfp_lock_acquire>
 8003460:	6a23      	ldr	r3, [r4, #32]
 8003462:	b11b      	cbz	r3, 800346c <__sinit+0x14>
 8003464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003468:	f7ff bff0 	b.w	800344c <__sfp_lock_release>
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <__sinit+0x28>)
 800346e:	6223      	str	r3, [r4, #32]
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <__sinit+0x2c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f5      	bne.n	8003464 <__sinit+0xc>
 8003478:	f7ff ffc4 	bl	8003404 <global_stdio_init.part.0>
 800347c:	e7f2      	b.n	8003464 <__sinit+0xc>
 800347e:	bf00      	nop
 8003480:	080033c5 	.word	0x080033c5
 8003484:	2000035c 	.word	0x2000035c

08003488 <_fwalk_sglue>:
 8003488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800348c:	4607      	mov	r7, r0
 800348e:	4688      	mov	r8, r1
 8003490:	4614      	mov	r4, r2
 8003492:	2600      	movs	r6, #0
 8003494:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003498:	f1b9 0901 	subs.w	r9, r9, #1
 800349c:	d505      	bpl.n	80034aa <_fwalk_sglue+0x22>
 800349e:	6824      	ldr	r4, [r4, #0]
 80034a0:	2c00      	cmp	r4, #0
 80034a2:	d1f7      	bne.n	8003494 <_fwalk_sglue+0xc>
 80034a4:	4630      	mov	r0, r6
 80034a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034aa:	89ab      	ldrh	r3, [r5, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d907      	bls.n	80034c0 <_fwalk_sglue+0x38>
 80034b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034b4:	3301      	adds	r3, #1
 80034b6:	d003      	beq.n	80034c0 <_fwalk_sglue+0x38>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4638      	mov	r0, r7
 80034bc:	47c0      	blx	r8
 80034be:	4306      	orrs	r6, r0
 80034c0:	3568      	adds	r5, #104	@ 0x68
 80034c2:	e7e9      	b.n	8003498 <_fwalk_sglue+0x10>

080034c4 <siprintf>:
 80034c4:	b40e      	push	{r1, r2, r3}
 80034c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80034ca:	b510      	push	{r4, lr}
 80034cc:	2400      	movs	r4, #0
 80034ce:	b09d      	sub	sp, #116	@ 0x74
 80034d0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80034d2:	9002      	str	r0, [sp, #8]
 80034d4:	9006      	str	r0, [sp, #24]
 80034d6:	9107      	str	r1, [sp, #28]
 80034d8:	9104      	str	r1, [sp, #16]
 80034da:	4809      	ldr	r0, [pc, #36]	@ (8003500 <siprintf+0x3c>)
 80034dc:	4909      	ldr	r1, [pc, #36]	@ (8003504 <siprintf+0x40>)
 80034de:	f853 2b04 	ldr.w	r2, [r3], #4
 80034e2:	9105      	str	r1, [sp, #20]
 80034e4:	6800      	ldr	r0, [r0, #0]
 80034e6:	a902      	add	r1, sp, #8
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80034ec:	f001 fc10 	bl	8004d10 <_svfiprintf_r>
 80034f0:	9b02      	ldr	r3, [sp, #8]
 80034f2:	701c      	strb	r4, [r3, #0]
 80034f4:	b01d      	add	sp, #116	@ 0x74
 80034f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034fa:	b003      	add	sp, #12
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	2000003c 	.word	0x2000003c
 8003504:	ffff0208 	.word	0xffff0208

08003508 <__sread>:
 8003508:	b510      	push	{r4, lr}
 800350a:	460c      	mov	r4, r1
 800350c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003510:	f000 f86c 	bl	80035ec <_read_r>
 8003514:	2800      	cmp	r0, #0
 8003516:	bfab      	itete	ge
 8003518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800351a:	89a3      	ldrhlt	r3, [r4, #12]
 800351c:	181b      	addge	r3, r3, r0
 800351e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003522:	bfac      	ite	ge
 8003524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003526:	81a3      	strhlt	r3, [r4, #12]
 8003528:	bd10      	pop	{r4, pc}

0800352a <__swrite>:
 800352a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800352e:	461f      	mov	r7, r3
 8003530:	898b      	ldrh	r3, [r1, #12]
 8003532:	4605      	mov	r5, r0
 8003534:	05db      	lsls	r3, r3, #23
 8003536:	460c      	mov	r4, r1
 8003538:	4616      	mov	r6, r2
 800353a:	d505      	bpl.n	8003548 <__swrite+0x1e>
 800353c:	2302      	movs	r3, #2
 800353e:	2200      	movs	r2, #0
 8003540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003544:	f000 f840 	bl	80035c8 <_lseek_r>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	4632      	mov	r2, r6
 800354c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003550:	81a3      	strh	r3, [r4, #12]
 8003552:	4628      	mov	r0, r5
 8003554:	463b      	mov	r3, r7
 8003556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800355a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800355e:	f000 b857 	b.w	8003610 <_write_r>

08003562 <__sseek>:
 8003562:	b510      	push	{r4, lr}
 8003564:	460c      	mov	r4, r1
 8003566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356a:	f000 f82d 	bl	80035c8 <_lseek_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	bf15      	itete	ne
 8003574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800357a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800357e:	81a3      	strheq	r3, [r4, #12]
 8003580:	bf18      	it	ne
 8003582:	81a3      	strhne	r3, [r4, #12]
 8003584:	bd10      	pop	{r4, pc}

08003586 <__sclose>:
 8003586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358a:	f000 b80d 	b.w	80035a8 <_close_r>

0800358e <memset>:
 800358e:	4603      	mov	r3, r0
 8003590:	4402      	add	r2, r0
 8003592:	4293      	cmp	r3, r2
 8003594:	d100      	bne.n	8003598 <memset+0xa>
 8003596:	4770      	bx	lr
 8003598:	f803 1b01 	strb.w	r1, [r3], #1
 800359c:	e7f9      	b.n	8003592 <memset+0x4>
	...

080035a0 <_localeconv_r>:
 80035a0:	4800      	ldr	r0, [pc, #0]	@ (80035a4 <_localeconv_r+0x4>)
 80035a2:	4770      	bx	lr
 80035a4:	2000017c 	.word	0x2000017c

080035a8 <_close_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	2300      	movs	r3, #0
 80035ac:	4d05      	ldr	r5, [pc, #20]	@ (80035c4 <_close_r+0x1c>)
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	602b      	str	r3, [r5, #0]
 80035b4:	f7ff f8a5 	bl	8002702 <_close>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d102      	bne.n	80035c2 <_close_r+0x1a>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	b103      	cbz	r3, 80035c2 <_close_r+0x1a>
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	20000360 	.word	0x20000360

080035c8 <_lseek_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4604      	mov	r4, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	2200      	movs	r2, #0
 80035d2:	4d05      	ldr	r5, [pc, #20]	@ (80035e8 <_lseek_r+0x20>)
 80035d4:	602a      	str	r2, [r5, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f7ff f8b7 	bl	800274a <_lseek>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d102      	bne.n	80035e6 <_lseek_r+0x1e>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	b103      	cbz	r3, 80035e6 <_lseek_r+0x1e>
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	20000360 	.word	0x20000360

080035ec <_read_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	2200      	movs	r2, #0
 80035f6:	4d05      	ldr	r5, [pc, #20]	@ (800360c <_read_r+0x20>)
 80035f8:	602a      	str	r2, [r5, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f7ff f848 	bl	8002690 <_read>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d102      	bne.n	800360a <_read_r+0x1e>
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	b103      	cbz	r3, 800360a <_read_r+0x1e>
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	bd38      	pop	{r3, r4, r5, pc}
 800360c:	20000360 	.word	0x20000360

08003610 <_write_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	2200      	movs	r2, #0
 800361a:	4d05      	ldr	r5, [pc, #20]	@ (8003630 <_write_r+0x20>)
 800361c:	602a      	str	r2, [r5, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f7ff f853 	bl	80026ca <_write>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_write_r+0x1e>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_write_r+0x1e>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000360 	.word	0x20000360

08003634 <__errno>:
 8003634:	4b01      	ldr	r3, [pc, #4]	@ (800363c <__errno+0x8>)
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	2000003c 	.word	0x2000003c

08003640 <__libc_init_array>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	2600      	movs	r6, #0
 8003644:	4d0c      	ldr	r5, [pc, #48]	@ (8003678 <__libc_init_array+0x38>)
 8003646:	4c0d      	ldr	r4, [pc, #52]	@ (800367c <__libc_init_array+0x3c>)
 8003648:	1b64      	subs	r4, r4, r5
 800364a:	10a4      	asrs	r4, r4, #2
 800364c:	42a6      	cmp	r6, r4
 800364e:	d109      	bne.n	8003664 <__libc_init_array+0x24>
 8003650:	f002 fa60 	bl	8005b14 <_init>
 8003654:	2600      	movs	r6, #0
 8003656:	4d0a      	ldr	r5, [pc, #40]	@ (8003680 <__libc_init_array+0x40>)
 8003658:	4c0a      	ldr	r4, [pc, #40]	@ (8003684 <__libc_init_array+0x44>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	42a6      	cmp	r6, r4
 8003660:	d105      	bne.n	800366e <__libc_init_array+0x2e>
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f855 3b04 	ldr.w	r3, [r5], #4
 8003668:	4798      	blx	r3
 800366a:	3601      	adds	r6, #1
 800366c:	e7ee      	b.n	800364c <__libc_init_array+0xc>
 800366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003672:	4798      	blx	r3
 8003674:	3601      	adds	r6, #1
 8003676:	e7f2      	b.n	800365e <__libc_init_array+0x1e>
 8003678:	08006000 	.word	0x08006000
 800367c:	08006000 	.word	0x08006000
 8003680:	08006000 	.word	0x08006000
 8003684:	08006004 	.word	0x08006004

08003688 <__retarget_lock_init_recursive>:
 8003688:	4770      	bx	lr

0800368a <__retarget_lock_acquire_recursive>:
 800368a:	4770      	bx	lr

0800368c <__retarget_lock_release_recursive>:
 800368c:	4770      	bx	lr

0800368e <memchr>:
 800368e:	4603      	mov	r3, r0
 8003690:	b510      	push	{r4, lr}
 8003692:	b2c9      	uxtb	r1, r1
 8003694:	4402      	add	r2, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	4618      	mov	r0, r3
 800369a:	d101      	bne.n	80036a0 <memchr+0x12>
 800369c:	2000      	movs	r0, #0
 800369e:	e003      	b.n	80036a8 <memchr+0x1a>
 80036a0:	7804      	ldrb	r4, [r0, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	428c      	cmp	r4, r1
 80036a6:	d1f6      	bne.n	8003696 <memchr+0x8>
 80036a8:	bd10      	pop	{r4, pc}

080036aa <quorem>:
 80036aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ae:	6903      	ldr	r3, [r0, #16]
 80036b0:	690c      	ldr	r4, [r1, #16]
 80036b2:	4607      	mov	r7, r0
 80036b4:	42a3      	cmp	r3, r4
 80036b6:	db7e      	blt.n	80037b6 <quorem+0x10c>
 80036b8:	3c01      	subs	r4, #1
 80036ba:	00a3      	lsls	r3, r4, #2
 80036bc:	f100 0514 	add.w	r5, r0, #20
 80036c0:	f101 0814 	add.w	r8, r1, #20
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80036d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80036d4:	3301      	adds	r3, #1
 80036d6:	429a      	cmp	r2, r3
 80036d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80036dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80036e0:	d32e      	bcc.n	8003740 <quorem+0x96>
 80036e2:	f04f 0a00 	mov.w	sl, #0
 80036e6:	46c4      	mov	ip, r8
 80036e8:	46ae      	mov	lr, r5
 80036ea:	46d3      	mov	fp, sl
 80036ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80036f0:	b298      	uxth	r0, r3
 80036f2:	fb06 a000 	mla	r0, r6, r0, sl
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	0c02      	lsrs	r2, r0, #16
 80036fa:	fb06 2303 	mla	r3, r6, r3, r2
 80036fe:	f8de 2000 	ldr.w	r2, [lr]
 8003702:	b280      	uxth	r0, r0
 8003704:	b292      	uxth	r2, r2
 8003706:	1a12      	subs	r2, r2, r0
 8003708:	445a      	add	r2, fp
 800370a:	f8de 0000 	ldr.w	r0, [lr]
 800370e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003712:	b29b      	uxth	r3, r3
 8003714:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003718:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800371c:	b292      	uxth	r2, r2
 800371e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003722:	45e1      	cmp	r9, ip
 8003724:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003728:	f84e 2b04 	str.w	r2, [lr], #4
 800372c:	d2de      	bcs.n	80036ec <quorem+0x42>
 800372e:	9b00      	ldr	r3, [sp, #0]
 8003730:	58eb      	ldr	r3, [r5, r3]
 8003732:	b92b      	cbnz	r3, 8003740 <quorem+0x96>
 8003734:	9b01      	ldr	r3, [sp, #4]
 8003736:	3b04      	subs	r3, #4
 8003738:	429d      	cmp	r5, r3
 800373a:	461a      	mov	r2, r3
 800373c:	d32f      	bcc.n	800379e <quorem+0xf4>
 800373e:	613c      	str	r4, [r7, #16]
 8003740:	4638      	mov	r0, r7
 8003742:	f001 f981 	bl	8004a48 <__mcmp>
 8003746:	2800      	cmp	r0, #0
 8003748:	db25      	blt.n	8003796 <quorem+0xec>
 800374a:	4629      	mov	r1, r5
 800374c:	2000      	movs	r0, #0
 800374e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003752:	f8d1 c000 	ldr.w	ip, [r1]
 8003756:	fa1f fe82 	uxth.w	lr, r2
 800375a:	fa1f f38c 	uxth.w	r3, ip
 800375e:	eba3 030e 	sub.w	r3, r3, lr
 8003762:	4403      	add	r3, r0
 8003764:	0c12      	lsrs	r2, r2, #16
 8003766:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800376a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800376e:	b29b      	uxth	r3, r3
 8003770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003774:	45c1      	cmp	r9, r8
 8003776:	ea4f 4022 	mov.w	r0, r2, asr #16
 800377a:	f841 3b04 	str.w	r3, [r1], #4
 800377e:	d2e6      	bcs.n	800374e <quorem+0xa4>
 8003780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003784:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003788:	b922      	cbnz	r2, 8003794 <quorem+0xea>
 800378a:	3b04      	subs	r3, #4
 800378c:	429d      	cmp	r5, r3
 800378e:	461a      	mov	r2, r3
 8003790:	d30b      	bcc.n	80037aa <quorem+0x100>
 8003792:	613c      	str	r4, [r7, #16]
 8003794:	3601      	adds	r6, #1
 8003796:	4630      	mov	r0, r6
 8003798:	b003      	add	sp, #12
 800379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	3b04      	subs	r3, #4
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	d1cb      	bne.n	800373e <quorem+0x94>
 80037a6:	3c01      	subs	r4, #1
 80037a8:	e7c6      	b.n	8003738 <quorem+0x8e>
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	3b04      	subs	r3, #4
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	d1ef      	bne.n	8003792 <quorem+0xe8>
 80037b2:	3c01      	subs	r4, #1
 80037b4:	e7ea      	b.n	800378c <quorem+0xe2>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e7ee      	b.n	8003798 <quorem+0xee>
 80037ba:	0000      	movs	r0, r0
 80037bc:	0000      	movs	r0, r0
	...

080037c0 <_dtoa_r>:
 80037c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c4:	4614      	mov	r4, r2
 80037c6:	461d      	mov	r5, r3
 80037c8:	69c7      	ldr	r7, [r0, #28]
 80037ca:	b097      	sub	sp, #92	@ 0x5c
 80037cc:	4681      	mov	r9, r0
 80037ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80037d2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80037d4:	b97f      	cbnz	r7, 80037f6 <_dtoa_r+0x36>
 80037d6:	2010      	movs	r0, #16
 80037d8:	f000 fe0e 	bl	80043f8 <malloc>
 80037dc:	4602      	mov	r2, r0
 80037de:	f8c9 001c 	str.w	r0, [r9, #28]
 80037e2:	b920      	cbnz	r0, 80037ee <_dtoa_r+0x2e>
 80037e4:	21ef      	movs	r1, #239	@ 0xef
 80037e6:	4bac      	ldr	r3, [pc, #688]	@ (8003a98 <_dtoa_r+0x2d8>)
 80037e8:	48ac      	ldr	r0, [pc, #688]	@ (8003a9c <_dtoa_r+0x2dc>)
 80037ea:	f001 fc6d 	bl	80050c8 <__assert_func>
 80037ee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80037f2:	6007      	str	r7, [r0, #0]
 80037f4:	60c7      	str	r7, [r0, #12]
 80037f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80037fa:	6819      	ldr	r1, [r3, #0]
 80037fc:	b159      	cbz	r1, 8003816 <_dtoa_r+0x56>
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	2301      	movs	r3, #1
 8003802:	4093      	lsls	r3, r2
 8003804:	604a      	str	r2, [r1, #4]
 8003806:	608b      	str	r3, [r1, #8]
 8003808:	4648      	mov	r0, r9
 800380a:	f000 feeb 	bl	80045e4 <_Bfree>
 800380e:	2200      	movs	r2, #0
 8003810:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	1e2b      	subs	r3, r5, #0
 8003818:	bfaf      	iteee	ge
 800381a:	2300      	movge	r3, #0
 800381c:	2201      	movlt	r2, #1
 800381e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003822:	9307      	strlt	r3, [sp, #28]
 8003824:	bfa8      	it	ge
 8003826:	6033      	strge	r3, [r6, #0]
 8003828:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800382c:	4b9c      	ldr	r3, [pc, #624]	@ (8003aa0 <_dtoa_r+0x2e0>)
 800382e:	bfb8      	it	lt
 8003830:	6032      	strlt	r2, [r6, #0]
 8003832:	ea33 0308 	bics.w	r3, r3, r8
 8003836:	d112      	bne.n	800385e <_dtoa_r+0x9e>
 8003838:	f242 730f 	movw	r3, #9999	@ 0x270f
 800383c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003844:	4323      	orrs	r3, r4
 8003846:	f000 855e 	beq.w	8004306 <_dtoa_r+0xb46>
 800384a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800384c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003aa4 <_dtoa_r+0x2e4>
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8560 	beq.w	8004316 <_dtoa_r+0xb56>
 8003856:	f10a 0303 	add.w	r3, sl, #3
 800385a:	f000 bd5a 	b.w	8004312 <_dtoa_r+0xb52>
 800385e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003862:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800386a:	2200      	movs	r2, #0
 800386c:	2300      	movs	r3, #0
 800386e:	f7fd f8ab 	bl	80009c8 <__aeabi_dcmpeq>
 8003872:	4607      	mov	r7, r0
 8003874:	b158      	cbz	r0, 800388e <_dtoa_r+0xce>
 8003876:	2301      	movs	r3, #1
 8003878:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800387e:	b113      	cbz	r3, 8003886 <_dtoa_r+0xc6>
 8003880:	4b89      	ldr	r3, [pc, #548]	@ (8003aa8 <_dtoa_r+0x2e8>)
 8003882:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003aac <_dtoa_r+0x2ec>
 800388a:	f000 bd44 	b.w	8004316 <_dtoa_r+0xb56>
 800388e:	ab14      	add	r3, sp, #80	@ 0x50
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	ab15      	add	r3, sp, #84	@ 0x54
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	4648      	mov	r0, r9
 8003898:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800389c:	f001 f984 	bl	8004ba8 <__d2b>
 80038a0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80038a4:	9003      	str	r0, [sp, #12]
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	d078      	beq.n	800399c <_dtoa_r+0x1dc>
 80038aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038b0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80038b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038b8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80038bc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80038c0:	9712      	str	r7, [sp, #72]	@ 0x48
 80038c2:	4619      	mov	r1, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab0 <_dtoa_r+0x2f0>)
 80038c8:	f7fc fc5e 	bl	8000188 <__aeabi_dsub>
 80038cc:	a36c      	add	r3, pc, #432	@ (adr r3, 8003a80 <_dtoa_r+0x2c0>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc fe11 	bl	80004f8 <__aeabi_dmul>
 80038d6:	a36c      	add	r3, pc, #432	@ (adr r3, 8003a88 <_dtoa_r+0x2c8>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	f7fc fc56 	bl	800018c <__adddf3>
 80038e0:	4604      	mov	r4, r0
 80038e2:	4630      	mov	r0, r6
 80038e4:	460d      	mov	r5, r1
 80038e6:	f7fc fd9d 	bl	8000424 <__aeabi_i2d>
 80038ea:	a369      	add	r3, pc, #420	@ (adr r3, 8003a90 <_dtoa_r+0x2d0>)
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f7fc fe02 	bl	80004f8 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4620      	mov	r0, r4
 80038fa:	4629      	mov	r1, r5
 80038fc:	f7fc fc46 	bl	800018c <__adddf3>
 8003900:	4604      	mov	r4, r0
 8003902:	460d      	mov	r5, r1
 8003904:	f7fd f8a8 	bl	8000a58 <__aeabi_d2iz>
 8003908:	2200      	movs	r2, #0
 800390a:	4607      	mov	r7, r0
 800390c:	2300      	movs	r3, #0
 800390e:	4620      	mov	r0, r4
 8003910:	4629      	mov	r1, r5
 8003912:	f7fd f863 	bl	80009dc <__aeabi_dcmplt>
 8003916:	b140      	cbz	r0, 800392a <_dtoa_r+0x16a>
 8003918:	4638      	mov	r0, r7
 800391a:	f7fc fd83 	bl	8000424 <__aeabi_i2d>
 800391e:	4622      	mov	r2, r4
 8003920:	462b      	mov	r3, r5
 8003922:	f7fd f851 	bl	80009c8 <__aeabi_dcmpeq>
 8003926:	b900      	cbnz	r0, 800392a <_dtoa_r+0x16a>
 8003928:	3f01      	subs	r7, #1
 800392a:	2f16      	cmp	r7, #22
 800392c:	d854      	bhi.n	80039d8 <_dtoa_r+0x218>
 800392e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003932:	4b60      	ldr	r3, [pc, #384]	@ (8003ab4 <_dtoa_r+0x2f4>)
 8003934:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f7fd f84e 	bl	80009dc <__aeabi_dcmplt>
 8003940:	2800      	cmp	r0, #0
 8003942:	d04b      	beq.n	80039dc <_dtoa_r+0x21c>
 8003944:	2300      	movs	r3, #0
 8003946:	3f01      	subs	r7, #1
 8003948:	930f      	str	r3, [sp, #60]	@ 0x3c
 800394a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800394c:	1b9b      	subs	r3, r3, r6
 800394e:	1e5a      	subs	r2, r3, #1
 8003950:	bf49      	itett	mi
 8003952:	f1c3 0301 	rsbmi	r3, r3, #1
 8003956:	2300      	movpl	r3, #0
 8003958:	9304      	strmi	r3, [sp, #16]
 800395a:	2300      	movmi	r3, #0
 800395c:	9209      	str	r2, [sp, #36]	@ 0x24
 800395e:	bf54      	ite	pl
 8003960:	9304      	strpl	r3, [sp, #16]
 8003962:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003964:	2f00      	cmp	r7, #0
 8003966:	db3b      	blt.n	80039e0 <_dtoa_r+0x220>
 8003968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800396a:	970e      	str	r7, [sp, #56]	@ 0x38
 800396c:	443b      	add	r3, r7
 800396e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003970:	2300      	movs	r3, #0
 8003972:	930a      	str	r3, [sp, #40]	@ 0x28
 8003974:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003976:	2b09      	cmp	r3, #9
 8003978:	d865      	bhi.n	8003a46 <_dtoa_r+0x286>
 800397a:	2b05      	cmp	r3, #5
 800397c:	bfc4      	itt	gt
 800397e:	3b04      	subgt	r3, #4
 8003980:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003984:	bfc8      	it	gt
 8003986:	2400      	movgt	r4, #0
 8003988:	f1a3 0302 	sub.w	r3, r3, #2
 800398c:	bfd8      	it	le
 800398e:	2401      	movle	r4, #1
 8003990:	2b03      	cmp	r3, #3
 8003992:	d864      	bhi.n	8003a5e <_dtoa_r+0x29e>
 8003994:	e8df f003 	tbb	[pc, r3]
 8003998:	2c385553 	.word	0x2c385553
 800399c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80039a0:	441e      	add	r6, r3
 80039a2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	bfc1      	itttt	gt
 80039aa:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80039ae:	fa08 f803 	lslgt.w	r8, r8, r3
 80039b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80039b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80039ba:	bfd6      	itet	le
 80039bc:	f1c3 0320 	rsble	r3, r3, #32
 80039c0:	ea48 0003 	orrgt.w	r0, r8, r3
 80039c4:	fa04 f003 	lslle.w	r0, r4, r3
 80039c8:	f7fc fd1c 	bl	8000404 <__aeabi_ui2d>
 80039cc:	2201      	movs	r2, #1
 80039ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80039d2:	3e01      	subs	r6, #1
 80039d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80039d6:	e774      	b.n	80038c2 <_dtoa_r+0x102>
 80039d8:	2301      	movs	r3, #1
 80039da:	e7b5      	b.n	8003948 <_dtoa_r+0x188>
 80039dc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80039de:	e7b4      	b.n	800394a <_dtoa_r+0x18a>
 80039e0:	9b04      	ldr	r3, [sp, #16]
 80039e2:	1bdb      	subs	r3, r3, r7
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	427b      	negs	r3, r7
 80039e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80039ea:	2300      	movs	r3, #0
 80039ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80039ee:	e7c1      	b.n	8003974 <_dtoa_r+0x1b4>
 80039f0:	2301      	movs	r3, #1
 80039f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039f6:	eb07 0b03 	add.w	fp, r7, r3
 80039fa:	f10b 0301 	add.w	r3, fp, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	9308      	str	r3, [sp, #32]
 8003a02:	bfb8      	it	lt
 8003a04:	2301      	movlt	r3, #1
 8003a06:	e006      	b.n	8003a16 <_dtoa_r+0x256>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	dd28      	ble.n	8003a64 <_dtoa_r+0x2a4>
 8003a12:	469b      	mov	fp, r3
 8003a14:	9308      	str	r3, [sp, #32]
 8003a16:	2100      	movs	r1, #0
 8003a18:	2204      	movs	r2, #4
 8003a1a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003a1e:	f102 0514 	add.w	r5, r2, #20
 8003a22:	429d      	cmp	r5, r3
 8003a24:	d926      	bls.n	8003a74 <_dtoa_r+0x2b4>
 8003a26:	6041      	str	r1, [r0, #4]
 8003a28:	4648      	mov	r0, r9
 8003a2a:	f000 fd9b 	bl	8004564 <_Balloc>
 8003a2e:	4682      	mov	sl, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d143      	bne.n	8003abc <_dtoa_r+0x2fc>
 8003a34:	4602      	mov	r2, r0
 8003a36:	f240 11af 	movw	r1, #431	@ 0x1af
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab8 <_dtoa_r+0x2f8>)
 8003a3c:	e6d4      	b.n	80037e8 <_dtoa_r+0x28>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e7e3      	b.n	8003a0a <_dtoa_r+0x24a>
 8003a42:	2300      	movs	r3, #0
 8003a44:	e7d5      	b.n	80039f2 <_dtoa_r+0x232>
 8003a46:	2401      	movs	r4, #1
 8003a48:	2300      	movs	r3, #0
 8003a4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003a4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8003a4e:	f04f 3bff 	mov.w	fp, #4294967295
 8003a52:	2200      	movs	r2, #0
 8003a54:	2312      	movs	r3, #18
 8003a56:	f8cd b020 	str.w	fp, [sp, #32]
 8003a5a:	9221      	str	r2, [sp, #132]	@ 0x84
 8003a5c:	e7db      	b.n	8003a16 <_dtoa_r+0x256>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a62:	e7f4      	b.n	8003a4e <_dtoa_r+0x28e>
 8003a64:	f04f 0b01 	mov.w	fp, #1
 8003a68:	465b      	mov	r3, fp
 8003a6a:	f8cd b020 	str.w	fp, [sp, #32]
 8003a6e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003a72:	e7d0      	b.n	8003a16 <_dtoa_r+0x256>
 8003a74:	3101      	adds	r1, #1
 8003a76:	0052      	lsls	r2, r2, #1
 8003a78:	e7d1      	b.n	8003a1e <_dtoa_r+0x25e>
 8003a7a:	bf00      	nop
 8003a7c:	f3af 8000 	nop.w
 8003a80:	636f4361 	.word	0x636f4361
 8003a84:	3fd287a7 	.word	0x3fd287a7
 8003a88:	8b60c8b3 	.word	0x8b60c8b3
 8003a8c:	3fc68a28 	.word	0x3fc68a28
 8003a90:	509f79fb 	.word	0x509f79fb
 8003a94:	3fd34413 	.word	0x3fd34413
 8003a98:	08005dc8 	.word	0x08005dc8
 8003a9c:	08005ddf 	.word	0x08005ddf
 8003aa0:	7ff00000 	.word	0x7ff00000
 8003aa4:	08005dc4 	.word	0x08005dc4
 8003aa8:	08005d98 	.word	0x08005d98
 8003aac:	08005d97 	.word	0x08005d97
 8003ab0:	3ff80000 	.word	0x3ff80000
 8003ab4:	08005f30 	.word	0x08005f30
 8003ab8:	08005e37 	.word	0x08005e37
 8003abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003ac0:	6018      	str	r0, [r3, #0]
 8003ac2:	9b08      	ldr	r3, [sp, #32]
 8003ac4:	2b0e      	cmp	r3, #14
 8003ac6:	f200 80a1 	bhi.w	8003c0c <_dtoa_r+0x44c>
 8003aca:	2c00      	cmp	r4, #0
 8003acc:	f000 809e 	beq.w	8003c0c <_dtoa_r+0x44c>
 8003ad0:	2f00      	cmp	r7, #0
 8003ad2:	dd33      	ble.n	8003b3c <_dtoa_r+0x37c>
 8003ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8003d48 <_dtoa_r+0x588>)
 8003ad6:	f007 020f 	and.w	r2, r7, #15
 8003ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ade:	05f8      	lsls	r0, r7, #23
 8003ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ae4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003aec:	d516      	bpl.n	8003b1c <_dtoa_r+0x35c>
 8003aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003af2:	4b96      	ldr	r3, [pc, #600]	@ (8003d4c <_dtoa_r+0x58c>)
 8003af4:	2603      	movs	r6, #3
 8003af6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003afa:	f7fc fe27 	bl	800074c <__aeabi_ddiv>
 8003afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b02:	f004 040f 	and.w	r4, r4, #15
 8003b06:	4d91      	ldr	r5, [pc, #580]	@ (8003d4c <_dtoa_r+0x58c>)
 8003b08:	b954      	cbnz	r4, 8003b20 <_dtoa_r+0x360>
 8003b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b12:	f7fc fe1b 	bl	800074c <__aeabi_ddiv>
 8003b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b1a:	e028      	b.n	8003b6e <_dtoa_r+0x3ae>
 8003b1c:	2602      	movs	r6, #2
 8003b1e:	e7f2      	b.n	8003b06 <_dtoa_r+0x346>
 8003b20:	07e1      	lsls	r1, r4, #31
 8003b22:	d508      	bpl.n	8003b36 <_dtoa_r+0x376>
 8003b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b2c:	f7fc fce4 	bl	80004f8 <__aeabi_dmul>
 8003b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003b34:	3601      	adds	r6, #1
 8003b36:	1064      	asrs	r4, r4, #1
 8003b38:	3508      	adds	r5, #8
 8003b3a:	e7e5      	b.n	8003b08 <_dtoa_r+0x348>
 8003b3c:	f000 80af 	beq.w	8003c9e <_dtoa_r+0x4de>
 8003b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b44:	427c      	negs	r4, r7
 8003b46:	4b80      	ldr	r3, [pc, #512]	@ (8003d48 <_dtoa_r+0x588>)
 8003b48:	f004 020f 	and.w	r2, r4, #15
 8003b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f7fc fcd0 	bl	80004f8 <__aeabi_dmul>
 8003b58:	2602      	movs	r6, #2
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b60:	4d7a      	ldr	r5, [pc, #488]	@ (8003d4c <_dtoa_r+0x58c>)
 8003b62:	1124      	asrs	r4, r4, #4
 8003b64:	2c00      	cmp	r4, #0
 8003b66:	f040 808f 	bne.w	8003c88 <_dtoa_r+0x4c8>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1d3      	bne.n	8003b16 <_dtoa_r+0x356>
 8003b6e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8094 	beq.w	8003ca2 <_dtoa_r+0x4e2>
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	4629      	mov	r1, r5
 8003b80:	4b73      	ldr	r3, [pc, #460]	@ (8003d50 <_dtoa_r+0x590>)
 8003b82:	f7fc ff2b 	bl	80009dc <__aeabi_dcmplt>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	f000 808b 	beq.w	8003ca2 <_dtoa_r+0x4e2>
 8003b8c:	9b08      	ldr	r3, [sp, #32]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8087 	beq.w	8003ca2 <_dtoa_r+0x4e2>
 8003b94:	f1bb 0f00 	cmp.w	fp, #0
 8003b98:	dd34      	ble.n	8003c04 <_dtoa_r+0x444>
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8003d54 <_dtoa_r+0x594>)
 8003ba2:	f7fc fca9 	bl	80004f8 <__aeabi_dmul>
 8003ba6:	465c      	mov	r4, fp
 8003ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003bac:	f107 38ff 	add.w	r8, r7, #4294967295
 8003bb0:	3601      	adds	r6, #1
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f7fc fc36 	bl	8000424 <__aeabi_i2d>
 8003bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003bbc:	f7fc fc9c 	bl	80004f8 <__aeabi_dmul>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4b65      	ldr	r3, [pc, #404]	@ (8003d58 <_dtoa_r+0x598>)
 8003bc4:	f7fc fae2 	bl	800018c <__adddf3>
 8003bc8:	4605      	mov	r5, r0
 8003bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003bce:	2c00      	cmp	r4, #0
 8003bd0:	d16a      	bne.n	8003ca8 <_dtoa_r+0x4e8>
 8003bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4b60      	ldr	r3, [pc, #384]	@ (8003d5c <_dtoa_r+0x59c>)
 8003bda:	f7fc fad5 	bl	8000188 <__aeabi_dsub>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4633      	mov	r3, r6
 8003bea:	f7fc ff15 	bl	8000a18 <__aeabi_dcmpgt>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	f040 8298 	bne.w	8004124 <_dtoa_r+0x964>
 8003bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003bfe:	f7fc feed 	bl	80009dc <__aeabi_dcmplt>
 8003c02:	bb38      	cbnz	r0, 8003c54 <_dtoa_r+0x494>
 8003c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003c08:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f2c0 8157 	blt.w	8003ec2 <_dtoa_r+0x702>
 8003c14:	2f0e      	cmp	r7, #14
 8003c16:	f300 8154 	bgt.w	8003ec2 <_dtoa_r+0x702>
 8003c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d48 <_dtoa_r+0x588>)
 8003c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003c28:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f280 80e5 	bge.w	8003dfa <_dtoa_r+0x63a>
 8003c30:	9b08      	ldr	r3, [sp, #32]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f300 80e1 	bgt.w	8003dfa <_dtoa_r+0x63a>
 8003c38:	d10c      	bne.n	8003c54 <_dtoa_r+0x494>
 8003c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4b46      	ldr	r3, [pc, #280]	@ (8003d5c <_dtoa_r+0x59c>)
 8003c42:	f7fc fc59 	bl	80004f8 <__aeabi_dmul>
 8003c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c4a:	f7fc fedb 	bl	8000a04 <__aeabi_dcmpge>
 8003c4e:	2800      	cmp	r0, #0
 8003c50:	f000 8266 	beq.w	8004120 <_dtoa_r+0x960>
 8003c54:	2400      	movs	r4, #0
 8003c56:	4625      	mov	r5, r4
 8003c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003c5a:	4656      	mov	r6, sl
 8003c5c:	ea6f 0803 	mvn.w	r8, r3
 8003c60:	2700      	movs	r7, #0
 8003c62:	4621      	mov	r1, r4
 8003c64:	4648      	mov	r0, r9
 8003c66:	f000 fcbd 	bl	80045e4 <_Bfree>
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	f000 80bd 	beq.w	8003dea <_dtoa_r+0x62a>
 8003c70:	b12f      	cbz	r7, 8003c7e <_dtoa_r+0x4be>
 8003c72:	42af      	cmp	r7, r5
 8003c74:	d003      	beq.n	8003c7e <_dtoa_r+0x4be>
 8003c76:	4639      	mov	r1, r7
 8003c78:	4648      	mov	r0, r9
 8003c7a:	f000 fcb3 	bl	80045e4 <_Bfree>
 8003c7e:	4629      	mov	r1, r5
 8003c80:	4648      	mov	r0, r9
 8003c82:	f000 fcaf 	bl	80045e4 <_Bfree>
 8003c86:	e0b0      	b.n	8003dea <_dtoa_r+0x62a>
 8003c88:	07e2      	lsls	r2, r4, #31
 8003c8a:	d505      	bpl.n	8003c98 <_dtoa_r+0x4d8>
 8003c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c90:	f7fc fc32 	bl	80004f8 <__aeabi_dmul>
 8003c94:	2301      	movs	r3, #1
 8003c96:	3601      	adds	r6, #1
 8003c98:	1064      	asrs	r4, r4, #1
 8003c9a:	3508      	adds	r5, #8
 8003c9c:	e762      	b.n	8003b64 <_dtoa_r+0x3a4>
 8003c9e:	2602      	movs	r6, #2
 8003ca0:	e765      	b.n	8003b6e <_dtoa_r+0x3ae>
 8003ca2:	46b8      	mov	r8, r7
 8003ca4:	9c08      	ldr	r4, [sp, #32]
 8003ca6:	e784      	b.n	8003bb2 <_dtoa_r+0x3f2>
 8003ca8:	4b27      	ldr	r3, [pc, #156]	@ (8003d48 <_dtoa_r+0x588>)
 8003caa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003cb4:	4454      	add	r4, sl
 8003cb6:	2900      	cmp	r1, #0
 8003cb8:	d054      	beq.n	8003d64 <_dtoa_r+0x5a4>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	4928      	ldr	r1, [pc, #160]	@ (8003d60 <_dtoa_r+0x5a0>)
 8003cbe:	f7fc fd45 	bl	800074c <__aeabi_ddiv>
 8003cc2:	4633      	mov	r3, r6
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	f7fc fa5f 	bl	8000188 <__aeabi_dsub>
 8003cca:	4656      	mov	r6, sl
 8003ccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cd4:	f7fc fec0 	bl	8000a58 <__aeabi_d2iz>
 8003cd8:	4605      	mov	r5, r0
 8003cda:	f7fc fba3 	bl	8000424 <__aeabi_i2d>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ce6:	f7fc fa4f 	bl	8000188 <__aeabi_dsub>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	3530      	adds	r5, #48	@ 0x30
 8003cf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003cf8:	f806 5b01 	strb.w	r5, [r6], #1
 8003cfc:	f7fc fe6e 	bl	80009dc <__aeabi_dcmplt>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d172      	bne.n	8003dea <_dtoa_r+0x62a>
 8003d04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d08:	2000      	movs	r0, #0
 8003d0a:	4911      	ldr	r1, [pc, #68]	@ (8003d50 <_dtoa_r+0x590>)
 8003d0c:	f7fc fa3c 	bl	8000188 <__aeabi_dsub>
 8003d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d14:	f7fc fe62 	bl	80009dc <__aeabi_dcmplt>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f040 80b4 	bne.w	8003e86 <_dtoa_r+0x6c6>
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	f43f af70 	beq.w	8003c04 <_dtoa_r+0x444>
 8003d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <_dtoa_r+0x594>)
 8003d2c:	f7fc fbe4 	bl	80004f8 <__aeabi_dmul>
 8003d30:	2200      	movs	r2, #0
 8003d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <_dtoa_r+0x594>)
 8003d3c:	f7fc fbdc 	bl	80004f8 <__aeabi_dmul>
 8003d40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d44:	e7c4      	b.n	8003cd0 <_dtoa_r+0x510>
 8003d46:	bf00      	nop
 8003d48:	08005f30 	.word	0x08005f30
 8003d4c:	08005f08 	.word	0x08005f08
 8003d50:	3ff00000 	.word	0x3ff00000
 8003d54:	40240000 	.word	0x40240000
 8003d58:	401c0000 	.word	0x401c0000
 8003d5c:	40140000 	.word	0x40140000
 8003d60:	3fe00000 	.word	0x3fe00000
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7fc fbc6 	bl	80004f8 <__aeabi_dmul>
 8003d6c:	4656      	mov	r6, sl
 8003d6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d72:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d78:	f7fc fe6e 	bl	8000a58 <__aeabi_d2iz>
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	f7fc fb51 	bl	8000424 <__aeabi_i2d>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d8a:	f7fc f9fd 	bl	8000188 <__aeabi_dsub>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	3530      	adds	r5, #48	@ 0x30
 8003d94:	f806 5b01 	strb.w	r5, [r6], #1
 8003d98:	42a6      	cmp	r6, r4
 8003d9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	d124      	bne.n	8003dee <_dtoa_r+0x62e>
 8003da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003da8:	4bae      	ldr	r3, [pc, #696]	@ (8004064 <_dtoa_r+0x8a4>)
 8003daa:	f7fc f9ef 	bl	800018c <__adddf3>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003db6:	f7fc fe2f 	bl	8000a18 <__aeabi_dcmpgt>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d163      	bne.n	8003e86 <_dtoa_r+0x6c6>
 8003dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	49a7      	ldr	r1, [pc, #668]	@ (8004064 <_dtoa_r+0x8a4>)
 8003dc6:	f7fc f9df 	bl	8000188 <__aeabi_dsub>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dd2:	f7fc fe03 	bl	80009dc <__aeabi_dcmplt>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	f43f af14 	beq.w	8003c04 <_dtoa_r+0x444>
 8003ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003dde:	1e73      	subs	r3, r6, #1
 8003de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003de2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003de6:	2b30      	cmp	r3, #48	@ 0x30
 8003de8:	d0f8      	beq.n	8003ddc <_dtoa_r+0x61c>
 8003dea:	4647      	mov	r7, r8
 8003dec:	e03b      	b.n	8003e66 <_dtoa_r+0x6a6>
 8003dee:	4b9e      	ldr	r3, [pc, #632]	@ (8004068 <_dtoa_r+0x8a8>)
 8003df0:	f7fc fb82 	bl	80004f8 <__aeabi_dmul>
 8003df4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003df8:	e7bc      	b.n	8003d74 <_dtoa_r+0x5b4>
 8003dfa:	4656      	mov	r6, sl
 8003dfc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003e00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e04:	4620      	mov	r0, r4
 8003e06:	4629      	mov	r1, r5
 8003e08:	f7fc fca0 	bl	800074c <__aeabi_ddiv>
 8003e0c:	f7fc fe24 	bl	8000a58 <__aeabi_d2iz>
 8003e10:	4680      	mov	r8, r0
 8003e12:	f7fc fb07 	bl	8000424 <__aeabi_i2d>
 8003e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e1a:	f7fc fb6d 	bl	80004f8 <__aeabi_dmul>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7fc f9af 	bl	8000188 <__aeabi_dsub>
 8003e2a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003e2e:	9d08      	ldr	r5, [sp, #32]
 8003e30:	f806 4b01 	strb.w	r4, [r6], #1
 8003e34:	eba6 040a 	sub.w	r4, r6, sl
 8003e38:	42a5      	cmp	r5, r4
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	d133      	bne.n	8003ea8 <_dtoa_r+0x6e8>
 8003e40:	f7fc f9a4 	bl	800018c <__adddf3>
 8003e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e48:	4604      	mov	r4, r0
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	f7fc fde4 	bl	8000a18 <__aeabi_dcmpgt>
 8003e50:	b9c0      	cbnz	r0, 8003e84 <_dtoa_r+0x6c4>
 8003e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e56:	4620      	mov	r0, r4
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f7fc fdb5 	bl	80009c8 <__aeabi_dcmpeq>
 8003e5e:	b110      	cbz	r0, 8003e66 <_dtoa_r+0x6a6>
 8003e60:	f018 0f01 	tst.w	r8, #1
 8003e64:	d10e      	bne.n	8003e84 <_dtoa_r+0x6c4>
 8003e66:	4648      	mov	r0, r9
 8003e68:	9903      	ldr	r1, [sp, #12]
 8003e6a:	f000 fbbb 	bl	80045e4 <_Bfree>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	7033      	strb	r3, [r6, #0]
 8003e72:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003e74:	3701      	adds	r7, #1
 8003e76:	601f      	str	r7, [r3, #0]
 8003e78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 824b 	beq.w	8004316 <_dtoa_r+0xb56>
 8003e80:	601e      	str	r6, [r3, #0]
 8003e82:	e248      	b.n	8004316 <_dtoa_r+0xb56>
 8003e84:	46b8      	mov	r8, r7
 8003e86:	4633      	mov	r3, r6
 8003e88:	461e      	mov	r6, r3
 8003e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e8e:	2a39      	cmp	r2, #57	@ 0x39
 8003e90:	d106      	bne.n	8003ea0 <_dtoa_r+0x6e0>
 8003e92:	459a      	cmp	sl, r3
 8003e94:	d1f8      	bne.n	8003e88 <_dtoa_r+0x6c8>
 8003e96:	2230      	movs	r2, #48	@ 0x30
 8003e98:	f108 0801 	add.w	r8, r8, #1
 8003e9c:	f88a 2000 	strb.w	r2, [sl]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	3201      	adds	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e7a0      	b.n	8003dea <_dtoa_r+0x62a>
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4b6f      	ldr	r3, [pc, #444]	@ (8004068 <_dtoa_r+0x8a8>)
 8003eac:	f7fc fb24 	bl	80004f8 <__aeabi_dmul>
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	460d      	mov	r5, r1
 8003eb8:	f7fc fd86 	bl	80009c8 <__aeabi_dcmpeq>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d09f      	beq.n	8003e00 <_dtoa_r+0x640>
 8003ec0:	e7d1      	b.n	8003e66 <_dtoa_r+0x6a6>
 8003ec2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	f000 80ea 	beq.w	800409e <_dtoa_r+0x8de>
 8003eca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ecc:	2a01      	cmp	r2, #1
 8003ece:	f300 80cd 	bgt.w	800406c <_dtoa_r+0x8ac>
 8003ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003ed4:	2a00      	cmp	r2, #0
 8003ed6:	f000 80c1 	beq.w	800405c <_dtoa_r+0x89c>
 8003eda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003ede:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003ee0:	9e04      	ldr	r6, [sp, #16]
 8003ee2:	9a04      	ldr	r2, [sp, #16]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	441a      	add	r2, r3
 8003ee8:	9204      	str	r2, [sp, #16]
 8003eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eec:	4648      	mov	r0, r9
 8003eee:	441a      	add	r2, r3
 8003ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ef2:	f000 fc2b 	bl	800474c <__i2b>
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	b166      	cbz	r6, 8003f14 <_dtoa_r+0x754>
 8003efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	dd09      	ble.n	8003f14 <_dtoa_r+0x754>
 8003f00:	42b3      	cmp	r3, r6
 8003f02:	bfa8      	it	ge
 8003f04:	4633      	movge	r3, r6
 8003f06:	9a04      	ldr	r2, [sp, #16]
 8003f08:	1af6      	subs	r6, r6, r3
 8003f0a:	1ad2      	subs	r2, r2, r3
 8003f0c:	9204      	str	r2, [sp, #16]
 8003f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f16:	b30b      	cbz	r3, 8003f5c <_dtoa_r+0x79c>
 8003f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80c6 	beq.w	80040ac <_dtoa_r+0x8ec>
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	f000 80c0 	beq.w	80040a6 <_dtoa_r+0x8e6>
 8003f26:	4629      	mov	r1, r5
 8003f28:	4622      	mov	r2, r4
 8003f2a:	4648      	mov	r0, r9
 8003f2c:	f000 fcc6 	bl	80048bc <__pow5mult>
 8003f30:	9a03      	ldr	r2, [sp, #12]
 8003f32:	4601      	mov	r1, r0
 8003f34:	4605      	mov	r5, r0
 8003f36:	4648      	mov	r0, r9
 8003f38:	f000 fc1e 	bl	8004778 <__multiply>
 8003f3c:	9903      	ldr	r1, [sp, #12]
 8003f3e:	4680      	mov	r8, r0
 8003f40:	4648      	mov	r0, r9
 8003f42:	f000 fb4f 	bl	80045e4 <_Bfree>
 8003f46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f48:	1b1b      	subs	r3, r3, r4
 8003f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f4c:	f000 80b1 	beq.w	80040b2 <_dtoa_r+0x8f2>
 8003f50:	4641      	mov	r1, r8
 8003f52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f54:	4648      	mov	r0, r9
 8003f56:	f000 fcb1 	bl	80048bc <__pow5mult>
 8003f5a:	9003      	str	r0, [sp, #12]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4648      	mov	r0, r9
 8003f60:	f000 fbf4 	bl	800474c <__i2b>
 8003f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f66:	4604      	mov	r4, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 81d8 	beq.w	800431e <_dtoa_r+0xb5e>
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4601      	mov	r1, r0
 8003f72:	4648      	mov	r0, r9
 8003f74:	f000 fca2 	bl	80048bc <__pow5mult>
 8003f78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f300 809f 	bgt.w	80040c0 <_dtoa_r+0x900>
 8003f82:	9b06      	ldr	r3, [sp, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 8097 	bne.w	80040b8 <_dtoa_r+0x8f8>
 8003f8a:	9b07      	ldr	r3, [sp, #28]
 8003f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 8093 	bne.w	80040bc <_dtoa_r+0x8fc>
 8003f96:	9b07      	ldr	r3, [sp, #28]
 8003f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f9c:	0d1b      	lsrs	r3, r3, #20
 8003f9e:	051b      	lsls	r3, r3, #20
 8003fa0:	b133      	cbz	r3, 8003fb0 <_dtoa_r+0x7f0>
 8003fa2:	9b04      	ldr	r3, [sp, #16]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	9304      	str	r3, [sp, #16]
 8003fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003faa:	3301      	adds	r3, #1
 8003fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fae:	2301      	movs	r3, #1
 8003fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 81b8 	beq.w	800432a <_dtoa_r+0xb6a>
 8003fba:	6923      	ldr	r3, [r4, #16]
 8003fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003fc0:	6918      	ldr	r0, [r3, #16]
 8003fc2:	f000 fb77 	bl	80046b4 <__hi0bits>
 8003fc6:	f1c0 0020 	rsb	r0, r0, #32
 8003fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fcc:	4418      	add	r0, r3
 8003fce:	f010 001f 	ands.w	r0, r0, #31
 8003fd2:	f000 8082 	beq.w	80040da <_dtoa_r+0x91a>
 8003fd6:	f1c0 0320 	rsb	r3, r0, #32
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	dd73      	ble.n	80040c6 <_dtoa_r+0x906>
 8003fde:	9b04      	ldr	r3, [sp, #16]
 8003fe0:	f1c0 001c 	rsb	r0, r0, #28
 8003fe4:	4403      	add	r3, r0
 8003fe6:	9304      	str	r3, [sp, #16]
 8003fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fea:	4406      	add	r6, r0
 8003fec:	4403      	add	r3, r0
 8003fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ff0:	9b04      	ldr	r3, [sp, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	dd05      	ble.n	8004002 <_dtoa_r+0x842>
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4648      	mov	r0, r9
 8003ffa:	9903      	ldr	r1, [sp, #12]
 8003ffc:	f000 fcb8 	bl	8004970 <__lshift>
 8004000:	9003      	str	r0, [sp, #12]
 8004002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	dd05      	ble.n	8004014 <_dtoa_r+0x854>
 8004008:	4621      	mov	r1, r4
 800400a:	461a      	mov	r2, r3
 800400c:	4648      	mov	r0, r9
 800400e:	f000 fcaf 	bl	8004970 <__lshift>
 8004012:	4604      	mov	r4, r0
 8004014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d061      	beq.n	80040de <_dtoa_r+0x91e>
 800401a:	4621      	mov	r1, r4
 800401c:	9803      	ldr	r0, [sp, #12]
 800401e:	f000 fd13 	bl	8004a48 <__mcmp>
 8004022:	2800      	cmp	r0, #0
 8004024:	da5b      	bge.n	80040de <_dtoa_r+0x91e>
 8004026:	2300      	movs	r3, #0
 8004028:	220a      	movs	r2, #10
 800402a:	4648      	mov	r0, r9
 800402c:	9903      	ldr	r1, [sp, #12]
 800402e:	f000 fafb 	bl	8004628 <__multadd>
 8004032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004034:	f107 38ff 	add.w	r8, r7, #4294967295
 8004038:	9003      	str	r0, [sp, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8177 	beq.w	800432e <_dtoa_r+0xb6e>
 8004040:	4629      	mov	r1, r5
 8004042:	2300      	movs	r3, #0
 8004044:	220a      	movs	r2, #10
 8004046:	4648      	mov	r0, r9
 8004048:	f000 faee 	bl	8004628 <__multadd>
 800404c:	f1bb 0f00 	cmp.w	fp, #0
 8004050:	4605      	mov	r5, r0
 8004052:	dc6f      	bgt.n	8004134 <_dtoa_r+0x974>
 8004054:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004056:	2b02      	cmp	r3, #2
 8004058:	dc49      	bgt.n	80040ee <_dtoa_r+0x92e>
 800405a:	e06b      	b.n	8004134 <_dtoa_r+0x974>
 800405c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800405e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004062:	e73c      	b.n	8003ede <_dtoa_r+0x71e>
 8004064:	3fe00000 	.word	0x3fe00000
 8004068:	40240000 	.word	0x40240000
 800406c:	9b08      	ldr	r3, [sp, #32]
 800406e:	1e5c      	subs	r4, r3, #1
 8004070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004072:	42a3      	cmp	r3, r4
 8004074:	db09      	blt.n	800408a <_dtoa_r+0x8ca>
 8004076:	1b1c      	subs	r4, r3, r4
 8004078:	9b08      	ldr	r3, [sp, #32]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f6bf af30 	bge.w	8003ee0 <_dtoa_r+0x720>
 8004080:	9b04      	ldr	r3, [sp, #16]
 8004082:	9a08      	ldr	r2, [sp, #32]
 8004084:	1a9e      	subs	r6, r3, r2
 8004086:	2300      	movs	r3, #0
 8004088:	e72b      	b.n	8003ee2 <_dtoa_r+0x722>
 800408a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800408c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800408e:	1ae3      	subs	r3, r4, r3
 8004090:	441a      	add	r2, r3
 8004092:	940a      	str	r4, [sp, #40]	@ 0x28
 8004094:	9e04      	ldr	r6, [sp, #16]
 8004096:	2400      	movs	r4, #0
 8004098:	9b08      	ldr	r3, [sp, #32]
 800409a:	920e      	str	r2, [sp, #56]	@ 0x38
 800409c:	e721      	b.n	8003ee2 <_dtoa_r+0x722>
 800409e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80040a0:	9e04      	ldr	r6, [sp, #16]
 80040a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80040a4:	e728      	b.n	8003ef8 <_dtoa_r+0x738>
 80040a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80040aa:	e751      	b.n	8003f50 <_dtoa_r+0x790>
 80040ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040ae:	9903      	ldr	r1, [sp, #12]
 80040b0:	e750      	b.n	8003f54 <_dtoa_r+0x794>
 80040b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80040b6:	e751      	b.n	8003f5c <_dtoa_r+0x79c>
 80040b8:	2300      	movs	r3, #0
 80040ba:	e779      	b.n	8003fb0 <_dtoa_r+0x7f0>
 80040bc:	9b06      	ldr	r3, [sp, #24]
 80040be:	e777      	b.n	8003fb0 <_dtoa_r+0x7f0>
 80040c0:	2300      	movs	r3, #0
 80040c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80040c4:	e779      	b.n	8003fba <_dtoa_r+0x7fa>
 80040c6:	d093      	beq.n	8003ff0 <_dtoa_r+0x830>
 80040c8:	9a04      	ldr	r2, [sp, #16]
 80040ca:	331c      	adds	r3, #28
 80040cc:	441a      	add	r2, r3
 80040ce:	9204      	str	r2, [sp, #16]
 80040d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040d2:	441e      	add	r6, r3
 80040d4:	441a      	add	r2, r3
 80040d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80040d8:	e78a      	b.n	8003ff0 <_dtoa_r+0x830>
 80040da:	4603      	mov	r3, r0
 80040dc:	e7f4      	b.n	80040c8 <_dtoa_r+0x908>
 80040de:	9b08      	ldr	r3, [sp, #32]
 80040e0:	46b8      	mov	r8, r7
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	dc20      	bgt.n	8004128 <_dtoa_r+0x968>
 80040e6:	469b      	mov	fp, r3
 80040e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	dd1e      	ble.n	800412c <_dtoa_r+0x96c>
 80040ee:	f1bb 0f00 	cmp.w	fp, #0
 80040f2:	f47f adb1 	bne.w	8003c58 <_dtoa_r+0x498>
 80040f6:	4621      	mov	r1, r4
 80040f8:	465b      	mov	r3, fp
 80040fa:	2205      	movs	r2, #5
 80040fc:	4648      	mov	r0, r9
 80040fe:	f000 fa93 	bl	8004628 <__multadd>
 8004102:	4601      	mov	r1, r0
 8004104:	4604      	mov	r4, r0
 8004106:	9803      	ldr	r0, [sp, #12]
 8004108:	f000 fc9e 	bl	8004a48 <__mcmp>
 800410c:	2800      	cmp	r0, #0
 800410e:	f77f ada3 	ble.w	8003c58 <_dtoa_r+0x498>
 8004112:	4656      	mov	r6, sl
 8004114:	2331      	movs	r3, #49	@ 0x31
 8004116:	f108 0801 	add.w	r8, r8, #1
 800411a:	f806 3b01 	strb.w	r3, [r6], #1
 800411e:	e59f      	b.n	8003c60 <_dtoa_r+0x4a0>
 8004120:	46b8      	mov	r8, r7
 8004122:	9c08      	ldr	r4, [sp, #32]
 8004124:	4625      	mov	r5, r4
 8004126:	e7f4      	b.n	8004112 <_dtoa_r+0x952>
 8004128:	f8dd b020 	ldr.w	fp, [sp, #32]
 800412c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8101 	beq.w	8004336 <_dtoa_r+0xb76>
 8004134:	2e00      	cmp	r6, #0
 8004136:	dd05      	ble.n	8004144 <_dtoa_r+0x984>
 8004138:	4629      	mov	r1, r5
 800413a:	4632      	mov	r2, r6
 800413c:	4648      	mov	r0, r9
 800413e:	f000 fc17 	bl	8004970 <__lshift>
 8004142:	4605      	mov	r5, r0
 8004144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d05c      	beq.n	8004204 <_dtoa_r+0xa44>
 800414a:	4648      	mov	r0, r9
 800414c:	6869      	ldr	r1, [r5, #4]
 800414e:	f000 fa09 	bl	8004564 <_Balloc>
 8004152:	4606      	mov	r6, r0
 8004154:	b928      	cbnz	r0, 8004162 <_dtoa_r+0x9a2>
 8004156:	4602      	mov	r2, r0
 8004158:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800415c:	4b80      	ldr	r3, [pc, #512]	@ (8004360 <_dtoa_r+0xba0>)
 800415e:	f7ff bb43 	b.w	80037e8 <_dtoa_r+0x28>
 8004162:	692a      	ldr	r2, [r5, #16]
 8004164:	f105 010c 	add.w	r1, r5, #12
 8004168:	3202      	adds	r2, #2
 800416a:	0092      	lsls	r2, r2, #2
 800416c:	300c      	adds	r0, #12
 800416e:	f000 ff9d 	bl	80050ac <memcpy>
 8004172:	2201      	movs	r2, #1
 8004174:	4631      	mov	r1, r6
 8004176:	4648      	mov	r0, r9
 8004178:	f000 fbfa 	bl	8004970 <__lshift>
 800417c:	462f      	mov	r7, r5
 800417e:	4605      	mov	r5, r0
 8004180:	f10a 0301 	add.w	r3, sl, #1
 8004184:	9304      	str	r3, [sp, #16]
 8004186:	eb0a 030b 	add.w	r3, sl, fp
 800418a:	930a      	str	r3, [sp, #40]	@ 0x28
 800418c:	9b06      	ldr	r3, [sp, #24]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	9309      	str	r3, [sp, #36]	@ 0x24
 8004194:	9b04      	ldr	r3, [sp, #16]
 8004196:	4621      	mov	r1, r4
 8004198:	9803      	ldr	r0, [sp, #12]
 800419a:	f103 3bff 	add.w	fp, r3, #4294967295
 800419e:	f7ff fa84 	bl	80036aa <quorem>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4639      	mov	r1, r7
 80041a6:	3330      	adds	r3, #48	@ 0x30
 80041a8:	9006      	str	r0, [sp, #24]
 80041aa:	9803      	ldr	r0, [sp, #12]
 80041ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041ae:	f000 fc4b 	bl	8004a48 <__mcmp>
 80041b2:	462a      	mov	r2, r5
 80041b4:	9008      	str	r0, [sp, #32]
 80041b6:	4621      	mov	r1, r4
 80041b8:	4648      	mov	r0, r9
 80041ba:	f000 fc61 	bl	8004a80 <__mdiff>
 80041be:	68c2      	ldr	r2, [r0, #12]
 80041c0:	4606      	mov	r6, r0
 80041c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041c4:	bb02      	cbnz	r2, 8004208 <_dtoa_r+0xa48>
 80041c6:	4601      	mov	r1, r0
 80041c8:	9803      	ldr	r0, [sp, #12]
 80041ca:	f000 fc3d 	bl	8004a48 <__mcmp>
 80041ce:	4602      	mov	r2, r0
 80041d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041d2:	4631      	mov	r1, r6
 80041d4:	4648      	mov	r0, r9
 80041d6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80041da:	f000 fa03 	bl	80045e4 <_Bfree>
 80041de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80041e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80041e2:	9e04      	ldr	r6, [sp, #16]
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ea:	4319      	orrs	r1, r3
 80041ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041ee:	d10d      	bne.n	800420c <_dtoa_r+0xa4c>
 80041f0:	2b39      	cmp	r3, #57	@ 0x39
 80041f2:	d027      	beq.n	8004244 <_dtoa_r+0xa84>
 80041f4:	9a08      	ldr	r2, [sp, #32]
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	dd01      	ble.n	80041fe <_dtoa_r+0xa3e>
 80041fa:	9b06      	ldr	r3, [sp, #24]
 80041fc:	3331      	adds	r3, #49	@ 0x31
 80041fe:	f88b 3000 	strb.w	r3, [fp]
 8004202:	e52e      	b.n	8003c62 <_dtoa_r+0x4a2>
 8004204:	4628      	mov	r0, r5
 8004206:	e7b9      	b.n	800417c <_dtoa_r+0x9bc>
 8004208:	2201      	movs	r2, #1
 800420a:	e7e2      	b.n	80041d2 <_dtoa_r+0xa12>
 800420c:	9908      	ldr	r1, [sp, #32]
 800420e:	2900      	cmp	r1, #0
 8004210:	db04      	blt.n	800421c <_dtoa_r+0xa5c>
 8004212:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004214:	4301      	orrs	r1, r0
 8004216:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004218:	4301      	orrs	r1, r0
 800421a:	d120      	bne.n	800425e <_dtoa_r+0xa9e>
 800421c:	2a00      	cmp	r2, #0
 800421e:	ddee      	ble.n	80041fe <_dtoa_r+0xa3e>
 8004220:	2201      	movs	r2, #1
 8004222:	9903      	ldr	r1, [sp, #12]
 8004224:	4648      	mov	r0, r9
 8004226:	9304      	str	r3, [sp, #16]
 8004228:	f000 fba2 	bl	8004970 <__lshift>
 800422c:	4621      	mov	r1, r4
 800422e:	9003      	str	r0, [sp, #12]
 8004230:	f000 fc0a 	bl	8004a48 <__mcmp>
 8004234:	2800      	cmp	r0, #0
 8004236:	9b04      	ldr	r3, [sp, #16]
 8004238:	dc02      	bgt.n	8004240 <_dtoa_r+0xa80>
 800423a:	d1e0      	bne.n	80041fe <_dtoa_r+0xa3e>
 800423c:	07da      	lsls	r2, r3, #31
 800423e:	d5de      	bpl.n	80041fe <_dtoa_r+0xa3e>
 8004240:	2b39      	cmp	r3, #57	@ 0x39
 8004242:	d1da      	bne.n	80041fa <_dtoa_r+0xa3a>
 8004244:	2339      	movs	r3, #57	@ 0x39
 8004246:	f88b 3000 	strb.w	r3, [fp]
 800424a:	4633      	mov	r3, r6
 800424c:	461e      	mov	r6, r3
 800424e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004252:	3b01      	subs	r3, #1
 8004254:	2a39      	cmp	r2, #57	@ 0x39
 8004256:	d04e      	beq.n	80042f6 <_dtoa_r+0xb36>
 8004258:	3201      	adds	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e501      	b.n	8003c62 <_dtoa_r+0x4a2>
 800425e:	2a00      	cmp	r2, #0
 8004260:	dd03      	ble.n	800426a <_dtoa_r+0xaaa>
 8004262:	2b39      	cmp	r3, #57	@ 0x39
 8004264:	d0ee      	beq.n	8004244 <_dtoa_r+0xa84>
 8004266:	3301      	adds	r3, #1
 8004268:	e7c9      	b.n	80041fe <_dtoa_r+0xa3e>
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800426e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004272:	428a      	cmp	r2, r1
 8004274:	d028      	beq.n	80042c8 <_dtoa_r+0xb08>
 8004276:	2300      	movs	r3, #0
 8004278:	220a      	movs	r2, #10
 800427a:	9903      	ldr	r1, [sp, #12]
 800427c:	4648      	mov	r0, r9
 800427e:	f000 f9d3 	bl	8004628 <__multadd>
 8004282:	42af      	cmp	r7, r5
 8004284:	9003      	str	r0, [sp, #12]
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f04f 020a 	mov.w	r2, #10
 800428e:	4639      	mov	r1, r7
 8004290:	4648      	mov	r0, r9
 8004292:	d107      	bne.n	80042a4 <_dtoa_r+0xae4>
 8004294:	f000 f9c8 	bl	8004628 <__multadd>
 8004298:	4607      	mov	r7, r0
 800429a:	4605      	mov	r5, r0
 800429c:	9b04      	ldr	r3, [sp, #16]
 800429e:	3301      	adds	r3, #1
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	e777      	b.n	8004194 <_dtoa_r+0x9d4>
 80042a4:	f000 f9c0 	bl	8004628 <__multadd>
 80042a8:	4629      	mov	r1, r5
 80042aa:	4607      	mov	r7, r0
 80042ac:	2300      	movs	r3, #0
 80042ae:	220a      	movs	r2, #10
 80042b0:	4648      	mov	r0, r9
 80042b2:	f000 f9b9 	bl	8004628 <__multadd>
 80042b6:	4605      	mov	r5, r0
 80042b8:	e7f0      	b.n	800429c <_dtoa_r+0xadc>
 80042ba:	f1bb 0f00 	cmp.w	fp, #0
 80042be:	bfcc      	ite	gt
 80042c0:	465e      	movgt	r6, fp
 80042c2:	2601      	movle	r6, #1
 80042c4:	2700      	movs	r7, #0
 80042c6:	4456      	add	r6, sl
 80042c8:	2201      	movs	r2, #1
 80042ca:	9903      	ldr	r1, [sp, #12]
 80042cc:	4648      	mov	r0, r9
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	f000 fb4e 	bl	8004970 <__lshift>
 80042d4:	4621      	mov	r1, r4
 80042d6:	9003      	str	r0, [sp, #12]
 80042d8:	f000 fbb6 	bl	8004a48 <__mcmp>
 80042dc:	2800      	cmp	r0, #0
 80042de:	dcb4      	bgt.n	800424a <_dtoa_r+0xa8a>
 80042e0:	d102      	bne.n	80042e8 <_dtoa_r+0xb28>
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	07db      	lsls	r3, r3, #31
 80042e6:	d4b0      	bmi.n	800424a <_dtoa_r+0xa8a>
 80042e8:	4633      	mov	r3, r6
 80042ea:	461e      	mov	r6, r3
 80042ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042f0:	2a30      	cmp	r2, #48	@ 0x30
 80042f2:	d0fa      	beq.n	80042ea <_dtoa_r+0xb2a>
 80042f4:	e4b5      	b.n	8003c62 <_dtoa_r+0x4a2>
 80042f6:	459a      	cmp	sl, r3
 80042f8:	d1a8      	bne.n	800424c <_dtoa_r+0xa8c>
 80042fa:	2331      	movs	r3, #49	@ 0x31
 80042fc:	f108 0801 	add.w	r8, r8, #1
 8004300:	f88a 3000 	strb.w	r3, [sl]
 8004304:	e4ad      	b.n	8003c62 <_dtoa_r+0x4a2>
 8004306:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004308:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004364 <_dtoa_r+0xba4>
 800430c:	b11b      	cbz	r3, 8004316 <_dtoa_r+0xb56>
 800430e:	f10a 0308 	add.w	r3, sl, #8
 8004312:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4650      	mov	r0, sl
 8004318:	b017      	add	sp, #92	@ 0x5c
 800431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004320:	2b01      	cmp	r3, #1
 8004322:	f77f ae2e 	ble.w	8003f82 <_dtoa_r+0x7c2>
 8004326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004328:	930a      	str	r3, [sp, #40]	@ 0x28
 800432a:	2001      	movs	r0, #1
 800432c:	e64d      	b.n	8003fca <_dtoa_r+0x80a>
 800432e:	f1bb 0f00 	cmp.w	fp, #0
 8004332:	f77f aed9 	ble.w	80040e8 <_dtoa_r+0x928>
 8004336:	4656      	mov	r6, sl
 8004338:	4621      	mov	r1, r4
 800433a:	9803      	ldr	r0, [sp, #12]
 800433c:	f7ff f9b5 	bl	80036aa <quorem>
 8004340:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004344:	f806 3b01 	strb.w	r3, [r6], #1
 8004348:	eba6 020a 	sub.w	r2, r6, sl
 800434c:	4593      	cmp	fp, r2
 800434e:	ddb4      	ble.n	80042ba <_dtoa_r+0xafa>
 8004350:	2300      	movs	r3, #0
 8004352:	220a      	movs	r2, #10
 8004354:	4648      	mov	r0, r9
 8004356:	9903      	ldr	r1, [sp, #12]
 8004358:	f000 f966 	bl	8004628 <__multadd>
 800435c:	9003      	str	r0, [sp, #12]
 800435e:	e7eb      	b.n	8004338 <_dtoa_r+0xb78>
 8004360:	08005e37 	.word	0x08005e37
 8004364:	08005dbb 	.word	0x08005dbb

08004368 <_free_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4605      	mov	r5, r0
 800436c:	2900      	cmp	r1, #0
 800436e:	d040      	beq.n	80043f2 <_free_r+0x8a>
 8004370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004374:	1f0c      	subs	r4, r1, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	bfb8      	it	lt
 800437a:	18e4      	addlt	r4, r4, r3
 800437c:	f000 f8e6 	bl	800454c <__malloc_lock>
 8004380:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <_free_r+0x8c>)
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	b933      	cbnz	r3, 8004394 <_free_r+0x2c>
 8004386:	6063      	str	r3, [r4, #4]
 8004388:	6014      	str	r4, [r2, #0]
 800438a:	4628      	mov	r0, r5
 800438c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004390:	f000 b8e2 	b.w	8004558 <__malloc_unlock>
 8004394:	42a3      	cmp	r3, r4
 8004396:	d908      	bls.n	80043aa <_free_r+0x42>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	1821      	adds	r1, r4, r0
 800439c:	428b      	cmp	r3, r1
 800439e:	bf01      	itttt	eq
 80043a0:	6819      	ldreq	r1, [r3, #0]
 80043a2:	685b      	ldreq	r3, [r3, #4]
 80043a4:	1809      	addeq	r1, r1, r0
 80043a6:	6021      	streq	r1, [r4, #0]
 80043a8:	e7ed      	b.n	8004386 <_free_r+0x1e>
 80043aa:	461a      	mov	r2, r3
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b10b      	cbz	r3, 80043b4 <_free_r+0x4c>
 80043b0:	42a3      	cmp	r3, r4
 80043b2:	d9fa      	bls.n	80043aa <_free_r+0x42>
 80043b4:	6811      	ldr	r1, [r2, #0]
 80043b6:	1850      	adds	r0, r2, r1
 80043b8:	42a0      	cmp	r0, r4
 80043ba:	d10b      	bne.n	80043d4 <_free_r+0x6c>
 80043bc:	6820      	ldr	r0, [r4, #0]
 80043be:	4401      	add	r1, r0
 80043c0:	1850      	adds	r0, r2, r1
 80043c2:	4283      	cmp	r3, r0
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	d1e0      	bne.n	800438a <_free_r+0x22>
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4408      	add	r0, r1
 80043ce:	6010      	str	r0, [r2, #0]
 80043d0:	6053      	str	r3, [r2, #4]
 80043d2:	e7da      	b.n	800438a <_free_r+0x22>
 80043d4:	d902      	bls.n	80043dc <_free_r+0x74>
 80043d6:	230c      	movs	r3, #12
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	e7d6      	b.n	800438a <_free_r+0x22>
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	1821      	adds	r1, r4, r0
 80043e0:	428b      	cmp	r3, r1
 80043e2:	bf01      	itttt	eq
 80043e4:	6819      	ldreq	r1, [r3, #0]
 80043e6:	685b      	ldreq	r3, [r3, #4]
 80043e8:	1809      	addeq	r1, r1, r0
 80043ea:	6021      	streq	r1, [r4, #0]
 80043ec:	6063      	str	r3, [r4, #4]
 80043ee:	6054      	str	r4, [r2, #4]
 80043f0:	e7cb      	b.n	800438a <_free_r+0x22>
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	2000036c 	.word	0x2000036c

080043f8 <malloc>:
 80043f8:	4b02      	ldr	r3, [pc, #8]	@ (8004404 <malloc+0xc>)
 80043fa:	4601      	mov	r1, r0
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f000 b825 	b.w	800444c <_malloc_r>
 8004402:	bf00      	nop
 8004404:	2000003c 	.word	0x2000003c

08004408 <sbrk_aligned>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4e0f      	ldr	r6, [pc, #60]	@ (8004448 <sbrk_aligned+0x40>)
 800440c:	460c      	mov	r4, r1
 800440e:	6831      	ldr	r1, [r6, #0]
 8004410:	4605      	mov	r5, r0
 8004412:	b911      	cbnz	r1, 800441a <sbrk_aligned+0x12>
 8004414:	f000 fe3a 	bl	800508c <_sbrk_r>
 8004418:	6030      	str	r0, [r6, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fe35 	bl	800508c <_sbrk_r>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d103      	bne.n	800442e <sbrk_aligned+0x26>
 8004426:	f04f 34ff 	mov.w	r4, #4294967295
 800442a:	4620      	mov	r0, r4
 800442c:	bd70      	pop	{r4, r5, r6, pc}
 800442e:	1cc4      	adds	r4, r0, #3
 8004430:	f024 0403 	bic.w	r4, r4, #3
 8004434:	42a0      	cmp	r0, r4
 8004436:	d0f8      	beq.n	800442a <sbrk_aligned+0x22>
 8004438:	1a21      	subs	r1, r4, r0
 800443a:	4628      	mov	r0, r5
 800443c:	f000 fe26 	bl	800508c <_sbrk_r>
 8004440:	3001      	adds	r0, #1
 8004442:	d1f2      	bne.n	800442a <sbrk_aligned+0x22>
 8004444:	e7ef      	b.n	8004426 <sbrk_aligned+0x1e>
 8004446:	bf00      	nop
 8004448:	20000368 	.word	0x20000368

0800444c <_malloc_r>:
 800444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004450:	1ccd      	adds	r5, r1, #3
 8004452:	f025 0503 	bic.w	r5, r5, #3
 8004456:	3508      	adds	r5, #8
 8004458:	2d0c      	cmp	r5, #12
 800445a:	bf38      	it	cc
 800445c:	250c      	movcc	r5, #12
 800445e:	2d00      	cmp	r5, #0
 8004460:	4606      	mov	r6, r0
 8004462:	db01      	blt.n	8004468 <_malloc_r+0x1c>
 8004464:	42a9      	cmp	r1, r5
 8004466:	d904      	bls.n	8004472 <_malloc_r+0x26>
 8004468:	230c      	movs	r3, #12
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	2000      	movs	r0, #0
 800446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004548 <_malloc_r+0xfc>
 8004476:	f000 f869 	bl	800454c <__malloc_lock>
 800447a:	f8d8 3000 	ldr.w	r3, [r8]
 800447e:	461c      	mov	r4, r3
 8004480:	bb44      	cbnz	r4, 80044d4 <_malloc_r+0x88>
 8004482:	4629      	mov	r1, r5
 8004484:	4630      	mov	r0, r6
 8004486:	f7ff ffbf 	bl	8004408 <sbrk_aligned>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	4604      	mov	r4, r0
 800448e:	d158      	bne.n	8004542 <_malloc_r+0xf6>
 8004490:	f8d8 4000 	ldr.w	r4, [r8]
 8004494:	4627      	mov	r7, r4
 8004496:	2f00      	cmp	r7, #0
 8004498:	d143      	bne.n	8004522 <_malloc_r+0xd6>
 800449a:	2c00      	cmp	r4, #0
 800449c:	d04b      	beq.n	8004536 <_malloc_r+0xea>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	4639      	mov	r1, r7
 80044a2:	4630      	mov	r0, r6
 80044a4:	eb04 0903 	add.w	r9, r4, r3
 80044a8:	f000 fdf0 	bl	800508c <_sbrk_r>
 80044ac:	4581      	cmp	r9, r0
 80044ae:	d142      	bne.n	8004536 <_malloc_r+0xea>
 80044b0:	6821      	ldr	r1, [r4, #0]
 80044b2:	4630      	mov	r0, r6
 80044b4:	1a6d      	subs	r5, r5, r1
 80044b6:	4629      	mov	r1, r5
 80044b8:	f7ff ffa6 	bl	8004408 <sbrk_aligned>
 80044bc:	3001      	adds	r0, #1
 80044be:	d03a      	beq.n	8004536 <_malloc_r+0xea>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	442b      	add	r3, r5
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	f8d8 3000 	ldr.w	r3, [r8]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	bb62      	cbnz	r2, 8004528 <_malloc_r+0xdc>
 80044ce:	f8c8 7000 	str.w	r7, [r8]
 80044d2:	e00f      	b.n	80044f4 <_malloc_r+0xa8>
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	1b52      	subs	r2, r2, r5
 80044d8:	d420      	bmi.n	800451c <_malloc_r+0xd0>
 80044da:	2a0b      	cmp	r2, #11
 80044dc:	d917      	bls.n	800450e <_malloc_r+0xc2>
 80044de:	1961      	adds	r1, r4, r5
 80044e0:	42a3      	cmp	r3, r4
 80044e2:	6025      	str	r5, [r4, #0]
 80044e4:	bf18      	it	ne
 80044e6:	6059      	strne	r1, [r3, #4]
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	bf08      	it	eq
 80044ec:	f8c8 1000 	streq.w	r1, [r8]
 80044f0:	5162      	str	r2, [r4, r5]
 80044f2:	604b      	str	r3, [r1, #4]
 80044f4:	4630      	mov	r0, r6
 80044f6:	f000 f82f 	bl	8004558 <__malloc_unlock>
 80044fa:	f104 000b 	add.w	r0, r4, #11
 80044fe:	1d23      	adds	r3, r4, #4
 8004500:	f020 0007 	bic.w	r0, r0, #7
 8004504:	1ac2      	subs	r2, r0, r3
 8004506:	bf1c      	itt	ne
 8004508:	1a1b      	subne	r3, r3, r0
 800450a:	50a3      	strne	r3, [r4, r2]
 800450c:	e7af      	b.n	800446e <_malloc_r+0x22>
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	42a3      	cmp	r3, r4
 8004512:	bf0c      	ite	eq
 8004514:	f8c8 2000 	streq.w	r2, [r8]
 8004518:	605a      	strne	r2, [r3, #4]
 800451a:	e7eb      	b.n	80044f4 <_malloc_r+0xa8>
 800451c:	4623      	mov	r3, r4
 800451e:	6864      	ldr	r4, [r4, #4]
 8004520:	e7ae      	b.n	8004480 <_malloc_r+0x34>
 8004522:	463c      	mov	r4, r7
 8004524:	687f      	ldr	r7, [r7, #4]
 8004526:	e7b6      	b.n	8004496 <_malloc_r+0x4a>
 8004528:	461a      	mov	r2, r3
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	42a3      	cmp	r3, r4
 800452e:	d1fb      	bne.n	8004528 <_malloc_r+0xdc>
 8004530:	2300      	movs	r3, #0
 8004532:	6053      	str	r3, [r2, #4]
 8004534:	e7de      	b.n	80044f4 <_malloc_r+0xa8>
 8004536:	230c      	movs	r3, #12
 8004538:	4630      	mov	r0, r6
 800453a:	6033      	str	r3, [r6, #0]
 800453c:	f000 f80c 	bl	8004558 <__malloc_unlock>
 8004540:	e794      	b.n	800446c <_malloc_r+0x20>
 8004542:	6005      	str	r5, [r0, #0]
 8004544:	e7d6      	b.n	80044f4 <_malloc_r+0xa8>
 8004546:	bf00      	nop
 8004548:	2000036c 	.word	0x2000036c

0800454c <__malloc_lock>:
 800454c:	4801      	ldr	r0, [pc, #4]	@ (8004554 <__malloc_lock+0x8>)
 800454e:	f7ff b89c 	b.w	800368a <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	20000364 	.word	0x20000364

08004558 <__malloc_unlock>:
 8004558:	4801      	ldr	r0, [pc, #4]	@ (8004560 <__malloc_unlock+0x8>)
 800455a:	f7ff b897 	b.w	800368c <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	20000364 	.word	0x20000364

08004564 <_Balloc>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	69c6      	ldr	r6, [r0, #28]
 8004568:	4604      	mov	r4, r0
 800456a:	460d      	mov	r5, r1
 800456c:	b976      	cbnz	r6, 800458c <_Balloc+0x28>
 800456e:	2010      	movs	r0, #16
 8004570:	f7ff ff42 	bl	80043f8 <malloc>
 8004574:	4602      	mov	r2, r0
 8004576:	61e0      	str	r0, [r4, #28]
 8004578:	b920      	cbnz	r0, 8004584 <_Balloc+0x20>
 800457a:	216b      	movs	r1, #107	@ 0x6b
 800457c:	4b17      	ldr	r3, [pc, #92]	@ (80045dc <_Balloc+0x78>)
 800457e:	4818      	ldr	r0, [pc, #96]	@ (80045e0 <_Balloc+0x7c>)
 8004580:	f000 fda2 	bl	80050c8 <__assert_func>
 8004584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004588:	6006      	str	r6, [r0, #0]
 800458a:	60c6      	str	r6, [r0, #12]
 800458c:	69e6      	ldr	r6, [r4, #28]
 800458e:	68f3      	ldr	r3, [r6, #12]
 8004590:	b183      	cbz	r3, 80045b4 <_Balloc+0x50>
 8004592:	69e3      	ldr	r3, [r4, #28]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800459a:	b9b8      	cbnz	r0, 80045cc <_Balloc+0x68>
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f605 	lsl.w	r6, r1, r5
 80045a2:	1d72      	adds	r2, r6, #5
 80045a4:	4620      	mov	r0, r4
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	f000 fdac 	bl	8005104 <_calloc_r>
 80045ac:	b160      	cbz	r0, 80045c8 <_Balloc+0x64>
 80045ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80045b2:	e00e      	b.n	80045d2 <_Balloc+0x6e>
 80045b4:	2221      	movs	r2, #33	@ 0x21
 80045b6:	2104      	movs	r1, #4
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 fda3 	bl	8005104 <_calloc_r>
 80045be:	69e3      	ldr	r3, [r4, #28]
 80045c0:	60f0      	str	r0, [r6, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e4      	bne.n	8004592 <_Balloc+0x2e>
 80045c8:	2000      	movs	r0, #0
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	6802      	ldr	r2, [r0, #0]
 80045ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80045d2:	2300      	movs	r3, #0
 80045d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80045d8:	e7f7      	b.n	80045ca <_Balloc+0x66>
 80045da:	bf00      	nop
 80045dc:	08005dc8 	.word	0x08005dc8
 80045e0:	08005e48 	.word	0x08005e48

080045e4 <_Bfree>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	69c6      	ldr	r6, [r0, #28]
 80045e8:	4605      	mov	r5, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	b976      	cbnz	r6, 800460c <_Bfree+0x28>
 80045ee:	2010      	movs	r0, #16
 80045f0:	f7ff ff02 	bl	80043f8 <malloc>
 80045f4:	4602      	mov	r2, r0
 80045f6:	61e8      	str	r0, [r5, #28]
 80045f8:	b920      	cbnz	r0, 8004604 <_Bfree+0x20>
 80045fa:	218f      	movs	r1, #143	@ 0x8f
 80045fc:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <_Bfree+0x3c>)
 80045fe:	4809      	ldr	r0, [pc, #36]	@ (8004624 <_Bfree+0x40>)
 8004600:	f000 fd62 	bl	80050c8 <__assert_func>
 8004604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004608:	6006      	str	r6, [r0, #0]
 800460a:	60c6      	str	r6, [r0, #12]
 800460c:	b13c      	cbz	r4, 800461e <_Bfree+0x3a>
 800460e:	69eb      	ldr	r3, [r5, #28]
 8004610:	6862      	ldr	r2, [r4, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004618:	6021      	str	r1, [r4, #0]
 800461a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	08005dc8 	.word	0x08005dc8
 8004624:	08005e48 	.word	0x08005e48

08004628 <__multadd>:
 8004628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462c:	4607      	mov	r7, r0
 800462e:	460c      	mov	r4, r1
 8004630:	461e      	mov	r6, r3
 8004632:	2000      	movs	r0, #0
 8004634:	690d      	ldr	r5, [r1, #16]
 8004636:	f101 0c14 	add.w	ip, r1, #20
 800463a:	f8dc 3000 	ldr.w	r3, [ip]
 800463e:	3001      	adds	r0, #1
 8004640:	b299      	uxth	r1, r3
 8004642:	fb02 6101 	mla	r1, r2, r1, r6
 8004646:	0c1e      	lsrs	r6, r3, #16
 8004648:	0c0b      	lsrs	r3, r1, #16
 800464a:	fb02 3306 	mla	r3, r2, r6, r3
 800464e:	b289      	uxth	r1, r1
 8004650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004654:	4285      	cmp	r5, r0
 8004656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800465a:	f84c 1b04 	str.w	r1, [ip], #4
 800465e:	dcec      	bgt.n	800463a <__multadd+0x12>
 8004660:	b30e      	cbz	r6, 80046a6 <__multadd+0x7e>
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc19      	bgt.n	800469c <__multadd+0x74>
 8004668:	6861      	ldr	r1, [r4, #4]
 800466a:	4638      	mov	r0, r7
 800466c:	3101      	adds	r1, #1
 800466e:	f7ff ff79 	bl	8004564 <_Balloc>
 8004672:	4680      	mov	r8, r0
 8004674:	b928      	cbnz	r0, 8004682 <__multadd+0x5a>
 8004676:	4602      	mov	r2, r0
 8004678:	21ba      	movs	r1, #186	@ 0xba
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <__multadd+0x84>)
 800467c:	480c      	ldr	r0, [pc, #48]	@ (80046b0 <__multadd+0x88>)
 800467e:	f000 fd23 	bl	80050c8 <__assert_func>
 8004682:	6922      	ldr	r2, [r4, #16]
 8004684:	f104 010c 	add.w	r1, r4, #12
 8004688:	3202      	adds	r2, #2
 800468a:	0092      	lsls	r2, r2, #2
 800468c:	300c      	adds	r0, #12
 800468e:	f000 fd0d 	bl	80050ac <memcpy>
 8004692:	4621      	mov	r1, r4
 8004694:	4638      	mov	r0, r7
 8004696:	f7ff ffa5 	bl	80045e4 <_Bfree>
 800469a:	4644      	mov	r4, r8
 800469c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80046a0:	3501      	adds	r5, #1
 80046a2:	615e      	str	r6, [r3, #20]
 80046a4:	6125      	str	r5, [r4, #16]
 80046a6:	4620      	mov	r0, r4
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	08005e37 	.word	0x08005e37
 80046b0:	08005e48 	.word	0x08005e48

080046b4 <__hi0bits>:
 80046b4:	4603      	mov	r3, r0
 80046b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80046ba:	bf3a      	itte	cc
 80046bc:	0403      	lslcc	r3, r0, #16
 80046be:	2010      	movcc	r0, #16
 80046c0:	2000      	movcs	r0, #0
 80046c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046c6:	bf3c      	itt	cc
 80046c8:	021b      	lslcc	r3, r3, #8
 80046ca:	3008      	addcc	r0, #8
 80046cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046d0:	bf3c      	itt	cc
 80046d2:	011b      	lslcc	r3, r3, #4
 80046d4:	3004      	addcc	r0, #4
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046da:	bf3c      	itt	cc
 80046dc:	009b      	lslcc	r3, r3, #2
 80046de:	3002      	addcc	r0, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db05      	blt.n	80046f0 <__hi0bits+0x3c>
 80046e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80046e8:	f100 0001 	add.w	r0, r0, #1
 80046ec:	bf08      	it	eq
 80046ee:	2020      	moveq	r0, #32
 80046f0:	4770      	bx	lr

080046f2 <__lo0bits>:
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	4602      	mov	r2, r0
 80046f6:	f013 0007 	ands.w	r0, r3, #7
 80046fa:	d00b      	beq.n	8004714 <__lo0bits+0x22>
 80046fc:	07d9      	lsls	r1, r3, #31
 80046fe:	d421      	bmi.n	8004744 <__lo0bits+0x52>
 8004700:	0798      	lsls	r0, r3, #30
 8004702:	bf49      	itett	mi
 8004704:	085b      	lsrmi	r3, r3, #1
 8004706:	089b      	lsrpl	r3, r3, #2
 8004708:	2001      	movmi	r0, #1
 800470a:	6013      	strmi	r3, [r2, #0]
 800470c:	bf5c      	itt	pl
 800470e:	2002      	movpl	r0, #2
 8004710:	6013      	strpl	r3, [r2, #0]
 8004712:	4770      	bx	lr
 8004714:	b299      	uxth	r1, r3
 8004716:	b909      	cbnz	r1, 800471c <__lo0bits+0x2a>
 8004718:	2010      	movs	r0, #16
 800471a:	0c1b      	lsrs	r3, r3, #16
 800471c:	b2d9      	uxtb	r1, r3
 800471e:	b909      	cbnz	r1, 8004724 <__lo0bits+0x32>
 8004720:	3008      	adds	r0, #8
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	0719      	lsls	r1, r3, #28
 8004726:	bf04      	itt	eq
 8004728:	091b      	lsreq	r3, r3, #4
 800472a:	3004      	addeq	r0, #4
 800472c:	0799      	lsls	r1, r3, #30
 800472e:	bf04      	itt	eq
 8004730:	089b      	lsreq	r3, r3, #2
 8004732:	3002      	addeq	r0, #2
 8004734:	07d9      	lsls	r1, r3, #31
 8004736:	d403      	bmi.n	8004740 <__lo0bits+0x4e>
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	f100 0001 	add.w	r0, r0, #1
 800473e:	d003      	beq.n	8004748 <__lo0bits+0x56>
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	4770      	bx	lr
 8004744:	2000      	movs	r0, #0
 8004746:	4770      	bx	lr
 8004748:	2020      	movs	r0, #32
 800474a:	4770      	bx	lr

0800474c <__i2b>:
 800474c:	b510      	push	{r4, lr}
 800474e:	460c      	mov	r4, r1
 8004750:	2101      	movs	r1, #1
 8004752:	f7ff ff07 	bl	8004564 <_Balloc>
 8004756:	4602      	mov	r2, r0
 8004758:	b928      	cbnz	r0, 8004766 <__i2b+0x1a>
 800475a:	f240 1145 	movw	r1, #325	@ 0x145
 800475e:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <__i2b+0x24>)
 8004760:	4804      	ldr	r0, [pc, #16]	@ (8004774 <__i2b+0x28>)
 8004762:	f000 fcb1 	bl	80050c8 <__assert_func>
 8004766:	2301      	movs	r3, #1
 8004768:	6144      	str	r4, [r0, #20]
 800476a:	6103      	str	r3, [r0, #16]
 800476c:	bd10      	pop	{r4, pc}
 800476e:	bf00      	nop
 8004770:	08005e37 	.word	0x08005e37
 8004774:	08005e48 	.word	0x08005e48

08004778 <__multiply>:
 8004778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477c:	4617      	mov	r7, r2
 800477e:	690a      	ldr	r2, [r1, #16]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4689      	mov	r9, r1
 8004784:	429a      	cmp	r2, r3
 8004786:	bfa2      	ittt	ge
 8004788:	463b      	movge	r3, r7
 800478a:	460f      	movge	r7, r1
 800478c:	4699      	movge	r9, r3
 800478e:	693d      	ldr	r5, [r7, #16]
 8004790:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	eb05 060a 	add.w	r6, r5, sl
 800479c:	42b3      	cmp	r3, r6
 800479e:	b085      	sub	sp, #20
 80047a0:	bfb8      	it	lt
 80047a2:	3101      	addlt	r1, #1
 80047a4:	f7ff fede 	bl	8004564 <_Balloc>
 80047a8:	b930      	cbnz	r0, 80047b8 <__multiply+0x40>
 80047aa:	4602      	mov	r2, r0
 80047ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80047b0:	4b40      	ldr	r3, [pc, #256]	@ (80048b4 <__multiply+0x13c>)
 80047b2:	4841      	ldr	r0, [pc, #260]	@ (80048b8 <__multiply+0x140>)
 80047b4:	f000 fc88 	bl	80050c8 <__assert_func>
 80047b8:	f100 0414 	add.w	r4, r0, #20
 80047bc:	4623      	mov	r3, r4
 80047be:	2200      	movs	r2, #0
 80047c0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80047c4:	4573      	cmp	r3, lr
 80047c6:	d320      	bcc.n	800480a <__multiply+0x92>
 80047c8:	f107 0814 	add.w	r8, r7, #20
 80047cc:	f109 0114 	add.w	r1, r9, #20
 80047d0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80047d4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80047d8:	9302      	str	r3, [sp, #8]
 80047da:	1beb      	subs	r3, r5, r7
 80047dc:	3b15      	subs	r3, #21
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	3304      	adds	r3, #4
 80047e4:	3715      	adds	r7, #21
 80047e6:	42bd      	cmp	r5, r7
 80047e8:	bf38      	it	cc
 80047ea:	2304      	movcc	r3, #4
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	9b02      	ldr	r3, [sp, #8]
 80047f0:	9103      	str	r1, [sp, #12]
 80047f2:	428b      	cmp	r3, r1
 80047f4:	d80c      	bhi.n	8004810 <__multiply+0x98>
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	dd03      	ble.n	8004802 <__multiply+0x8a>
 80047fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d055      	beq.n	80048ae <__multiply+0x136>
 8004802:	6106      	str	r6, [r0, #16]
 8004804:	b005      	add	sp, #20
 8004806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480a:	f843 2b04 	str.w	r2, [r3], #4
 800480e:	e7d9      	b.n	80047c4 <__multiply+0x4c>
 8004810:	f8b1 a000 	ldrh.w	sl, [r1]
 8004814:	f1ba 0f00 	cmp.w	sl, #0
 8004818:	d01f      	beq.n	800485a <__multiply+0xe2>
 800481a:	46c4      	mov	ip, r8
 800481c:	46a1      	mov	r9, r4
 800481e:	2700      	movs	r7, #0
 8004820:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004824:	f8d9 3000 	ldr.w	r3, [r9]
 8004828:	fa1f fb82 	uxth.w	fp, r2
 800482c:	b29b      	uxth	r3, r3
 800482e:	fb0a 330b 	mla	r3, sl, fp, r3
 8004832:	443b      	add	r3, r7
 8004834:	f8d9 7000 	ldr.w	r7, [r9]
 8004838:	0c12      	lsrs	r2, r2, #16
 800483a:	0c3f      	lsrs	r7, r7, #16
 800483c:	fb0a 7202 	mla	r2, sl, r2, r7
 8004840:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004844:	b29b      	uxth	r3, r3
 8004846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800484a:	4565      	cmp	r5, ip
 800484c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004850:	f849 3b04 	str.w	r3, [r9], #4
 8004854:	d8e4      	bhi.n	8004820 <__multiply+0xa8>
 8004856:	9b01      	ldr	r3, [sp, #4]
 8004858:	50e7      	str	r7, [r4, r3]
 800485a:	9b03      	ldr	r3, [sp, #12]
 800485c:	3104      	adds	r1, #4
 800485e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004862:	f1b9 0f00 	cmp.w	r9, #0
 8004866:	d020      	beq.n	80048aa <__multiply+0x132>
 8004868:	4647      	mov	r7, r8
 800486a:	46a4      	mov	ip, r4
 800486c:	f04f 0a00 	mov.w	sl, #0
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	f8b7 b000 	ldrh.w	fp, [r7]
 8004876:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800487a:	b29b      	uxth	r3, r3
 800487c:	fb09 220b 	mla	r2, r9, fp, r2
 8004880:	4452      	add	r2, sl
 8004882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004886:	f84c 3b04 	str.w	r3, [ip], #4
 800488a:	f857 3b04 	ldr.w	r3, [r7], #4
 800488e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004892:	f8bc 3000 	ldrh.w	r3, [ip]
 8004896:	42bd      	cmp	r5, r7
 8004898:	fb09 330a 	mla	r3, r9, sl, r3
 800489c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80048a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048a4:	d8e5      	bhi.n	8004872 <__multiply+0xfa>
 80048a6:	9a01      	ldr	r2, [sp, #4]
 80048a8:	50a3      	str	r3, [r4, r2]
 80048aa:	3404      	adds	r4, #4
 80048ac:	e79f      	b.n	80047ee <__multiply+0x76>
 80048ae:	3e01      	subs	r6, #1
 80048b0:	e7a1      	b.n	80047f6 <__multiply+0x7e>
 80048b2:	bf00      	nop
 80048b4:	08005e37 	.word	0x08005e37
 80048b8:	08005e48 	.word	0x08005e48

080048bc <__pow5mult>:
 80048bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	4615      	mov	r5, r2
 80048c2:	f012 0203 	ands.w	r2, r2, #3
 80048c6:	4607      	mov	r7, r0
 80048c8:	460e      	mov	r6, r1
 80048ca:	d007      	beq.n	80048dc <__pow5mult+0x20>
 80048cc:	4c25      	ldr	r4, [pc, #148]	@ (8004964 <__pow5mult+0xa8>)
 80048ce:	3a01      	subs	r2, #1
 80048d0:	2300      	movs	r3, #0
 80048d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80048d6:	f7ff fea7 	bl	8004628 <__multadd>
 80048da:	4606      	mov	r6, r0
 80048dc:	10ad      	asrs	r5, r5, #2
 80048de:	d03d      	beq.n	800495c <__pow5mult+0xa0>
 80048e0:	69fc      	ldr	r4, [r7, #28]
 80048e2:	b97c      	cbnz	r4, 8004904 <__pow5mult+0x48>
 80048e4:	2010      	movs	r0, #16
 80048e6:	f7ff fd87 	bl	80043f8 <malloc>
 80048ea:	4602      	mov	r2, r0
 80048ec:	61f8      	str	r0, [r7, #28]
 80048ee:	b928      	cbnz	r0, 80048fc <__pow5mult+0x40>
 80048f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80048f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004968 <__pow5mult+0xac>)
 80048f6:	481d      	ldr	r0, [pc, #116]	@ (800496c <__pow5mult+0xb0>)
 80048f8:	f000 fbe6 	bl	80050c8 <__assert_func>
 80048fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004900:	6004      	str	r4, [r0, #0]
 8004902:	60c4      	str	r4, [r0, #12]
 8004904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800490c:	b94c      	cbnz	r4, 8004922 <__pow5mult+0x66>
 800490e:	f240 2171 	movw	r1, #625	@ 0x271
 8004912:	4638      	mov	r0, r7
 8004914:	f7ff ff1a 	bl	800474c <__i2b>
 8004918:	2300      	movs	r3, #0
 800491a:	4604      	mov	r4, r0
 800491c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004920:	6003      	str	r3, [r0, #0]
 8004922:	f04f 0900 	mov.w	r9, #0
 8004926:	07eb      	lsls	r3, r5, #31
 8004928:	d50a      	bpl.n	8004940 <__pow5mult+0x84>
 800492a:	4631      	mov	r1, r6
 800492c:	4622      	mov	r2, r4
 800492e:	4638      	mov	r0, r7
 8004930:	f7ff ff22 	bl	8004778 <__multiply>
 8004934:	4680      	mov	r8, r0
 8004936:	4631      	mov	r1, r6
 8004938:	4638      	mov	r0, r7
 800493a:	f7ff fe53 	bl	80045e4 <_Bfree>
 800493e:	4646      	mov	r6, r8
 8004940:	106d      	asrs	r5, r5, #1
 8004942:	d00b      	beq.n	800495c <__pow5mult+0xa0>
 8004944:	6820      	ldr	r0, [r4, #0]
 8004946:	b938      	cbnz	r0, 8004958 <__pow5mult+0x9c>
 8004948:	4622      	mov	r2, r4
 800494a:	4621      	mov	r1, r4
 800494c:	4638      	mov	r0, r7
 800494e:	f7ff ff13 	bl	8004778 <__multiply>
 8004952:	6020      	str	r0, [r4, #0]
 8004954:	f8c0 9000 	str.w	r9, [r0]
 8004958:	4604      	mov	r4, r0
 800495a:	e7e4      	b.n	8004926 <__pow5mult+0x6a>
 800495c:	4630      	mov	r0, r6
 800495e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004962:	bf00      	nop
 8004964:	08005ef8 	.word	0x08005ef8
 8004968:	08005dc8 	.word	0x08005dc8
 800496c:	08005e48 	.word	0x08005e48

08004970 <__lshift>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	460c      	mov	r4, r1
 8004976:	4607      	mov	r7, r0
 8004978:	4691      	mov	r9, r2
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	6849      	ldr	r1, [r1, #4]
 800497e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004982:	68a3      	ldr	r3, [r4, #8]
 8004984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004988:	f108 0601 	add.w	r6, r8, #1
 800498c:	42b3      	cmp	r3, r6
 800498e:	db0b      	blt.n	80049a8 <__lshift+0x38>
 8004990:	4638      	mov	r0, r7
 8004992:	f7ff fde7 	bl	8004564 <_Balloc>
 8004996:	4605      	mov	r5, r0
 8004998:	b948      	cbnz	r0, 80049ae <__lshift+0x3e>
 800499a:	4602      	mov	r2, r0
 800499c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80049a0:	4b27      	ldr	r3, [pc, #156]	@ (8004a40 <__lshift+0xd0>)
 80049a2:	4828      	ldr	r0, [pc, #160]	@ (8004a44 <__lshift+0xd4>)
 80049a4:	f000 fb90 	bl	80050c8 <__assert_func>
 80049a8:	3101      	adds	r1, #1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	e7ee      	b.n	800498c <__lshift+0x1c>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f100 0114 	add.w	r1, r0, #20
 80049b4:	f100 0210 	add.w	r2, r0, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	4553      	cmp	r3, sl
 80049bc:	db33      	blt.n	8004a26 <__lshift+0xb6>
 80049be:	6920      	ldr	r0, [r4, #16]
 80049c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049c4:	f104 0314 	add.w	r3, r4, #20
 80049c8:	f019 091f 	ands.w	r9, r9, #31
 80049cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80049d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80049d4:	d02b      	beq.n	8004a2e <__lshift+0xbe>
 80049d6:	468a      	mov	sl, r1
 80049d8:	2200      	movs	r2, #0
 80049da:	f1c9 0e20 	rsb	lr, r9, #32
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	fa00 f009 	lsl.w	r0, r0, r9
 80049e4:	4310      	orrs	r0, r2
 80049e6:	f84a 0b04 	str.w	r0, [sl], #4
 80049ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ee:	459c      	cmp	ip, r3
 80049f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80049f4:	d8f3      	bhi.n	80049de <__lshift+0x6e>
 80049f6:	ebac 0304 	sub.w	r3, ip, r4
 80049fa:	3b15      	subs	r3, #21
 80049fc:	f023 0303 	bic.w	r3, r3, #3
 8004a00:	3304      	adds	r3, #4
 8004a02:	f104 0015 	add.w	r0, r4, #21
 8004a06:	4560      	cmp	r0, ip
 8004a08:	bf88      	it	hi
 8004a0a:	2304      	movhi	r3, #4
 8004a0c:	50ca      	str	r2, [r1, r3]
 8004a0e:	b10a      	cbz	r2, 8004a14 <__lshift+0xa4>
 8004a10:	f108 0602 	add.w	r6, r8, #2
 8004a14:	3e01      	subs	r6, #1
 8004a16:	4638      	mov	r0, r7
 8004a18:	4621      	mov	r1, r4
 8004a1a:	612e      	str	r6, [r5, #16]
 8004a1c:	f7ff fde2 	bl	80045e4 <_Bfree>
 8004a20:	4628      	mov	r0, r5
 8004a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	e7c5      	b.n	80049ba <__lshift+0x4a>
 8004a2e:	3904      	subs	r1, #4
 8004a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a34:	459c      	cmp	ip, r3
 8004a36:	f841 2f04 	str.w	r2, [r1, #4]!
 8004a3a:	d8f9      	bhi.n	8004a30 <__lshift+0xc0>
 8004a3c:	e7ea      	b.n	8004a14 <__lshift+0xa4>
 8004a3e:	bf00      	nop
 8004a40:	08005e37 	.word	0x08005e37
 8004a44:	08005e48 	.word	0x08005e48

08004a48 <__mcmp>:
 8004a48:	4603      	mov	r3, r0
 8004a4a:	690a      	ldr	r2, [r1, #16]
 8004a4c:	6900      	ldr	r0, [r0, #16]
 8004a4e:	b530      	push	{r4, r5, lr}
 8004a50:	1a80      	subs	r0, r0, r2
 8004a52:	d10e      	bne.n	8004a72 <__mcmp+0x2a>
 8004a54:	3314      	adds	r3, #20
 8004a56:	3114      	adds	r1, #20
 8004a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a68:	4295      	cmp	r5, r2
 8004a6a:	d003      	beq.n	8004a74 <__mcmp+0x2c>
 8004a6c:	d205      	bcs.n	8004a7a <__mcmp+0x32>
 8004a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a72:	bd30      	pop	{r4, r5, pc}
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	d3f3      	bcc.n	8004a60 <__mcmp+0x18>
 8004a78:	e7fb      	b.n	8004a72 <__mcmp+0x2a>
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	e7f9      	b.n	8004a72 <__mcmp+0x2a>
	...

08004a80 <__mdiff>:
 8004a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	4689      	mov	r9, r1
 8004a86:	4606      	mov	r6, r0
 8004a88:	4611      	mov	r1, r2
 8004a8a:	4648      	mov	r0, r9
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	f7ff ffdb 	bl	8004a48 <__mcmp>
 8004a92:	1e05      	subs	r5, r0, #0
 8004a94:	d112      	bne.n	8004abc <__mdiff+0x3c>
 8004a96:	4629      	mov	r1, r5
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f7ff fd63 	bl	8004564 <_Balloc>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	b928      	cbnz	r0, 8004aae <__mdiff+0x2e>
 8004aa2:	f240 2137 	movw	r1, #567	@ 0x237
 8004aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba0 <__mdiff+0x120>)
 8004aa8:	483e      	ldr	r0, [pc, #248]	@ (8004ba4 <__mdiff+0x124>)
 8004aaa:	f000 fb0d 	bl	80050c8 <__assert_func>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	b003      	add	sp, #12
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	bfbc      	itt	lt
 8004abe:	464b      	movlt	r3, r9
 8004ac0:	46a1      	movlt	r9, r4
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004ac8:	bfba      	itte	lt
 8004aca:	461c      	movlt	r4, r3
 8004acc:	2501      	movlt	r5, #1
 8004ace:	2500      	movge	r5, #0
 8004ad0:	f7ff fd48 	bl	8004564 <_Balloc>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	b918      	cbnz	r0, 8004ae0 <__mdiff+0x60>
 8004ad8:	f240 2145 	movw	r1, #581	@ 0x245
 8004adc:	4b30      	ldr	r3, [pc, #192]	@ (8004ba0 <__mdiff+0x120>)
 8004ade:	e7e3      	b.n	8004aa8 <__mdiff+0x28>
 8004ae0:	f100 0b14 	add.w	fp, r0, #20
 8004ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ae8:	f109 0310 	add.w	r3, r9, #16
 8004aec:	60c5      	str	r5, [r0, #12]
 8004aee:	f04f 0c00 	mov.w	ip, #0
 8004af2:	f109 0514 	add.w	r5, r9, #20
 8004af6:	46d9      	mov	r9, fp
 8004af8:	6926      	ldr	r6, [r4, #16]
 8004afa:	f104 0e14 	add.w	lr, r4, #20
 8004afe:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004b02:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004b12:	b281      	uxth	r1, r0
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	fa1f f38a 	uxth.w	r3, sl
 8004b1a:	1a5b      	subs	r3, r3, r1
 8004b1c:	0c00      	lsrs	r0, r0, #16
 8004b1e:	4463      	add	r3, ip
 8004b20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004b24:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004b2e:	4576      	cmp	r6, lr
 8004b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b34:	f849 3b04 	str.w	r3, [r9], #4
 8004b38:	d8e6      	bhi.n	8004b08 <__mdiff+0x88>
 8004b3a:	1b33      	subs	r3, r6, r4
 8004b3c:	3b15      	subs	r3, #21
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	3415      	adds	r4, #21
 8004b44:	3304      	adds	r3, #4
 8004b46:	42a6      	cmp	r6, r4
 8004b48:	bf38      	it	cc
 8004b4a:	2304      	movcc	r3, #4
 8004b4c:	441d      	add	r5, r3
 8004b4e:	445b      	add	r3, fp
 8004b50:	461e      	mov	r6, r3
 8004b52:	462c      	mov	r4, r5
 8004b54:	4544      	cmp	r4, r8
 8004b56:	d30e      	bcc.n	8004b76 <__mdiff+0xf6>
 8004b58:	f108 0103 	add.w	r1, r8, #3
 8004b5c:	1b49      	subs	r1, r1, r5
 8004b5e:	f021 0103 	bic.w	r1, r1, #3
 8004b62:	3d03      	subs	r5, #3
 8004b64:	45a8      	cmp	r8, r5
 8004b66:	bf38      	it	cc
 8004b68:	2100      	movcc	r1, #0
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b70:	b199      	cbz	r1, 8004b9a <__mdiff+0x11a>
 8004b72:	6117      	str	r7, [r2, #16]
 8004b74:	e79e      	b.n	8004ab4 <__mdiff+0x34>
 8004b76:	46e6      	mov	lr, ip
 8004b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8004b7c:	fa1f fc81 	uxth.w	ip, r1
 8004b80:	44f4      	add	ip, lr
 8004b82:	0c08      	lsrs	r0, r1, #16
 8004b84:	4471      	add	r1, lr
 8004b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004b8a:	b289      	uxth	r1, r1
 8004b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b94:	f846 1b04 	str.w	r1, [r6], #4
 8004b98:	e7dc      	b.n	8004b54 <__mdiff+0xd4>
 8004b9a:	3f01      	subs	r7, #1
 8004b9c:	e7e6      	b.n	8004b6c <__mdiff+0xec>
 8004b9e:	bf00      	nop
 8004ba0:	08005e37 	.word	0x08005e37
 8004ba4:	08005e48 	.word	0x08005e48

08004ba8 <__d2b>:
 8004ba8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004bac:	2101      	movs	r1, #1
 8004bae:	4690      	mov	r8, r2
 8004bb0:	4699      	mov	r9, r3
 8004bb2:	9e08      	ldr	r6, [sp, #32]
 8004bb4:	f7ff fcd6 	bl	8004564 <_Balloc>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	b930      	cbnz	r0, 8004bca <__d2b+0x22>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8004bc2:	4b23      	ldr	r3, [pc, #140]	@ (8004c50 <__d2b+0xa8>)
 8004bc4:	4823      	ldr	r0, [pc, #140]	@ (8004c54 <__d2b+0xac>)
 8004bc6:	f000 fa7f 	bl	80050c8 <__assert_func>
 8004bca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bd2:	b10d      	cbz	r5, 8004bd8 <__d2b+0x30>
 8004bd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	f1b8 0300 	subs.w	r3, r8, #0
 8004bde:	d024      	beq.n	8004c2a <__d2b+0x82>
 8004be0:	4668      	mov	r0, sp
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	f7ff fd85 	bl	80046f2 <__lo0bits>
 8004be8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004bec:	b1d8      	cbz	r0, 8004c26 <__d2b+0x7e>
 8004bee:	f1c0 0320 	rsb	r3, r0, #32
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	40c2      	lsrs	r2, r0
 8004bfa:	6163      	str	r3, [r4, #20]
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2201      	moveq	r2, #1
 8004c06:	2202      	movne	r2, #2
 8004c08:	61a3      	str	r3, [r4, #24]
 8004c0a:	6122      	str	r2, [r4, #16]
 8004c0c:	b1ad      	cbz	r5, 8004c3a <__d2b+0x92>
 8004c0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004c12:	4405      	add	r5, r0
 8004c14:	6035      	str	r5, [r6, #0]
 8004c16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c1c:	6018      	str	r0, [r3, #0]
 8004c1e:	4620      	mov	r0, r4
 8004c20:	b002      	add	sp, #8
 8004c22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004c26:	6161      	str	r1, [r4, #20]
 8004c28:	e7e9      	b.n	8004bfe <__d2b+0x56>
 8004c2a:	a801      	add	r0, sp, #4
 8004c2c:	f7ff fd61 	bl	80046f2 <__lo0bits>
 8004c30:	9b01      	ldr	r3, [sp, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	6163      	str	r3, [r4, #20]
 8004c36:	3020      	adds	r0, #32
 8004c38:	e7e7      	b.n	8004c0a <__d2b+0x62>
 8004c3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004c42:	6030      	str	r0, [r6, #0]
 8004c44:	6918      	ldr	r0, [r3, #16]
 8004c46:	f7ff fd35 	bl	80046b4 <__hi0bits>
 8004c4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004c4e:	e7e4      	b.n	8004c1a <__d2b+0x72>
 8004c50:	08005e37 	.word	0x08005e37
 8004c54:	08005e48 	.word	0x08005e48

08004c58 <__ssputs_r>:
 8004c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5c:	461f      	mov	r7, r3
 8004c5e:	688e      	ldr	r6, [r1, #8]
 8004c60:	4682      	mov	sl, r0
 8004c62:	42be      	cmp	r6, r7
 8004c64:	460c      	mov	r4, r1
 8004c66:	4690      	mov	r8, r2
 8004c68:	680b      	ldr	r3, [r1, #0]
 8004c6a:	d82d      	bhi.n	8004cc8 <__ssputs_r+0x70>
 8004c6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c74:	d026      	beq.n	8004cc4 <__ssputs_r+0x6c>
 8004c76:	6965      	ldr	r5, [r4, #20]
 8004c78:	6909      	ldr	r1, [r1, #16]
 8004c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c7e:	eba3 0901 	sub.w	r9, r3, r1
 8004c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c86:	1c7b      	adds	r3, r7, #1
 8004c88:	444b      	add	r3, r9
 8004c8a:	106d      	asrs	r5, r5, #1
 8004c8c:	429d      	cmp	r5, r3
 8004c8e:	bf38      	it	cc
 8004c90:	461d      	movcc	r5, r3
 8004c92:	0553      	lsls	r3, r2, #21
 8004c94:	d527      	bpl.n	8004ce6 <__ssputs_r+0x8e>
 8004c96:	4629      	mov	r1, r5
 8004c98:	f7ff fbd8 	bl	800444c <_malloc_r>
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	b360      	cbz	r0, 8004cfa <__ssputs_r+0xa2>
 8004ca0:	464a      	mov	r2, r9
 8004ca2:	6921      	ldr	r1, [r4, #16]
 8004ca4:	f000 fa02 	bl	80050ac <memcpy>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	6126      	str	r6, [r4, #16]
 8004cb6:	444e      	add	r6, r9
 8004cb8:	6026      	str	r6, [r4, #0]
 8004cba:	463e      	mov	r6, r7
 8004cbc:	6165      	str	r5, [r4, #20]
 8004cbe:	eba5 0509 	sub.w	r5, r5, r9
 8004cc2:	60a5      	str	r5, [r4, #8]
 8004cc4:	42be      	cmp	r6, r7
 8004cc6:	d900      	bls.n	8004cca <__ssputs_r+0x72>
 8004cc8:	463e      	mov	r6, r7
 8004cca:	4632      	mov	r2, r6
 8004ccc:	4641      	mov	r1, r8
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	f000 f9c2 	bl	8005058 <memmove>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	68a3      	ldr	r3, [r4, #8]
 8004cd8:	1b9b      	subs	r3, r3, r6
 8004cda:	60a3      	str	r3, [r4, #8]
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	4433      	add	r3, r6
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	f000 fa32 	bl	8005150 <_realloc_r>
 8004cec:	4606      	mov	r6, r0
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1e0      	bne.n	8004cb4 <__ssputs_r+0x5c>
 8004cf2:	4650      	mov	r0, sl
 8004cf4:	6921      	ldr	r1, [r4, #16]
 8004cf6:	f7ff fb37 	bl	8004368 <_free_r>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	f8ca 3000 	str.w	r3, [sl]
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	f04f 30ff 	mov.w	r0, #4294967295
 8004d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	e7e9      	b.n	8004ce2 <__ssputs_r+0x8a>
	...

08004d10 <_svfiprintf_r>:
 8004d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d14:	4698      	mov	r8, r3
 8004d16:	898b      	ldrh	r3, [r1, #12]
 8004d18:	4607      	mov	r7, r0
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	4614      	mov	r4, r2
 8004d20:	b09d      	sub	sp, #116	@ 0x74
 8004d22:	d510      	bpl.n	8004d46 <_svfiprintf_r+0x36>
 8004d24:	690b      	ldr	r3, [r1, #16]
 8004d26:	b973      	cbnz	r3, 8004d46 <_svfiprintf_r+0x36>
 8004d28:	2140      	movs	r1, #64	@ 0x40
 8004d2a:	f7ff fb8f 	bl	800444c <_malloc_r>
 8004d2e:	6028      	str	r0, [r5, #0]
 8004d30:	6128      	str	r0, [r5, #16]
 8004d32:	b930      	cbnz	r0, 8004d42 <_svfiprintf_r+0x32>
 8004d34:	230c      	movs	r3, #12
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3c:	b01d      	add	sp, #116	@ 0x74
 8004d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d42:	2340      	movs	r3, #64	@ 0x40
 8004d44:	616b      	str	r3, [r5, #20]
 8004d46:	2300      	movs	r3, #0
 8004d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d50:	2330      	movs	r3, #48	@ 0x30
 8004d52:	f04f 0901 	mov.w	r9, #1
 8004d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ef4 <_svfiprintf_r+0x1e4>
 8004d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d62:	4623      	mov	r3, r4
 8004d64:	469a      	mov	sl, r3
 8004d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d6a:	b10a      	cbz	r2, 8004d70 <_svfiprintf_r+0x60>
 8004d6c:	2a25      	cmp	r2, #37	@ 0x25
 8004d6e:	d1f9      	bne.n	8004d64 <_svfiprintf_r+0x54>
 8004d70:	ebba 0b04 	subs.w	fp, sl, r4
 8004d74:	d00b      	beq.n	8004d8e <_svfiprintf_r+0x7e>
 8004d76:	465b      	mov	r3, fp
 8004d78:	4622      	mov	r2, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4638      	mov	r0, r7
 8004d7e:	f7ff ff6b 	bl	8004c58 <__ssputs_r>
 8004d82:	3001      	adds	r0, #1
 8004d84:	f000 80a7 	beq.w	8004ed6 <_svfiprintf_r+0x1c6>
 8004d88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d8a:	445a      	add	r2, fp
 8004d8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 809f 	beq.w	8004ed6 <_svfiprintf_r+0x1c6>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da2:	f10a 0a01 	add.w	sl, sl, #1
 8004da6:	9304      	str	r3, [sp, #16]
 8004da8:	9307      	str	r3, [sp, #28]
 8004daa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8004db0:	4654      	mov	r4, sl
 8004db2:	2205      	movs	r2, #5
 8004db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db8:	484e      	ldr	r0, [pc, #312]	@ (8004ef4 <_svfiprintf_r+0x1e4>)
 8004dba:	f7fe fc68 	bl	800368e <memchr>
 8004dbe:	9a04      	ldr	r2, [sp, #16]
 8004dc0:	b9d8      	cbnz	r0, 8004dfa <_svfiprintf_r+0xea>
 8004dc2:	06d0      	lsls	r0, r2, #27
 8004dc4:	bf44      	itt	mi
 8004dc6:	2320      	movmi	r3, #32
 8004dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dcc:	0711      	lsls	r1, r2, #28
 8004dce:	bf44      	itt	mi
 8004dd0:	232b      	movmi	r3, #43	@ 0x2b
 8004dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ddc:	d015      	beq.n	8004e0a <_svfiprintf_r+0xfa>
 8004dde:	4654      	mov	r4, sl
 8004de0:	2000      	movs	r0, #0
 8004de2:	f04f 0c0a 	mov.w	ip, #10
 8004de6:	9a07      	ldr	r2, [sp, #28]
 8004de8:	4621      	mov	r1, r4
 8004dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dee:	3b30      	subs	r3, #48	@ 0x30
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	d94b      	bls.n	8004e8c <_svfiprintf_r+0x17c>
 8004df4:	b1b0      	cbz	r0, 8004e24 <_svfiprintf_r+0x114>
 8004df6:	9207      	str	r2, [sp, #28]
 8004df8:	e014      	b.n	8004e24 <_svfiprintf_r+0x114>
 8004dfa:	eba0 0308 	sub.w	r3, r0, r8
 8004dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	46a2      	mov	sl, r4
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	e7d2      	b.n	8004db0 <_svfiprintf_r+0xa0>
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	1d19      	adds	r1, r3, #4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	9103      	str	r1, [sp, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	bfbb      	ittet	lt
 8004e16:	425b      	neglt	r3, r3
 8004e18:	f042 0202 	orrlt.w	r2, r2, #2
 8004e1c:	9307      	strge	r3, [sp, #28]
 8004e1e:	9307      	strlt	r3, [sp, #28]
 8004e20:	bfb8      	it	lt
 8004e22:	9204      	strlt	r2, [sp, #16]
 8004e24:	7823      	ldrb	r3, [r4, #0]
 8004e26:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e28:	d10a      	bne.n	8004e40 <_svfiprintf_r+0x130>
 8004e2a:	7863      	ldrb	r3, [r4, #1]
 8004e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e2e:	d132      	bne.n	8004e96 <_svfiprintf_r+0x186>
 8004e30:	9b03      	ldr	r3, [sp, #12]
 8004e32:	3402      	adds	r4, #2
 8004e34:	1d1a      	adds	r2, r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	9203      	str	r2, [sp, #12]
 8004e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e3e:	9305      	str	r3, [sp, #20]
 8004e40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004ef8 <_svfiprintf_r+0x1e8>
 8004e44:	2203      	movs	r2, #3
 8004e46:	4650      	mov	r0, sl
 8004e48:	7821      	ldrb	r1, [r4, #0]
 8004e4a:	f7fe fc20 	bl	800368e <memchr>
 8004e4e:	b138      	cbz	r0, 8004e60 <_svfiprintf_r+0x150>
 8004e50:	2240      	movs	r2, #64	@ 0x40
 8004e52:	9b04      	ldr	r3, [sp, #16]
 8004e54:	eba0 000a 	sub.w	r0, r0, sl
 8004e58:	4082      	lsls	r2, r0
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	3401      	adds	r4, #1
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e64:	2206      	movs	r2, #6
 8004e66:	4825      	ldr	r0, [pc, #148]	@ (8004efc <_svfiprintf_r+0x1ec>)
 8004e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e6c:	f7fe fc0f 	bl	800368e <memchr>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d036      	beq.n	8004ee2 <_svfiprintf_r+0x1d2>
 8004e74:	4b22      	ldr	r3, [pc, #136]	@ (8004f00 <_svfiprintf_r+0x1f0>)
 8004e76:	bb1b      	cbnz	r3, 8004ec0 <_svfiprintf_r+0x1b0>
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	3307      	adds	r3, #7
 8004e7c:	f023 0307 	bic.w	r3, r3, #7
 8004e80:	3308      	adds	r3, #8
 8004e82:	9303      	str	r3, [sp, #12]
 8004e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e86:	4433      	add	r3, r6
 8004e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e8a:	e76a      	b.n	8004d62 <_svfiprintf_r+0x52>
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	2001      	movs	r0, #1
 8004e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e94:	e7a8      	b.n	8004de8 <_svfiprintf_r+0xd8>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f04f 0c0a 	mov.w	ip, #10
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	3401      	adds	r4, #1
 8004ea0:	9305      	str	r3, [sp, #20]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea8:	3a30      	subs	r2, #48	@ 0x30
 8004eaa:	2a09      	cmp	r2, #9
 8004eac:	d903      	bls.n	8004eb6 <_svfiprintf_r+0x1a6>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0c6      	beq.n	8004e40 <_svfiprintf_r+0x130>
 8004eb2:	9105      	str	r1, [sp, #20]
 8004eb4:	e7c4      	b.n	8004e40 <_svfiprintf_r+0x130>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	2301      	movs	r3, #1
 8004eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ebe:	e7f0      	b.n	8004ea2 <_svfiprintf_r+0x192>
 8004ec0:	ab03      	add	r3, sp, #12
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <_svfiprintf_r+0x1f4>)
 8004eca:	a904      	add	r1, sp, #16
 8004ecc:	f7fd fe7c 	bl	8002bc8 <_printf_float>
 8004ed0:	1c42      	adds	r2, r0, #1
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	d1d6      	bne.n	8004e84 <_svfiprintf_r+0x174>
 8004ed6:	89ab      	ldrh	r3, [r5, #12]
 8004ed8:	065b      	lsls	r3, r3, #25
 8004eda:	f53f af2d 	bmi.w	8004d38 <_svfiprintf_r+0x28>
 8004ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ee0:	e72c      	b.n	8004d3c <_svfiprintf_r+0x2c>
 8004ee2:	ab03      	add	r3, sp, #12
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	4638      	mov	r0, r7
 8004eea:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <_svfiprintf_r+0x1f4>)
 8004eec:	a904      	add	r1, sp, #16
 8004eee:	f7fe f909 	bl	8003104 <_printf_i>
 8004ef2:	e7ed      	b.n	8004ed0 <_svfiprintf_r+0x1c0>
 8004ef4:	08005ea1 	.word	0x08005ea1
 8004ef8:	08005ea7 	.word	0x08005ea7
 8004efc:	08005eab 	.word	0x08005eab
 8004f00:	08002bc9 	.word	0x08002bc9
 8004f04:	08004c59 	.word	0x08004c59

08004f08 <__sflush_r>:
 8004f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	0716      	lsls	r6, r2, #28
 8004f10:	4605      	mov	r5, r0
 8004f12:	460c      	mov	r4, r1
 8004f14:	d454      	bmi.n	8004fc0 <__sflush_r+0xb8>
 8004f16:	684b      	ldr	r3, [r1, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dc02      	bgt.n	8004f22 <__sflush_r+0x1a>
 8004f1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dd48      	ble.n	8004fb4 <__sflush_r+0xac>
 8004f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	d045      	beq.n	8004fb4 <__sflush_r+0xac>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f2e:	682f      	ldr	r7, [r5, #0]
 8004f30:	6a21      	ldr	r1, [r4, #32]
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	d030      	beq.n	8004f98 <__sflush_r+0x90>
 8004f36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	0759      	lsls	r1, r3, #29
 8004f3c:	d505      	bpl.n	8004f4a <__sflush_r+0x42>
 8004f3e:	6863      	ldr	r3, [r4, #4]
 8004f40:	1ad2      	subs	r2, r2, r3
 8004f42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f44:	b10b      	cbz	r3, 8004f4a <__sflush_r+0x42>
 8004f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f48:	1ad2      	subs	r2, r2, r3
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f50:	6a21      	ldr	r1, [r4, #32]
 8004f52:	47b0      	blx	r6
 8004f54:	1c43      	adds	r3, r0, #1
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	d106      	bne.n	8004f68 <__sflush_r+0x60>
 8004f5a:	6829      	ldr	r1, [r5, #0]
 8004f5c:	291d      	cmp	r1, #29
 8004f5e:	d82b      	bhi.n	8004fb8 <__sflush_r+0xb0>
 8004f60:	4a28      	ldr	r2, [pc, #160]	@ (8005004 <__sflush_r+0xfc>)
 8004f62:	40ca      	lsrs	r2, r1
 8004f64:	07d6      	lsls	r6, r2, #31
 8004f66:	d527      	bpl.n	8004fb8 <__sflush_r+0xb0>
 8004f68:	2200      	movs	r2, #0
 8004f6a:	6062      	str	r2, [r4, #4]
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	04d9      	lsls	r1, r3, #19
 8004f70:	6022      	str	r2, [r4, #0]
 8004f72:	d504      	bpl.n	8004f7e <__sflush_r+0x76>
 8004f74:	1c42      	adds	r2, r0, #1
 8004f76:	d101      	bne.n	8004f7c <__sflush_r+0x74>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b903      	cbnz	r3, 8004f7e <__sflush_r+0x76>
 8004f7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f80:	602f      	str	r7, [r5, #0]
 8004f82:	b1b9      	cbz	r1, 8004fb4 <__sflush_r+0xac>
 8004f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	d002      	beq.n	8004f92 <__sflush_r+0x8a>
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f7ff f9eb 	bl	8004368 <_free_r>
 8004f92:	2300      	movs	r3, #0
 8004f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f96:	e00d      	b.n	8004fb4 <__sflush_r+0xac>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b0      	blx	r6
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	1c50      	adds	r0, r2, #1
 8004fa2:	d1c9      	bne.n	8004f38 <__sflush_r+0x30>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0c6      	beq.n	8004f38 <__sflush_r+0x30>
 8004faa:	2b1d      	cmp	r3, #29
 8004fac:	d001      	beq.n	8004fb2 <__sflush_r+0xaa>
 8004fae:	2b16      	cmp	r3, #22
 8004fb0:	d11d      	bne.n	8004fee <__sflush_r+0xe6>
 8004fb2:	602f      	str	r7, [r5, #0]
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e021      	b.n	8004ffc <__sflush_r+0xf4>
 8004fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	e01a      	b.n	8004ff6 <__sflush_r+0xee>
 8004fc0:	690f      	ldr	r7, [r1, #16]
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	d0f6      	beq.n	8004fb4 <__sflush_r+0xac>
 8004fc6:	0793      	lsls	r3, r2, #30
 8004fc8:	bf18      	it	ne
 8004fca:	2300      	movne	r3, #0
 8004fcc:	680e      	ldr	r6, [r1, #0]
 8004fce:	bf08      	it	eq
 8004fd0:	694b      	ldreq	r3, [r1, #20]
 8004fd2:	1bf6      	subs	r6, r6, r7
 8004fd4:	600f      	str	r7, [r1, #0]
 8004fd6:	608b      	str	r3, [r1, #8]
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	ddeb      	ble.n	8004fb4 <__sflush_r+0xac>
 8004fdc:	4633      	mov	r3, r6
 8004fde:	463a      	mov	r2, r7
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	6a21      	ldr	r1, [r4, #32]
 8004fe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004fe8:	47e0      	blx	ip
 8004fea:	2800      	cmp	r0, #0
 8004fec:	dc07      	bgt.n	8004ffe <__sflush_r+0xf6>
 8004fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffe:	4407      	add	r7, r0
 8005000:	1a36      	subs	r6, r6, r0
 8005002:	e7e9      	b.n	8004fd8 <__sflush_r+0xd0>
 8005004:	20400001 	.word	0x20400001

08005008 <_fflush_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b913      	cbnz	r3, 8005018 <_fflush_r+0x10>
 8005012:	2500      	movs	r5, #0
 8005014:	4628      	mov	r0, r5
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	b118      	cbz	r0, 8005022 <_fflush_r+0x1a>
 800501a:	6a03      	ldr	r3, [r0, #32]
 800501c:	b90b      	cbnz	r3, 8005022 <_fflush_r+0x1a>
 800501e:	f7fe fa1b 	bl	8003458 <__sinit>
 8005022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0f3      	beq.n	8005012 <_fflush_r+0xa>
 800502a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800502c:	07d0      	lsls	r0, r2, #31
 800502e:	d404      	bmi.n	800503a <_fflush_r+0x32>
 8005030:	0599      	lsls	r1, r3, #22
 8005032:	d402      	bmi.n	800503a <_fflush_r+0x32>
 8005034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005036:	f7fe fb28 	bl	800368a <__retarget_lock_acquire_recursive>
 800503a:	4628      	mov	r0, r5
 800503c:	4621      	mov	r1, r4
 800503e:	f7ff ff63 	bl	8004f08 <__sflush_r>
 8005042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005044:	4605      	mov	r5, r0
 8005046:	07da      	lsls	r2, r3, #31
 8005048:	d4e4      	bmi.n	8005014 <_fflush_r+0xc>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	059b      	lsls	r3, r3, #22
 800504e:	d4e1      	bmi.n	8005014 <_fflush_r+0xc>
 8005050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005052:	f7fe fb1b 	bl	800368c <__retarget_lock_release_recursive>
 8005056:	e7dd      	b.n	8005014 <_fflush_r+0xc>

08005058 <memmove>:
 8005058:	4288      	cmp	r0, r1
 800505a:	b510      	push	{r4, lr}
 800505c:	eb01 0402 	add.w	r4, r1, r2
 8005060:	d902      	bls.n	8005068 <memmove+0x10>
 8005062:	4284      	cmp	r4, r0
 8005064:	4623      	mov	r3, r4
 8005066:	d807      	bhi.n	8005078 <memmove+0x20>
 8005068:	1e43      	subs	r3, r0, #1
 800506a:	42a1      	cmp	r1, r4
 800506c:	d008      	beq.n	8005080 <memmove+0x28>
 800506e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005076:	e7f8      	b.n	800506a <memmove+0x12>
 8005078:	4601      	mov	r1, r0
 800507a:	4402      	add	r2, r0
 800507c:	428a      	cmp	r2, r1
 800507e:	d100      	bne.n	8005082 <memmove+0x2a>
 8005080:	bd10      	pop	{r4, pc}
 8005082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800508a:	e7f7      	b.n	800507c <memmove+0x24>

0800508c <_sbrk_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	2300      	movs	r3, #0
 8005090:	4d05      	ldr	r5, [pc, #20]	@ (80050a8 <_sbrk_r+0x1c>)
 8005092:	4604      	mov	r4, r0
 8005094:	4608      	mov	r0, r1
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	f7fd fb64 	bl	8002764 <_sbrk>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_sbrk_r+0x1a>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_sbrk_r+0x1a>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	20000360 	.word	0x20000360

080050ac <memcpy>:
 80050ac:	440a      	add	r2, r1
 80050ae:	4291      	cmp	r1, r2
 80050b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050b4:	d100      	bne.n	80050b8 <memcpy+0xc>
 80050b6:	4770      	bx	lr
 80050b8:	b510      	push	{r4, lr}
 80050ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050be:	4291      	cmp	r1, r2
 80050c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050c4:	d1f9      	bne.n	80050ba <memcpy+0xe>
 80050c6:	bd10      	pop	{r4, pc}

080050c8 <__assert_func>:
 80050c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050ca:	4614      	mov	r4, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4b09      	ldr	r3, [pc, #36]	@ (80050f4 <__assert_func+0x2c>)
 80050d0:	4605      	mov	r5, r0
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68d8      	ldr	r0, [r3, #12]
 80050d6:	b14c      	cbz	r4, 80050ec <__assert_func+0x24>
 80050d8:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <__assert_func+0x30>)
 80050da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050de:	9100      	str	r1, [sp, #0]
 80050e0:	462b      	mov	r3, r5
 80050e2:	4906      	ldr	r1, [pc, #24]	@ (80050fc <__assert_func+0x34>)
 80050e4:	f000 f870 	bl	80051c8 <fiprintf>
 80050e8:	f000 f880 	bl	80051ec <abort>
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <__assert_func+0x38>)
 80050ee:	461c      	mov	r4, r3
 80050f0:	e7f3      	b.n	80050da <__assert_func+0x12>
 80050f2:	bf00      	nop
 80050f4:	2000003c 	.word	0x2000003c
 80050f8:	08005ebc 	.word	0x08005ebc
 80050fc:	08005ec9 	.word	0x08005ec9
 8005100:	08005ef7 	.word	0x08005ef7

08005104 <_calloc_r>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	fba1 5402 	umull	r5, r4, r1, r2
 800510a:	b934      	cbnz	r4, 800511a <_calloc_r+0x16>
 800510c:	4629      	mov	r1, r5
 800510e:	f7ff f99d 	bl	800444c <_malloc_r>
 8005112:	4606      	mov	r6, r0
 8005114:	b928      	cbnz	r0, 8005122 <_calloc_r+0x1e>
 8005116:	4630      	mov	r0, r6
 8005118:	bd70      	pop	{r4, r5, r6, pc}
 800511a:	220c      	movs	r2, #12
 800511c:	2600      	movs	r6, #0
 800511e:	6002      	str	r2, [r0, #0]
 8005120:	e7f9      	b.n	8005116 <_calloc_r+0x12>
 8005122:	462a      	mov	r2, r5
 8005124:	4621      	mov	r1, r4
 8005126:	f7fe fa32 	bl	800358e <memset>
 800512a:	e7f4      	b.n	8005116 <_calloc_r+0x12>

0800512c <__ascii_mbtowc>:
 800512c:	b082      	sub	sp, #8
 800512e:	b901      	cbnz	r1, 8005132 <__ascii_mbtowc+0x6>
 8005130:	a901      	add	r1, sp, #4
 8005132:	b142      	cbz	r2, 8005146 <__ascii_mbtowc+0x1a>
 8005134:	b14b      	cbz	r3, 800514a <__ascii_mbtowc+0x1e>
 8005136:	7813      	ldrb	r3, [r2, #0]
 8005138:	600b      	str	r3, [r1, #0]
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	1e10      	subs	r0, r2, #0
 800513e:	bf18      	it	ne
 8005140:	2001      	movne	r0, #1
 8005142:	b002      	add	sp, #8
 8005144:	4770      	bx	lr
 8005146:	4610      	mov	r0, r2
 8005148:	e7fb      	b.n	8005142 <__ascii_mbtowc+0x16>
 800514a:	f06f 0001 	mvn.w	r0, #1
 800514e:	e7f8      	b.n	8005142 <__ascii_mbtowc+0x16>

08005150 <_realloc_r>:
 8005150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005154:	4607      	mov	r7, r0
 8005156:	4614      	mov	r4, r2
 8005158:	460d      	mov	r5, r1
 800515a:	b921      	cbnz	r1, 8005166 <_realloc_r+0x16>
 800515c:	4611      	mov	r1, r2
 800515e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	f7ff b973 	b.w	800444c <_malloc_r>
 8005166:	b92a      	cbnz	r2, 8005174 <_realloc_r+0x24>
 8005168:	f7ff f8fe 	bl	8004368 <_free_r>
 800516c:	4625      	mov	r5, r4
 800516e:	4628      	mov	r0, r5
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	f000 f841 	bl	80051fa <_malloc_usable_size_r>
 8005178:	4284      	cmp	r4, r0
 800517a:	4606      	mov	r6, r0
 800517c:	d802      	bhi.n	8005184 <_realloc_r+0x34>
 800517e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005182:	d8f4      	bhi.n	800516e <_realloc_r+0x1e>
 8005184:	4621      	mov	r1, r4
 8005186:	4638      	mov	r0, r7
 8005188:	f7ff f960 	bl	800444c <_malloc_r>
 800518c:	4680      	mov	r8, r0
 800518e:	b908      	cbnz	r0, 8005194 <_realloc_r+0x44>
 8005190:	4645      	mov	r5, r8
 8005192:	e7ec      	b.n	800516e <_realloc_r+0x1e>
 8005194:	42b4      	cmp	r4, r6
 8005196:	4622      	mov	r2, r4
 8005198:	4629      	mov	r1, r5
 800519a:	bf28      	it	cs
 800519c:	4632      	movcs	r2, r6
 800519e:	f7ff ff85 	bl	80050ac <memcpy>
 80051a2:	4629      	mov	r1, r5
 80051a4:	4638      	mov	r0, r7
 80051a6:	f7ff f8df 	bl	8004368 <_free_r>
 80051aa:	e7f1      	b.n	8005190 <_realloc_r+0x40>

080051ac <__ascii_wctomb>:
 80051ac:	4603      	mov	r3, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	b141      	cbz	r1, 80051c4 <__ascii_wctomb+0x18>
 80051b2:	2aff      	cmp	r2, #255	@ 0xff
 80051b4:	d904      	bls.n	80051c0 <__ascii_wctomb+0x14>
 80051b6:	228a      	movs	r2, #138	@ 0x8a
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	4770      	bx	lr
 80051c0:	2001      	movs	r0, #1
 80051c2:	700a      	strb	r2, [r1, #0]
 80051c4:	4770      	bx	lr
	...

080051c8 <fiprintf>:
 80051c8:	b40e      	push	{r1, r2, r3}
 80051ca:	b503      	push	{r0, r1, lr}
 80051cc:	4601      	mov	r1, r0
 80051ce:	ab03      	add	r3, sp, #12
 80051d0:	4805      	ldr	r0, [pc, #20]	@ (80051e8 <fiprintf+0x20>)
 80051d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d6:	6800      	ldr	r0, [r0, #0]
 80051d8:	9301      	str	r3, [sp, #4]
 80051da:	f000 f83d 	bl	8005258 <_vfiprintf_r>
 80051de:	b002      	add	sp, #8
 80051e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e4:	b003      	add	sp, #12
 80051e6:	4770      	bx	lr
 80051e8:	2000003c 	.word	0x2000003c

080051ec <abort>:
 80051ec:	2006      	movs	r0, #6
 80051ee:	b508      	push	{r3, lr}
 80051f0:	f000 fa06 	bl	8005600 <raise>
 80051f4:	2001      	movs	r0, #1
 80051f6:	f7fd fa40 	bl	800267a <_exit>

080051fa <_malloc_usable_size_r>:
 80051fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051fe:	1f18      	subs	r0, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	bfbc      	itt	lt
 8005204:	580b      	ldrlt	r3, [r1, r0]
 8005206:	18c0      	addlt	r0, r0, r3
 8005208:	4770      	bx	lr

0800520a <__sfputc_r>:
 800520a:	6893      	ldr	r3, [r2, #8]
 800520c:	b410      	push	{r4}
 800520e:	3b01      	subs	r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	6093      	str	r3, [r2, #8]
 8005214:	da07      	bge.n	8005226 <__sfputc_r+0x1c>
 8005216:	6994      	ldr	r4, [r2, #24]
 8005218:	42a3      	cmp	r3, r4
 800521a:	db01      	blt.n	8005220 <__sfputc_r+0x16>
 800521c:	290a      	cmp	r1, #10
 800521e:	d102      	bne.n	8005226 <__sfputc_r+0x1c>
 8005220:	bc10      	pop	{r4}
 8005222:	f000 b931 	b.w	8005488 <__swbuf_r>
 8005226:	6813      	ldr	r3, [r2, #0]
 8005228:	1c58      	adds	r0, r3, #1
 800522a:	6010      	str	r0, [r2, #0]
 800522c:	7019      	strb	r1, [r3, #0]
 800522e:	4608      	mov	r0, r1
 8005230:	bc10      	pop	{r4}
 8005232:	4770      	bx	lr

08005234 <__sfputs_r>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	4606      	mov	r6, r0
 8005238:	460f      	mov	r7, r1
 800523a:	4614      	mov	r4, r2
 800523c:	18d5      	adds	r5, r2, r3
 800523e:	42ac      	cmp	r4, r5
 8005240:	d101      	bne.n	8005246 <__sfputs_r+0x12>
 8005242:	2000      	movs	r0, #0
 8005244:	e007      	b.n	8005256 <__sfputs_r+0x22>
 8005246:	463a      	mov	r2, r7
 8005248:	4630      	mov	r0, r6
 800524a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524e:	f7ff ffdc 	bl	800520a <__sfputc_r>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	d1f3      	bne.n	800523e <__sfputs_r+0xa>
 8005256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005258 <_vfiprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	460d      	mov	r5, r1
 800525e:	4614      	mov	r4, r2
 8005260:	4698      	mov	r8, r3
 8005262:	4606      	mov	r6, r0
 8005264:	b09d      	sub	sp, #116	@ 0x74
 8005266:	b118      	cbz	r0, 8005270 <_vfiprintf_r+0x18>
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	b90b      	cbnz	r3, 8005270 <_vfiprintf_r+0x18>
 800526c:	f7fe f8f4 	bl	8003458 <__sinit>
 8005270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	d405      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	059a      	lsls	r2, r3, #22
 800527a:	d402      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 800527c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800527e:	f7fe fa04 	bl	800368a <__retarget_lock_acquire_recursive>
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	d501      	bpl.n	800528c <_vfiprintf_r+0x34>
 8005288:	692b      	ldr	r3, [r5, #16]
 800528a:	b99b      	cbnz	r3, 80052b4 <_vfiprintf_r+0x5c>
 800528c:	4629      	mov	r1, r5
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f938 	bl	8005504 <__swsetup_r>
 8005294:	b170      	cbz	r0, 80052b4 <_vfiprintf_r+0x5c>
 8005296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005298:	07dc      	lsls	r4, r3, #31
 800529a:	d504      	bpl.n	80052a6 <_vfiprintf_r+0x4e>
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	b01d      	add	sp, #116	@ 0x74
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	0598      	lsls	r0, r3, #22
 80052aa:	d4f7      	bmi.n	800529c <_vfiprintf_r+0x44>
 80052ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ae:	f7fe f9ed 	bl	800368c <__retarget_lock_release_recursive>
 80052b2:	e7f3      	b.n	800529c <_vfiprintf_r+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052b8:	2320      	movs	r3, #32
 80052ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052be:	2330      	movs	r3, #48	@ 0x30
 80052c0:	f04f 0901 	mov.w	r9, #1
 80052c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80052c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005474 <_vfiprintf_r+0x21c>
 80052cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052d0:	4623      	mov	r3, r4
 80052d2:	469a      	mov	sl, r3
 80052d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d8:	b10a      	cbz	r2, 80052de <_vfiprintf_r+0x86>
 80052da:	2a25      	cmp	r2, #37	@ 0x25
 80052dc:	d1f9      	bne.n	80052d2 <_vfiprintf_r+0x7a>
 80052de:	ebba 0b04 	subs.w	fp, sl, r4
 80052e2:	d00b      	beq.n	80052fc <_vfiprintf_r+0xa4>
 80052e4:	465b      	mov	r3, fp
 80052e6:	4622      	mov	r2, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff ffa2 	bl	8005234 <__sfputs_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	f000 80a7 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 80052f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052f8:	445a      	add	r2, fp
 80052fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80052fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 809f 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 8005306:	2300      	movs	r3, #0
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005310:	f10a 0a01 	add.w	sl, sl, #1
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	9307      	str	r3, [sp, #28]
 8005318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800531c:	931a      	str	r3, [sp, #104]	@ 0x68
 800531e:	4654      	mov	r4, sl
 8005320:	2205      	movs	r2, #5
 8005322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005326:	4853      	ldr	r0, [pc, #332]	@ (8005474 <_vfiprintf_r+0x21c>)
 8005328:	f7fe f9b1 	bl	800368e <memchr>
 800532c:	9a04      	ldr	r2, [sp, #16]
 800532e:	b9d8      	cbnz	r0, 8005368 <_vfiprintf_r+0x110>
 8005330:	06d1      	lsls	r1, r2, #27
 8005332:	bf44      	itt	mi
 8005334:	2320      	movmi	r3, #32
 8005336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800533a:	0713      	lsls	r3, r2, #28
 800533c:	bf44      	itt	mi
 800533e:	232b      	movmi	r3, #43	@ 0x2b
 8005340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005344:	f89a 3000 	ldrb.w	r3, [sl]
 8005348:	2b2a      	cmp	r3, #42	@ 0x2a
 800534a:	d015      	beq.n	8005378 <_vfiprintf_r+0x120>
 800534c:	4654      	mov	r4, sl
 800534e:	2000      	movs	r0, #0
 8005350:	f04f 0c0a 	mov.w	ip, #10
 8005354:	9a07      	ldr	r2, [sp, #28]
 8005356:	4621      	mov	r1, r4
 8005358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800535c:	3b30      	subs	r3, #48	@ 0x30
 800535e:	2b09      	cmp	r3, #9
 8005360:	d94b      	bls.n	80053fa <_vfiprintf_r+0x1a2>
 8005362:	b1b0      	cbz	r0, 8005392 <_vfiprintf_r+0x13a>
 8005364:	9207      	str	r2, [sp, #28]
 8005366:	e014      	b.n	8005392 <_vfiprintf_r+0x13a>
 8005368:	eba0 0308 	sub.w	r3, r0, r8
 800536c:	fa09 f303 	lsl.w	r3, r9, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	46a2      	mov	sl, r4
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	e7d2      	b.n	800531e <_vfiprintf_r+0xc6>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1d19      	adds	r1, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	9103      	str	r1, [sp, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	bfbb      	ittet	lt
 8005384:	425b      	neglt	r3, r3
 8005386:	f042 0202 	orrlt.w	r2, r2, #2
 800538a:	9307      	strge	r3, [sp, #28]
 800538c:	9307      	strlt	r3, [sp, #28]
 800538e:	bfb8      	it	lt
 8005390:	9204      	strlt	r2, [sp, #16]
 8005392:	7823      	ldrb	r3, [r4, #0]
 8005394:	2b2e      	cmp	r3, #46	@ 0x2e
 8005396:	d10a      	bne.n	80053ae <_vfiprintf_r+0x156>
 8005398:	7863      	ldrb	r3, [r4, #1]
 800539a:	2b2a      	cmp	r3, #42	@ 0x2a
 800539c:	d132      	bne.n	8005404 <_vfiprintf_r+0x1ac>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	3402      	adds	r4, #2
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	9203      	str	r2, [sp, #12]
 80053a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005478 <_vfiprintf_r+0x220>
 80053b2:	2203      	movs	r2, #3
 80053b4:	4650      	mov	r0, sl
 80053b6:	7821      	ldrb	r1, [r4, #0]
 80053b8:	f7fe f969 	bl	800368e <memchr>
 80053bc:	b138      	cbz	r0, 80053ce <_vfiprintf_r+0x176>
 80053be:	2240      	movs	r2, #64	@ 0x40
 80053c0:	9b04      	ldr	r3, [sp, #16]
 80053c2:	eba0 000a 	sub.w	r0, r0, sl
 80053c6:	4082      	lsls	r2, r0
 80053c8:	4313      	orrs	r3, r2
 80053ca:	3401      	adds	r4, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d2:	2206      	movs	r2, #6
 80053d4:	4829      	ldr	r0, [pc, #164]	@ (800547c <_vfiprintf_r+0x224>)
 80053d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053da:	f7fe f958 	bl	800368e <memchr>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d03f      	beq.n	8005462 <_vfiprintf_r+0x20a>
 80053e2:	4b27      	ldr	r3, [pc, #156]	@ (8005480 <_vfiprintf_r+0x228>)
 80053e4:	bb1b      	cbnz	r3, 800542e <_vfiprintf_r+0x1d6>
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	3308      	adds	r3, #8
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f4:	443b      	add	r3, r7
 80053f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f8:	e76a      	b.n	80052d0 <_vfiprintf_r+0x78>
 80053fa:	460c      	mov	r4, r1
 80053fc:	2001      	movs	r0, #1
 80053fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005402:	e7a8      	b.n	8005356 <_vfiprintf_r+0xfe>
 8005404:	2300      	movs	r3, #0
 8005406:	f04f 0c0a 	mov.w	ip, #10
 800540a:	4619      	mov	r1, r3
 800540c:	3401      	adds	r4, #1
 800540e:	9305      	str	r3, [sp, #20]
 8005410:	4620      	mov	r0, r4
 8005412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005416:	3a30      	subs	r2, #48	@ 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d903      	bls.n	8005424 <_vfiprintf_r+0x1cc>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0c6      	beq.n	80053ae <_vfiprintf_r+0x156>
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	e7c4      	b.n	80053ae <_vfiprintf_r+0x156>
 8005424:	4604      	mov	r4, r0
 8005426:	2301      	movs	r3, #1
 8005428:	fb0c 2101 	mla	r1, ip, r1, r2
 800542c:	e7f0      	b.n	8005410 <_vfiprintf_r+0x1b8>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4630      	mov	r0, r6
 8005436:	4b13      	ldr	r3, [pc, #76]	@ (8005484 <_vfiprintf_r+0x22c>)
 8005438:	a904      	add	r1, sp, #16
 800543a:	f7fd fbc5 	bl	8002bc8 <_printf_float>
 800543e:	4607      	mov	r7, r0
 8005440:	1c78      	adds	r0, r7, #1
 8005442:	d1d6      	bne.n	80053f2 <_vfiprintf_r+0x19a>
 8005444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005446:	07d9      	lsls	r1, r3, #31
 8005448:	d405      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	059a      	lsls	r2, r3, #22
 800544e:	d402      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 8005450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005452:	f7fe f91b 	bl	800368c <__retarget_lock_release_recursive>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	065b      	lsls	r3, r3, #25
 800545a:	f53f af1f 	bmi.w	800529c <_vfiprintf_r+0x44>
 800545e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005460:	e71e      	b.n	80052a0 <_vfiprintf_r+0x48>
 8005462:	ab03      	add	r3, sp, #12
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	462a      	mov	r2, r5
 8005468:	4630      	mov	r0, r6
 800546a:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <_vfiprintf_r+0x22c>)
 800546c:	a904      	add	r1, sp, #16
 800546e:	f7fd fe49 	bl	8003104 <_printf_i>
 8005472:	e7e4      	b.n	800543e <_vfiprintf_r+0x1e6>
 8005474:	08005ea1 	.word	0x08005ea1
 8005478:	08005ea7 	.word	0x08005ea7
 800547c:	08005eab 	.word	0x08005eab
 8005480:	08002bc9 	.word	0x08002bc9
 8005484:	08005235 	.word	0x08005235

08005488 <__swbuf_r>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	460e      	mov	r6, r1
 800548c:	4614      	mov	r4, r2
 800548e:	4605      	mov	r5, r0
 8005490:	b118      	cbz	r0, 800549a <__swbuf_r+0x12>
 8005492:	6a03      	ldr	r3, [r0, #32]
 8005494:	b90b      	cbnz	r3, 800549a <__swbuf_r+0x12>
 8005496:	f7fd ffdf 	bl	8003458 <__sinit>
 800549a:	69a3      	ldr	r3, [r4, #24]
 800549c:	60a3      	str	r3, [r4, #8]
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	071a      	lsls	r2, r3, #28
 80054a2:	d501      	bpl.n	80054a8 <__swbuf_r+0x20>
 80054a4:	6923      	ldr	r3, [r4, #16]
 80054a6:	b943      	cbnz	r3, 80054ba <__swbuf_r+0x32>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f82a 	bl	8005504 <__swsetup_r>
 80054b0:	b118      	cbz	r0, 80054ba <__swbuf_r+0x32>
 80054b2:	f04f 37ff 	mov.w	r7, #4294967295
 80054b6:	4638      	mov	r0, r7
 80054b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	6922      	ldr	r2, [r4, #16]
 80054be:	b2f6      	uxtb	r6, r6
 80054c0:	1a98      	subs	r0, r3, r2
 80054c2:	6963      	ldr	r3, [r4, #20]
 80054c4:	4637      	mov	r7, r6
 80054c6:	4283      	cmp	r3, r0
 80054c8:	dc05      	bgt.n	80054d6 <__swbuf_r+0x4e>
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f7ff fd9b 	bl	8005008 <_fflush_r>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d1ed      	bne.n	80054b2 <__swbuf_r+0x2a>
 80054d6:	68a3      	ldr	r3, [r4, #8]
 80054d8:	3b01      	subs	r3, #1
 80054da:	60a3      	str	r3, [r4, #8]
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	6022      	str	r2, [r4, #0]
 80054e2:	701e      	strb	r6, [r3, #0]
 80054e4:	6962      	ldr	r2, [r4, #20]
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d004      	beq.n	80054f6 <__swbuf_r+0x6e>
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	07db      	lsls	r3, r3, #31
 80054f0:	d5e1      	bpl.n	80054b6 <__swbuf_r+0x2e>
 80054f2:	2e0a      	cmp	r6, #10
 80054f4:	d1df      	bne.n	80054b6 <__swbuf_r+0x2e>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f7ff fd85 	bl	8005008 <_fflush_r>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d0d9      	beq.n	80054b6 <__swbuf_r+0x2e>
 8005502:	e7d6      	b.n	80054b2 <__swbuf_r+0x2a>

08005504 <__swsetup_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4b29      	ldr	r3, [pc, #164]	@ (80055ac <__swsetup_r+0xa8>)
 8005508:	4605      	mov	r5, r0
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	460c      	mov	r4, r1
 800550e:	b118      	cbz	r0, 8005518 <__swsetup_r+0x14>
 8005510:	6a03      	ldr	r3, [r0, #32]
 8005512:	b90b      	cbnz	r3, 8005518 <__swsetup_r+0x14>
 8005514:	f7fd ffa0 	bl	8003458 <__sinit>
 8005518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800551c:	0719      	lsls	r1, r3, #28
 800551e:	d422      	bmi.n	8005566 <__swsetup_r+0x62>
 8005520:	06da      	lsls	r2, r3, #27
 8005522:	d407      	bmi.n	8005534 <__swsetup_r+0x30>
 8005524:	2209      	movs	r2, #9
 8005526:	602a      	str	r2, [r5, #0]
 8005528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	81a3      	strh	r3, [r4, #12]
 8005532:	e033      	b.n	800559c <__swsetup_r+0x98>
 8005534:	0758      	lsls	r0, r3, #29
 8005536:	d512      	bpl.n	800555e <__swsetup_r+0x5a>
 8005538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800553a:	b141      	cbz	r1, 800554e <__swsetup_r+0x4a>
 800553c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005540:	4299      	cmp	r1, r3
 8005542:	d002      	beq.n	800554a <__swsetup_r+0x46>
 8005544:	4628      	mov	r0, r5
 8005546:	f7fe ff0f 	bl	8004368 <_free_r>
 800554a:	2300      	movs	r3, #0
 800554c:	6363      	str	r3, [r4, #52]	@ 0x34
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005554:	81a3      	strh	r3, [r4, #12]
 8005556:	2300      	movs	r3, #0
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f043 0308 	orr.w	r3, r3, #8
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	b94b      	cbnz	r3, 800557e <__swsetup_r+0x7a>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005574:	d003      	beq.n	800557e <__swsetup_r+0x7a>
 8005576:	4621      	mov	r1, r4
 8005578:	4628      	mov	r0, r5
 800557a:	f000 f882 	bl	8005682 <__smakebuf_r>
 800557e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005582:	f013 0201 	ands.w	r2, r3, #1
 8005586:	d00a      	beq.n	800559e <__swsetup_r+0x9a>
 8005588:	2200      	movs	r2, #0
 800558a:	60a2      	str	r2, [r4, #8]
 800558c:	6962      	ldr	r2, [r4, #20]
 800558e:	4252      	negs	r2, r2
 8005590:	61a2      	str	r2, [r4, #24]
 8005592:	6922      	ldr	r2, [r4, #16]
 8005594:	b942      	cbnz	r2, 80055a8 <__swsetup_r+0xa4>
 8005596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800559a:	d1c5      	bne.n	8005528 <__swsetup_r+0x24>
 800559c:	bd38      	pop	{r3, r4, r5, pc}
 800559e:	0799      	lsls	r1, r3, #30
 80055a0:	bf58      	it	pl
 80055a2:	6962      	ldrpl	r2, [r4, #20]
 80055a4:	60a2      	str	r2, [r4, #8]
 80055a6:	e7f4      	b.n	8005592 <__swsetup_r+0x8e>
 80055a8:	2000      	movs	r0, #0
 80055aa:	e7f7      	b.n	800559c <__swsetup_r+0x98>
 80055ac:	2000003c 	.word	0x2000003c

080055b0 <_raise_r>:
 80055b0:	291f      	cmp	r1, #31
 80055b2:	b538      	push	{r3, r4, r5, lr}
 80055b4:	4605      	mov	r5, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	d904      	bls.n	80055c4 <_raise_r+0x14>
 80055ba:	2316      	movs	r3, #22
 80055bc:	6003      	str	r3, [r0, #0]
 80055be:	f04f 30ff 	mov.w	r0, #4294967295
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80055c6:	b112      	cbz	r2, 80055ce <_raise_r+0x1e>
 80055c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055cc:	b94b      	cbnz	r3, 80055e2 <_raise_r+0x32>
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 f830 	bl	8005634 <_getpid_r>
 80055d4:	4622      	mov	r2, r4
 80055d6:	4601      	mov	r1, r0
 80055d8:	4628      	mov	r0, r5
 80055da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055de:	f000 b817 	b.w	8005610 <_kill_r>
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d00a      	beq.n	80055fc <_raise_r+0x4c>
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	d103      	bne.n	80055f2 <_raise_r+0x42>
 80055ea:	2316      	movs	r3, #22
 80055ec:	6003      	str	r3, [r0, #0]
 80055ee:	2001      	movs	r0, #1
 80055f0:	e7e7      	b.n	80055c2 <_raise_r+0x12>
 80055f2:	2100      	movs	r1, #0
 80055f4:	4620      	mov	r0, r4
 80055f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80055fa:	4798      	blx	r3
 80055fc:	2000      	movs	r0, #0
 80055fe:	e7e0      	b.n	80055c2 <_raise_r+0x12>

08005600 <raise>:
 8005600:	4b02      	ldr	r3, [pc, #8]	@ (800560c <raise+0xc>)
 8005602:	4601      	mov	r1, r0
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f7ff bfd3 	b.w	80055b0 <_raise_r>
 800560a:	bf00      	nop
 800560c:	2000003c 	.word	0x2000003c

08005610 <_kill_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	2300      	movs	r3, #0
 8005614:	4d06      	ldr	r5, [pc, #24]	@ (8005630 <_kill_r+0x20>)
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	f7fd f81c 	bl	800265a <_kill>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	d102      	bne.n	800562c <_kill_r+0x1c>
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	b103      	cbz	r3, 800562c <_kill_r+0x1c>
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	bd38      	pop	{r3, r4, r5, pc}
 800562e:	bf00      	nop
 8005630:	20000360 	.word	0x20000360

08005634 <_getpid_r>:
 8005634:	f7fd b80a 	b.w	800264c <_getpid>

08005638 <__swhatbuf_r>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	460c      	mov	r4, r1
 800563c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005640:	4615      	mov	r5, r2
 8005642:	2900      	cmp	r1, #0
 8005644:	461e      	mov	r6, r3
 8005646:	b096      	sub	sp, #88	@ 0x58
 8005648:	da0c      	bge.n	8005664 <__swhatbuf_r+0x2c>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	2100      	movs	r1, #0
 800564e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005652:	bf14      	ite	ne
 8005654:	2340      	movne	r3, #64	@ 0x40
 8005656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800565a:	2000      	movs	r0, #0
 800565c:	6031      	str	r1, [r6, #0]
 800565e:	602b      	str	r3, [r5, #0]
 8005660:	b016      	add	sp, #88	@ 0x58
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	466a      	mov	r2, sp
 8005666:	f000 f849 	bl	80056fc <_fstat_r>
 800566a:	2800      	cmp	r0, #0
 800566c:	dbed      	blt.n	800564a <__swhatbuf_r+0x12>
 800566e:	9901      	ldr	r1, [sp, #4]
 8005670:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005674:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005678:	4259      	negs	r1, r3
 800567a:	4159      	adcs	r1, r3
 800567c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005680:	e7eb      	b.n	800565a <__swhatbuf_r+0x22>

08005682 <__smakebuf_r>:
 8005682:	898b      	ldrh	r3, [r1, #12]
 8005684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005686:	079d      	lsls	r5, r3, #30
 8005688:	4606      	mov	r6, r0
 800568a:	460c      	mov	r4, r1
 800568c:	d507      	bpl.n	800569e <__smakebuf_r+0x1c>
 800568e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	6123      	str	r3, [r4, #16]
 8005696:	2301      	movs	r3, #1
 8005698:	6163      	str	r3, [r4, #20]
 800569a:	b003      	add	sp, #12
 800569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569e:	466a      	mov	r2, sp
 80056a0:	ab01      	add	r3, sp, #4
 80056a2:	f7ff ffc9 	bl	8005638 <__swhatbuf_r>
 80056a6:	9f00      	ldr	r7, [sp, #0]
 80056a8:	4605      	mov	r5, r0
 80056aa:	4639      	mov	r1, r7
 80056ac:	4630      	mov	r0, r6
 80056ae:	f7fe fecd 	bl	800444c <_malloc_r>
 80056b2:	b948      	cbnz	r0, 80056c8 <__smakebuf_r+0x46>
 80056b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b8:	059a      	lsls	r2, r3, #22
 80056ba:	d4ee      	bmi.n	800569a <__smakebuf_r+0x18>
 80056bc:	f023 0303 	bic.w	r3, r3, #3
 80056c0:	f043 0302 	orr.w	r3, r3, #2
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	e7e2      	b.n	800568e <__smakebuf_r+0xc>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	9b01      	ldr	r3, [sp, #4]
 80056d6:	6020      	str	r0, [r4, #0]
 80056d8:	b15b      	cbz	r3, 80056f2 <__smakebuf_r+0x70>
 80056da:	4630      	mov	r0, r6
 80056dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056e0:	f000 f81e 	bl	8005720 <_isatty_r>
 80056e4:	b128      	cbz	r0, 80056f2 <__smakebuf_r+0x70>
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	f023 0303 	bic.w	r3, r3, #3
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	431d      	orrs	r5, r3
 80056f6:	81a5      	strh	r5, [r4, #12]
 80056f8:	e7cf      	b.n	800569a <__smakebuf_r+0x18>
	...

080056fc <_fstat_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	2300      	movs	r3, #0
 8005700:	4d06      	ldr	r5, [pc, #24]	@ (800571c <_fstat_r+0x20>)
 8005702:	4604      	mov	r4, r0
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	f7fd f805 	bl	8002718 <_fstat>
 800570e:	1c43      	adds	r3, r0, #1
 8005710:	d102      	bne.n	8005718 <_fstat_r+0x1c>
 8005712:	682b      	ldr	r3, [r5, #0]
 8005714:	b103      	cbz	r3, 8005718 <_fstat_r+0x1c>
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	bd38      	pop	{r3, r4, r5, pc}
 800571a:	bf00      	nop
 800571c:	20000360 	.word	0x20000360

08005720 <_isatty_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	2300      	movs	r3, #0
 8005724:	4d05      	ldr	r5, [pc, #20]	@ (800573c <_isatty_r+0x1c>)
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	602b      	str	r3, [r5, #0]
 800572c:	f7fd f803 	bl	8002736 <_isatty>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_isatty_r+0x1a>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_isatty_r+0x1a>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	20000360 	.word	0x20000360

08005740 <log>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	4604      	mov	r4, r0
 8005744:	460d      	mov	r5, r1
 8005746:	f000 f833 	bl	80057b0 <__ieee754_log>
 800574a:	4622      	mov	r2, r4
 800574c:	4606      	mov	r6, r0
 800574e:	460f      	mov	r7, r1
 8005750:	462b      	mov	r3, r5
 8005752:	4620      	mov	r0, r4
 8005754:	4629      	mov	r1, r5
 8005756:	f7fb f969 	bl	8000a2c <__aeabi_dcmpun>
 800575a:	b998      	cbnz	r0, 8005784 <log+0x44>
 800575c:	2200      	movs	r2, #0
 800575e:	2300      	movs	r3, #0
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fb f958 	bl	8000a18 <__aeabi_dcmpgt>
 8005768:	b960      	cbnz	r0, 8005784 <log+0x44>
 800576a:	2200      	movs	r2, #0
 800576c:	2300      	movs	r3, #0
 800576e:	4620      	mov	r0, r4
 8005770:	4629      	mov	r1, r5
 8005772:	f7fb f929 	bl	80009c8 <__aeabi_dcmpeq>
 8005776:	b140      	cbz	r0, 800578a <log+0x4a>
 8005778:	f7fd ff5c 	bl	8003634 <__errno>
 800577c:	2322      	movs	r3, #34	@ 0x22
 800577e:	2600      	movs	r6, #0
 8005780:	4f06      	ldr	r7, [pc, #24]	@ (800579c <log+0x5c>)
 8005782:	6003      	str	r3, [r0, #0]
 8005784:	4630      	mov	r0, r6
 8005786:	4639      	mov	r1, r7
 8005788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578a:	f7fd ff53 	bl	8003634 <__errno>
 800578e:	2321      	movs	r3, #33	@ 0x21
 8005790:	6003      	str	r3, [r0, #0]
 8005792:	4803      	ldr	r0, [pc, #12]	@ (80057a0 <log+0x60>)
 8005794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005798:	f000 b804 	b.w	80057a4 <nan>
 800579c:	fff00000 	.word	0xfff00000
 80057a0:	08005ef7 	.word	0x08005ef7

080057a4 <nan>:
 80057a4:	2000      	movs	r0, #0
 80057a6:	4901      	ldr	r1, [pc, #4]	@ (80057ac <nan+0x8>)
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	7ff80000 	.word	0x7ff80000

080057b0 <__ieee754_log>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	460d      	mov	r5, r1
 80057be:	b087      	sub	sp, #28
 80057c0:	da24      	bge.n	800580c <__ieee754_log+0x5c>
 80057c2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80057c6:	4304      	orrs	r4, r0
 80057c8:	d108      	bne.n	80057dc <__ieee754_log+0x2c>
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	2000      	movs	r0, #0
 80057d0:	49cb      	ldr	r1, [pc, #812]	@ (8005b00 <__ieee754_log+0x350>)
 80057d2:	f7fa ffbb 	bl	800074c <__aeabi_ddiv>
 80057d6:	b007      	add	sp, #28
 80057d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057dc:	2900      	cmp	r1, #0
 80057de:	da04      	bge.n	80057ea <__ieee754_log+0x3a>
 80057e0:	f7fa fcd2 	bl	8000188 <__aeabi_dsub>
 80057e4:	2200      	movs	r2, #0
 80057e6:	2300      	movs	r3, #0
 80057e8:	e7f3      	b.n	80057d2 <__ieee754_log+0x22>
 80057ea:	2200      	movs	r2, #0
 80057ec:	4bc5      	ldr	r3, [pc, #788]	@ (8005b04 <__ieee754_log+0x354>)
 80057ee:	f7fa fe83 	bl	80004f8 <__aeabi_dmul>
 80057f2:	460b      	mov	r3, r1
 80057f4:	460d      	mov	r5, r1
 80057f6:	4602      	mov	r2, r0
 80057f8:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80057fc:	48c2      	ldr	r0, [pc, #776]	@ (8005b08 <__ieee754_log+0x358>)
 80057fe:	4285      	cmp	r5, r0
 8005800:	dd06      	ble.n	8005810 <__ieee754_log+0x60>
 8005802:	4610      	mov	r0, r2
 8005804:	4619      	mov	r1, r3
 8005806:	f7fa fcc1 	bl	800018c <__adddf3>
 800580a:	e7e4      	b.n	80057d6 <__ieee754_log+0x26>
 800580c:	2100      	movs	r1, #0
 800580e:	e7f5      	b.n	80057fc <__ieee754_log+0x4c>
 8005810:	152c      	asrs	r4, r5, #20
 8005812:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8005816:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800581a:	440c      	add	r4, r1
 800581c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8005820:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8005824:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8005828:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800582c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8005830:	ea41 0305 	orr.w	r3, r1, r5
 8005834:	4610      	mov	r0, r2
 8005836:	4619      	mov	r1, r3
 8005838:	2200      	movs	r2, #0
 800583a:	4bb4      	ldr	r3, [pc, #720]	@ (8005b0c <__ieee754_log+0x35c>)
 800583c:	f7fa fca4 	bl	8000188 <__aeabi_dsub>
 8005840:	1cab      	adds	r3, r5, #2
 8005842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005846:	2b02      	cmp	r3, #2
 8005848:	4682      	mov	sl, r0
 800584a:	468b      	mov	fp, r1
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8005854:	dc53      	bgt.n	80058fe <__ieee754_log+0x14e>
 8005856:	2300      	movs	r3, #0
 8005858:	f7fb f8b6 	bl	80009c8 <__aeabi_dcmpeq>
 800585c:	b1d0      	cbz	r0, 8005894 <__ieee754_log+0xe4>
 800585e:	2c00      	cmp	r4, #0
 8005860:	f000 8120 	beq.w	8005aa4 <__ieee754_log+0x2f4>
 8005864:	4620      	mov	r0, r4
 8005866:	f7fa fddd 	bl	8000424 <__aeabi_i2d>
 800586a:	a391      	add	r3, pc, #580	@ (adr r3, 8005ab0 <__ieee754_log+0x300>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	4606      	mov	r6, r0
 8005872:	460f      	mov	r7, r1
 8005874:	f7fa fe40 	bl	80004f8 <__aeabi_dmul>
 8005878:	a38f      	add	r3, pc, #572	@ (adr r3, 8005ab8 <__ieee754_log+0x308>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	4604      	mov	r4, r0
 8005880:	460d      	mov	r5, r1
 8005882:	4630      	mov	r0, r6
 8005884:	4639      	mov	r1, r7
 8005886:	f7fa fe37 	bl	80004f8 <__aeabi_dmul>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	e7b8      	b.n	8005806 <__ieee754_log+0x56>
 8005894:	a38a      	add	r3, pc, #552	@ (adr r3, 8005ac0 <__ieee754_log+0x310>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	4650      	mov	r0, sl
 800589c:	4659      	mov	r1, fp
 800589e:	f7fa fe2b 	bl	80004f8 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	2000      	movs	r0, #0
 80058a8:	4999      	ldr	r1, [pc, #612]	@ (8005b10 <__ieee754_log+0x360>)
 80058aa:	f7fa fc6d 	bl	8000188 <__aeabi_dsub>
 80058ae:	4652      	mov	r2, sl
 80058b0:	4606      	mov	r6, r0
 80058b2:	460f      	mov	r7, r1
 80058b4:	465b      	mov	r3, fp
 80058b6:	4650      	mov	r0, sl
 80058b8:	4659      	mov	r1, fp
 80058ba:	f7fa fe1d 	bl	80004f8 <__aeabi_dmul>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4630      	mov	r0, r6
 80058c4:	4639      	mov	r1, r7
 80058c6:	f7fa fe17 	bl	80004f8 <__aeabi_dmul>
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	b914      	cbnz	r4, 80058d6 <__ieee754_log+0x126>
 80058d0:	4632      	mov	r2, r6
 80058d2:	463b      	mov	r3, r7
 80058d4:	e0a0      	b.n	8005a18 <__ieee754_log+0x268>
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7fa fda4 	bl	8000424 <__aeabi_i2d>
 80058dc:	a374      	add	r3, pc, #464	@ (adr r3, 8005ab0 <__ieee754_log+0x300>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	4680      	mov	r8, r0
 80058e4:	4689      	mov	r9, r1
 80058e6:	f7fa fe07 	bl	80004f8 <__aeabi_dmul>
 80058ea:	a373      	add	r3, pc, #460	@ (adr r3, 8005ab8 <__ieee754_log+0x308>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	4604      	mov	r4, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	4640      	mov	r0, r8
 80058f6:	4649      	mov	r1, r9
 80058f8:	f7fa fdfe 	bl	80004f8 <__aeabi_dmul>
 80058fc:	e0a5      	b.n	8005a4a <__ieee754_log+0x29a>
 80058fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005902:	f7fa fc43 	bl	800018c <__adddf3>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4650      	mov	r0, sl
 800590c:	4659      	mov	r1, fp
 800590e:	f7fa ff1d 	bl	800074c <__aeabi_ddiv>
 8005912:	e9cd 0100 	strd	r0, r1, [sp]
 8005916:	4620      	mov	r0, r4
 8005918:	f7fa fd84 	bl	8000424 <__aeabi_i2d>
 800591c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005924:	4610      	mov	r0, r2
 8005926:	4619      	mov	r1, r3
 8005928:	f7fa fde6 	bl	80004f8 <__aeabi_dmul>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005934:	f7fa fde0 	bl	80004f8 <__aeabi_dmul>
 8005938:	a363      	add	r3, pc, #396	@ (adr r3, 8005ac8 <__ieee754_log+0x318>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	4680      	mov	r8, r0
 8005940:	4689      	mov	r9, r1
 8005942:	f7fa fdd9 	bl	80004f8 <__aeabi_dmul>
 8005946:	a362      	add	r3, pc, #392	@ (adr r3, 8005ad0 <__ieee754_log+0x320>)
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	f7fa fc1e 	bl	800018c <__adddf3>
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	f7fa fdd0 	bl	80004f8 <__aeabi_dmul>
 8005958:	a35f      	add	r3, pc, #380	@ (adr r3, 8005ad8 <__ieee754_log+0x328>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f7fa fc15 	bl	800018c <__adddf3>
 8005962:	4642      	mov	r2, r8
 8005964:	464b      	mov	r3, r9
 8005966:	f7fa fdc7 	bl	80004f8 <__aeabi_dmul>
 800596a:	a35d      	add	r3, pc, #372	@ (adr r3, 8005ae0 <__ieee754_log+0x330>)
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f7fa fc0c 	bl	800018c <__adddf3>
 8005974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005978:	f7fa fdbe 	bl	80004f8 <__aeabi_dmul>
 800597c:	a35a      	add	r3, pc, #360	@ (adr r3, 8005ae8 <__ieee754_log+0x338>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005986:	4640      	mov	r0, r8
 8005988:	4649      	mov	r1, r9
 800598a:	f7fa fdb5 	bl	80004f8 <__aeabi_dmul>
 800598e:	a358      	add	r3, pc, #352	@ (adr r3, 8005af0 <__ieee754_log+0x340>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f7fa fbfa 	bl	800018c <__adddf3>
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	f7fa fdac 	bl	80004f8 <__aeabi_dmul>
 80059a0:	a355      	add	r3, pc, #340	@ (adr r3, 8005af8 <__ieee754_log+0x348>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fbf1 	bl	800018c <__adddf3>
 80059aa:	4642      	mov	r2, r8
 80059ac:	464b      	mov	r3, r9
 80059ae:	f7fa fda3 	bl	80004f8 <__aeabi_dmul>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ba:	f7fa fbe7 	bl	800018c <__adddf3>
 80059be:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80059c2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80059c6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80059ca:	3551      	adds	r5, #81	@ 0x51
 80059cc:	4335      	orrs	r5, r6
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	4680      	mov	r8, r0
 80059d2:	4689      	mov	r9, r1
 80059d4:	dd48      	ble.n	8005a68 <__ieee754_log+0x2b8>
 80059d6:	2200      	movs	r2, #0
 80059d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005b10 <__ieee754_log+0x360>)
 80059da:	4650      	mov	r0, sl
 80059dc:	4659      	mov	r1, fp
 80059de:	f7fa fd8b 	bl	80004f8 <__aeabi_dmul>
 80059e2:	4652      	mov	r2, sl
 80059e4:	465b      	mov	r3, fp
 80059e6:	f7fa fd87 	bl	80004f8 <__aeabi_dmul>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4606      	mov	r6, r0
 80059f0:	460f      	mov	r7, r1
 80059f2:	4640      	mov	r0, r8
 80059f4:	4649      	mov	r1, r9
 80059f6:	f7fa fbc9 	bl	800018c <__adddf3>
 80059fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059fe:	f7fa fd7b 	bl	80004f8 <__aeabi_dmul>
 8005a02:	4680      	mov	r8, r0
 8005a04:	4689      	mov	r9, r1
 8005a06:	b964      	cbnz	r4, 8005a22 <__ieee754_log+0x272>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fa fbba 	bl	8000188 <__aeabi_dsub>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4650      	mov	r0, sl
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	f7fa fbb4 	bl	8000188 <__aeabi_dsub>
 8005a20:	e6d9      	b.n	80057d6 <__ieee754_log+0x26>
 8005a22:	a323      	add	r3, pc, #140	@ (adr r3, 8005ab0 <__ieee754_log+0x300>)
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2c:	f7fa fd64 	bl	80004f8 <__aeabi_dmul>
 8005a30:	a321      	add	r3, pc, #132	@ (adr r3, 8005ab8 <__ieee754_log+0x308>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	4604      	mov	r4, r0
 8005a38:	460d      	mov	r5, r1
 8005a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a3e:	f7fa fd5b 	bl	80004f8 <__aeabi_dmul>
 8005a42:	4642      	mov	r2, r8
 8005a44:	464b      	mov	r3, r9
 8005a46:	f7fa fba1 	bl	800018c <__adddf3>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fb99 	bl	8000188 <__aeabi_dsub>
 8005a56:	4652      	mov	r2, sl
 8005a58:	465b      	mov	r3, fp
 8005a5a:	f7fa fb95 	bl	8000188 <__aeabi_dsub>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	e7d9      	b.n	8005a1c <__ieee754_log+0x26c>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4650      	mov	r0, sl
 8005a6e:	4659      	mov	r1, fp
 8005a70:	f7fa fb8a 	bl	8000188 <__aeabi_dsub>
 8005a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a78:	f7fa fd3e 	bl	80004f8 <__aeabi_dmul>
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	f43f af25 	beq.w	80058d0 <__ieee754_log+0x120>
 8005a86:	a30a      	add	r3, pc, #40	@ (adr r3, 8005ab0 <__ieee754_log+0x300>)
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a90:	f7fa fd32 	bl	80004f8 <__aeabi_dmul>
 8005a94:	a308      	add	r3, pc, #32	@ (adr r3, 8005ab8 <__ieee754_log+0x308>)
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aa2:	e729      	b.n	80058f8 <__ieee754_log+0x148>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	e695      	b.n	80057d6 <__ieee754_log+0x26>
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w
 8005ab0:	fee00000 	.word	0xfee00000
 8005ab4:	3fe62e42 	.word	0x3fe62e42
 8005ab8:	35793c76 	.word	0x35793c76
 8005abc:	3dea39ef 	.word	0x3dea39ef
 8005ac0:	55555555 	.word	0x55555555
 8005ac4:	3fd55555 	.word	0x3fd55555
 8005ac8:	df3e5244 	.word	0xdf3e5244
 8005acc:	3fc2f112 	.word	0x3fc2f112
 8005ad0:	96cb03de 	.word	0x96cb03de
 8005ad4:	3fc74664 	.word	0x3fc74664
 8005ad8:	94229359 	.word	0x94229359
 8005adc:	3fd24924 	.word	0x3fd24924
 8005ae0:	55555593 	.word	0x55555593
 8005ae4:	3fe55555 	.word	0x3fe55555
 8005ae8:	d078c69f 	.word	0xd078c69f
 8005aec:	3fc39a09 	.word	0x3fc39a09
 8005af0:	1d8e78af 	.word	0x1d8e78af
 8005af4:	3fcc71c5 	.word	0x3fcc71c5
 8005af8:	9997fa04 	.word	0x9997fa04
 8005afc:	3fd99999 	.word	0x3fd99999
 8005b00:	c3500000 	.word	0xc3500000
 8005b04:	43500000 	.word	0x43500000
 8005b08:	7fefffff 	.word	0x7fefffff
 8005b0c:	3ff00000 	.word	0x3ff00000
 8005b10:	3fe00000 	.word	0x3fe00000

08005b14 <_init>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr

08005b20 <_fini>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr
